[{"title":"CSS开发之格式化上下文（FC）","url":"http://yoursite.com/2017/09/13/CSS开发之格式化上下文（FC）/","content":"<p>FC的全称是：Formatting Contexts，是W3C CSS2.1规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p>\n<h1 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h1><p>一个块格式化上下文（block formatting context） 是Web页面的可视化CSS渲染出的一部分。它是块级盒布局出现的区域，也是浮动层元素进行交互的区域。</p>\n<p>一个块格式化上下文由以下之一创建：</p>\n<ul>\n<li>根元素或其它包含它的元素</li>\n<li>浮动元素 (元素的 <code>float</code> 不是 <code>none</code>)</li>\n<li>绝对定位元素 (元素具有 <code>position</code> 为 <code>absolute</code> 或 <code>fixed</code>)</li>\n<li>内联块 (元素具有 <code>display: inline-block</code>)</li>\n<li>表格单元格 (元素具有 <code>display: table-cell</code>，HTML表格单元格默认属性)</li>\n<li>表格标题 (元素具有 <code>display: table-caption</code>, HTML表格标题默认属性)</li>\n<li>具有<code>overflow</code> 且值不是 <code>visible</code> 的块元素，</li>\n<li><code>display: flow-root</code></li>\n<li><code>column-span: all</code> 应当总是会创建一个新的格式化上下文，即便具有 column-span: all 的元素并不被包裹在一个多列容器中。</li>\n</ul>\n<p>块格式化上下文对于定位 (参见 float) 与清除浮动 (参见 clear) 很重要。定位和清除浮动的样式规则只适用于处于同一块格式化上下文内的元素。浮动不会影响其它块格式化上下文中元素的布局，并且清除浮动只能清除同一块格式化上下文中在它前面的元素的浮动。</p>\n<p>BFC是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面元素，反之亦然。它与普通的块框类似，但不同之处在于:<br>1、可以阻止元素被浮动元素覆盖<br>2、可以包含浮动元素<br>3、属于同一个BFC的两个相邻块级子元素的上下margin会发生重叠，(设置writing-mode:tb-rl时，水平margin会发生重叠)。所以当两个相邻块级子元素分属于不同的BFC时可以阻止margin重叠</p>\n<h1 id=\"IFC\"><a href=\"#IFC\" class=\"headerlink\" title=\"IFC\"></a>IFC</h1><p>IFC(Inline Formatting Contexts)直译为”内联格式化上下文”，IFC的line box（线框）高度由其包含行内元素中最高的实际高度计算而来（不受到竖直方向的padding/margin影响)<br>IFC中的line box一般左右都贴紧整个IFC，但是会因为float元素而扰乱。float元素会位于IFC与与line box之间，使得line box宽度缩短。 同个ifc下的多个line box高度会不同。 IFC中时不可能有块级元素的，当插入块级元素时（如p中插入div）会产生两个匿名块与div分隔开，即产生两个IFC，每个IFC对外表现为块级元素，与div垂直排列。<br>那么IFC一般有什么用呢？<br>水平居中：当一个块要在环境中水平居中时，设置其为inline-block则会在外层产生IFC，通过text-align则可以使其水平居中。<br>垂直居中：创建一个IFC，用其中一个元素撑开父元素的高度，然后设置其vertical-align:middle，其他行内元素则可以在此父元素下垂直居中。</p>\n<p>#GFC<br>GFC(GridLayout Formatting Contexts)直译为”网格布局格式化上下文”，当为一个元素设置display值为grid的时候，此元素将会获得一个独立的渲染区域，我们可以通过在网格容器（grid container）上定义网格定义行（grid definition rows）和网格定义列（grid definition columns）属性各在网格项目（grid item）上定义网格行（grid row）和网格列（grid columns）为每一个网格项目（grid item）定义位置和空间。<br>那么GFC有什么用呢，和table又有什么区别呢？首先同样是一个二维的表格，但GridLayout会有更加丰富的属性来控制行列，控制对齐以及更为精细的渲染语义和控制。</p>\n<h1 id=\"FFC\"><a href=\"#FFC\" class=\"headerlink\" title=\"FFC\"></a>FFC</h1><p>FFC(Flex Formatting Contexts)直译为”自适应格式化上下文”，display值为flex或者inline-flex的元素将会生成自适应容器（flex container），可惜这个牛逼的属性只有谷歌和火狐支持，不过在移动端也足够了，至少safari和chrome还是OK的，毕竟这俩在移动端才是王道。<br>Flex Box 由伸缩容器和伸缩项目组成。通过设置元素的 display 属性为 flex 或 inline-flex 可以得到一个伸缩容器。设置为 flex 的容器被渲染为一个块级元素，而设置为 inline-flex 的容器则渲染为一个行内元素。<br>伸缩容器中的每一个子元素都是一个伸缩项目。伸缩项目可以是任意数量的。伸缩容器外和伸缩项目内的一切元素都不受影响。简单地说，Flexbox 定义了伸缩容器内伸缩项目该如何布局。</p>\n<blockquote>\n<p>参考<br><a href=\"http://www.cnblogs.com/dingyufenglian/p/4845477.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/dingyufenglian/p/4845477.html</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context</a></p>\n</blockquote>\n","categories":[],"tags":["css"]},{"title":"细数Javascript技术栈中的四种依赖注入","url":"http://yoursite.com/2017/05/05/JavaScript中的依赖注入/","content":"<p>作为面向对象编程中实现控制反转（Inversion of Control，下文称IoC）最常见的技术手段之一，依赖注入（Dependency Injection，下文称DI）可谓在OOP编程中大行其道经久不衰。比如在J2EE中，就有大名鼎鼎的执牛耳者Spring。Javascript社区中自然也不乏一些积极的尝试，广为人知的AngularJS很大程度上就是基于DI实现的。遗憾的是，作为一款缺少反射机制、不支持Annotation语法的动态语言，Javascript长期以来都没有属于自己的Spring框架。当然，伴随着ECMAScript草案进入快速迭代期的春风，Javascript社区中的各种方言、框架可谓群雄并起，方兴未艾。可以预见到，优秀的JavascriptDI框架的出现只是早晚的事。</p>\n<p>本文总结了Javascript中常见的依赖注入方式，并以inversify.js为例，介绍了方言社区对于Javascript中DI框架的尝试和初步成果。文章分为四节：</p>\n<p>一. 基于Injector、Cache和函数参数名的依赖注入<br>二. AngularJS中基于双Injector的依赖注入<br>三. TypeScript中基于装饰器和反射的依赖注入<br>四. inversify.js——Javascript技术栈中的IoC容器</p>\n<h1 id=\"一-基于Injector、Cache和函数参数名的依赖注入\"><a href=\"#一-基于Injector、Cache和函数参数名的依赖注入\" class=\"headerlink\" title=\"一. 基于Injector、Cache和函数参数名的依赖注入\"></a>一. 基于Injector、Cache和函数参数名的依赖注入</h1><p>尽管Javascript中不原生支持反射(Reflection)语法，但是Function.prototype上的toString方法却为我们另辟蹊径，使得在运行时窥探某个函数的内部构造成为可能：toString方法会以字符串的形式返回包含function关键字在内的整个函数定义。从这个完整的函数定义出发，我们可以利用正则表达式提取出该函数所需要的参数，从而在某种程度上得知该函数的运行依赖。<br>比如Student类上write方法的函数签名write(notebook, pencil)就说明它的执行依赖于notebook和pencil对象。因此，我们可以首先把notebook和pencil对象存放到某个cache中，再通过injector（注入器、注射器）向write方法提供它所需要的依赖：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cache = &#123;&#125;;</div><div class=\"line\"><span class=\"comment\">// 通过解析Function.prototype.toString()取得参数名</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getParamNames</span>(<span class=\"params\">func</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 正则表达式出自http://krasimirtsonev.com/blog/article/Dependency-injection-in-JavaScript</span></div><div class=\"line\">    <span class=\"keyword\">var</span> paramNames = func.toString().match(<span class=\"regexp\">/^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m</span>)[<span class=\"number\">1</span>];</div><div class=\"line\">    paramNames = paramNames.replace(<span class=\"regexp\">/ /g</span>, <span class=\"string\">''</span>);</div><div class=\"line\">    paramNames = paramNames.split(<span class=\"string\">','</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> paramNames;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> injector = &#123;</div><div class=\"line\">    <span class=\"comment\">// 将func作用域中的this关键字绑定到bind对象上，bind对象可以为空</span></div><div class=\"line\">    resolve: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">func, bind</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 取得参数名</span></div><div class=\"line\">        <span class=\"keyword\">var</span> paramNames = getParamNames(func);</div><div class=\"line\">        <span class=\"keyword\">var</span> params = [];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; paramNames.length; i++) &#123;</div><div class=\"line\">            <span class=\"comment\">// 通过参数名在cache中取出相应的依赖</span></div><div class=\"line\">            params.push(cache[paramNames[i]]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 注入依赖并执行函数</span></div><div class=\"line\">        func.apply(bind, params);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Notebook</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">Notebook.prototype.printName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is a notebook'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Pencil</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">Pencil.prototype.printName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is a pencil'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">Student.prototype.write = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">notebook, pencil</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!notebook || !pencil) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Dependencies not provided!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'writing...'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 提供notebook依赖</span></div><div class=\"line\">cache[<span class=\"string\">'notebook'</span>] = <span class=\"keyword\">new</span> Notebook();</div><div class=\"line\"><span class=\"comment\">// 提供pencil依赖</span></div><div class=\"line\">cache[<span class=\"string\">'pencil'</span>] = <span class=\"keyword\">new</span> Pencil();</div><div class=\"line\"><span class=\"keyword\">var</span> student = <span class=\"keyword\">new</span> Student();</div><div class=\"line\">injector.resolve(student.write, student); <span class=\"comment\">// writing...</span></div></pre></td></tr></table></figure>\n<p>有时候为了保证良好的封装性，也不一定要把cache对象暴露给外界作用域，更多的时候是以闭包变量或者私有属性的形式存在的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Injector</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._cache = &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">Injector.prototype.put = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._cache[name] = obj;</div><div class=\"line\">&#125;;</div><div class=\"line\"> </div><div class=\"line\">Injector.prototype.getParamNames = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">func</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 正则表达式出自http://krasimirtsonev.com/blog/article/Dependency-injection-in-JavaScript</span></div><div class=\"line\">    <span class=\"keyword\">var</span> paramNames = func.toString().match(<span class=\"regexp\">/^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m</span>)[<span class=\"number\">1</span>];</div><div class=\"line\">    paramNames = paramNames.replace(<span class=\"regexp\">/ /g</span>, <span class=\"string\">''</span>);</div><div class=\"line\">    paramNames = paramNames.split(<span class=\"string\">','</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> paramNames;</div><div class=\"line\">&#125;;</div><div class=\"line\"> </div><div class=\"line\">Injector.prototype.resolve = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">func, bind</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> paramNames = self.getParamNames(func);</div><div class=\"line\">    <span class=\"keyword\">var</span> params = paramNames.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> self._cache[name];</div><div class=\"line\">    &#125;);</div><div class=\"line\">    func.apply(bind, params);</div><div class=\"line\">&#125;;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> injector = <span class=\"keyword\">new</span> Injector();</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> student = <span class=\"keyword\">new</span> Student();</div><div class=\"line\">injector.put(<span class=\"string\">'notebook'</span>, <span class=\"keyword\">new</span> Notebook());</div><div class=\"line\">injector.put(<span class=\"string\">'pencil'</span>, <span class=\"keyword\">new</span> Pencil())</div><div class=\"line\">injector.resolve(student.write, student); <span class=\"comment\">// writing...</span></div></pre></td></tr></table></figure>\n<p>比如现在要执行Student类上的另一个方法function draw(notebook, pencil, eraser)，因为injector的cache中已经有了notebook和pencil对象，我们只需要将额外的eraser也存放到cache中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Eraser</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">Eraser.prototype.printName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is an eraser'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 为Student增加draw方法</span></div><div class=\"line\">Student.prototype.draw = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">notebook, pencil, eraser</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!notebook || !pencil || !eraser) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Dependencies not provided!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'drawing...'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"> </div><div class=\"line\">injector.put(<span class=\"string\">'eraser'</span>, <span class=\"keyword\">new</span> Eraser());</div><div class=\"line\">injector.resolve(student.draw, student);</div></pre></td></tr></table></figure>\n<p>通过依赖注入，函数的执行和其所依赖对象的创建逻辑就被解耦开来了。<br>当然，随着grunt/gulp/fis等前端工程化工具的普及，越来越多的项目在上线之前都经过了代码混淆(uglify)，因而通过参数名去判断依赖并不总是可靠，有时候也会通过为function添加额外属性的方式来明确地说明其依赖：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Student.prototype.write.depends = [<span class=\"string\">'notebook'</span>, <span class=\"string\">'pencil'</span>];</div><div class=\"line\">Student.prototype.draw.depends = [<span class=\"string\">'notebook'</span>, <span class=\"string\">'pencil'</span>, <span class=\"string\">'eraser'</span>];</div><div class=\"line\">Injector.prototype.resolve = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">func, bind</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"comment\">// 首先检查func上是否有depends属性，如果没有，再用正则表达式解析</span></div><div class=\"line\">    func.depends = func.depends || self.getParamNames(func);</div><div class=\"line\">    <span class=\"keyword\">var</span> params = func.depends.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> self._cache[name];</div><div class=\"line\">    &#125;);</div><div class=\"line\">    func.apply(bind, params);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> student = <span class=\"keyword\">new</span> Student();</div><div class=\"line\">injector.resolve(student.write, student); <span class=\"comment\">// writing...</span></div><div class=\"line\">injector.resolve(student.draw, student); <span class=\"comment\">// draw...</span></div></pre></td></tr></table></figure>\n<p>二. AngularJS中基于双Injector的依赖注入</p>\n<p>熟悉AngularJS的同学很快就能联想到，在injector注入之前，我们在定义module时还可以调用config方法来配置随后会被注入的对象。典型的例子就是在使用路由时对$routeProvider的配置。也就是说，不同于上一小节中直接将现成对象（比如new Notebook()）存入cache的做法，AngularJS中的依赖注入应该还有一个”实例化”或者”调用工厂方法”的过程。<br>这就是providerInjector、instanceInjector以及他们各自所拥有的providerCache和instanceCache的由来。<br>在AngularJS中，我们能够通过依赖注入获取到的injector通常是instanceInjector，而providerInjector则是以闭包中变量的形式存在的。每当我们需要AngularJS提供依赖注入服务时，比如想要获取notebook，instanceInjector会首先查询instanceCache上是存在notebook属性，如果存在，则直接注入；如果不存在，则将这个任务转交给providerInjector；providerInjector会将”Provider”字符串拼接到”notebook”字符串的后面，组成一个新的键名”notebookProvider”，再到providerCache中查询是否有notebookProvider这个属性，如有没有，则抛出异常Unknown Provider异常：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error: [$injector:unpr] Unknow provider: notebookProvider &lt;- notebook &lt;- myCtrl</div></pre></td></tr></table></figure>\n<p>如果有，则将这个provider返回给instanceInjector；instanceInjector拿到notebookProvider后，会调用notebookProvider上的工厂方法$get，获取返回值notebook对象，将该对象放到instanceCache中以备将来使用，同时也注入到一开始声明这个依赖的函数中。过程描述起来比较复杂，可以通过下面的图示来说明：</p>\n<p><img src=\"./1.png\" alt=\"\"></p>\n<p>需要注意的是，AngularJS中的依赖注入方式也是有缺陷的：利用一个instanceInjector单例服务全局的副作用就是无法单独跟踪和控制某一条依赖链条，即使在没有交叉依赖的情况下，不同module中的同名provider也会产生覆盖，这里就不详细展开了。</p>\n<p>另外，对于习惯于Java和C#等语言中高级IoC容器的同学来说，看到这里可能觉得有些别扭，毕竟在OOP中，我们通常不会将依赖以参数的形式传递给方法，而是作为属性通过constructor或者setters传递给实例，以实现封装。的确如此，一、二节中的依赖注入方式没有体现出足够的面向对象特性，毕竟这种方式在Javascript已经存在多年了，甚至都不需要ES5的语法支持。希望了解Javascript社区中最近一两年关于依赖注入的研究和成果的同学，可以继续往下阅读。</p>\n<h1 id=\"三-TypeScript中基于装饰器和反射的依赖注入\"><a href=\"#三-TypeScript中基于装饰器和反射的依赖注入\" class=\"headerlink\" title=\"三. TypeScript中基于装饰器和反射的依赖注入\"></a>三. TypeScript中基于装饰器和反射的依赖注入</h1><p>博主本身对于Javascript的各种方言的学习并不是特别热情，尤其是现在EMCAScript提案、草案更新很快，很多时候借助于polyfill和babel的各种preset就能满足需求了。但是TypeScript是一个例外（当然现在Decorator也已经是提案了，虽然阶段还比较早，但是确实已经有polyfill可以使用）。上文提到，Javascript社区中迟迟没有出现一款优秀的IoC容器和自身的语言特性有关，那就依赖注入这个话题而言，TypeScript给我们带来了什么不同呢？至少有下面这几点：</p>\n<ul>\n<li>TypeScript增加了编译时类型检查，使Javascript具备了一定的静态语言特性</li>\n<li>TypeScript支持装饰器（Decorator）语法，和传统的注解（Annotation）颇为相似</li>\n<li>TypeScript支持元信息（Metadata）反射，不再需要调用Function.prototype.toString方法<br>下面我们就尝试利用TypeScript带来的新语法来规范和简化依赖注入。这次我们不再向函数或方法中注入依赖了，而是向类的构造函数中注入。<br>TypeScript支持对类、方法、属性和函数参数进行装饰，这里需要用到的是对类的装饰。继续上面小节中用到的例子，利用TypeScript对代码进行一些重构：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pencil</span> </span>&#123;</div><div class=\"line\">    public printName() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is a pencil'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Eraser</span> </span>&#123;</div><div class=\"line\">    public printName() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is an eraser'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Notebook</span> </span>&#123;</div><div class=\"line\">    public printName() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is a notebook'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\">    pencil: Pencil;</div><div class=\"line\">    eraser: Eraser;</div><div class=\"line\">    notebook: Notebook;</div><div class=\"line\">    public <span class=\"keyword\">constructor</span>(notebook: Notebook, pencil: Pencil, eraser: Eraser) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.notebook = notebook;</div><div class=\"line\">        <span class=\"keyword\">this</span>.pencil = pencil;</div><div class=\"line\">        <span class=\"keyword\">this</span>.eraser = eraser;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public write() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.notebook || !<span class=\"keyword\">this</span>.pencil) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Dependencies not provided!'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'writing...'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    public draw() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.notebook || !<span class=\"keyword\">this</span>.pencil || !<span class=\"keyword\">this</span>.eraser) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Dependencies not provided!'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'drawing...'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>下面是injector和装饰器Inject的实现。injector的resolve方法在接收到传入的构造函数时，会通过name属性取出该构造函数的名字，比如class Student，它的name属性就是字符串”Student”。再将Student作为key，到dependenciesMap中去取出Student的依赖，至于dependenciesMap中是何时存入的依赖关系，这是装饰器Inject的逻辑，后面会谈到。Student的依赖取出后，由于这些依赖已经是构造函数的引用而非简单的字符串了（比如Notebook、Pencil的构造函数），因此直接使用new语句即可获取这些对象。获取到Student类所依赖的对象之后，如何把这些依赖作为构造函数的参数传入到Student中呢？最简单的莫过于ES6的spread操作符。在不能使用ES6的环境下，我们也可以通过伪造一个构造函数来完成上述逻辑。注意为了使instanceof操作符不失效，这个伪造的构造函数的prototype属性应该指向原构造函数的prototype属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dependenciesMap = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> injector = &#123;</div><div class=\"line\">    <span class=\"attr\">resolve</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">constructor</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> dependencies = dependenciesMap[<span class=\"keyword\">constructor</span>.name];</div><div class=\"line\">        dependencies = dependencies.map(function (dependency) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> dependency();</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">// 如果可以使用ES6的语法，下面的代码可以合并为一行：</span></div><div class=\"line\">        <span class=\"comment\">// return new constructor(...dependencies);</span></div><div class=\"line\">        <span class=\"keyword\">var</span> mockConstructor: any = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">constructor</span>.apply(this, dependencies);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        mockConstructor.prototype = <span class=\"keyword\">constructor</span>.prototype;</div><div class=\"line\">        return new mockConstructor();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">function Inject(...dependencies) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">constructor</span>) </span>&#123;</div><div class=\"line\">        dependenciesMap[<span class=\"keyword\">constructor</span>.name] = dependencies;</div><div class=\"line\">        return <span class=\"keyword\">constructor</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>injector和装饰器Inject的逻辑完成后，就可以用来装饰class Student并享受依赖注入带来的乐趣了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 装饰器的使用非常简单，只需要在类定义的上方添加一行代码</span></div><div class=\"line\"><span class=\"comment\">// Inject是装饰器的名字，后面是function Inject的参数</span></div><div class=\"line\">@Inject(Notebook, Pencil, Eraser)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\">    pencil: Pencil;</div><div class=\"line\">    eraser: Eraser;</div><div class=\"line\">    notebook: Notebook;</div><div class=\"line\">    public <span class=\"keyword\">constructor</span>(notebook: Notebook, pencil: Pencil, eraser: Eraser) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.notebook = notebook;</div><div class=\"line\">        <span class=\"keyword\">this</span>.pencil = pencil;</div><div class=\"line\">        <span class=\"keyword\">this</span>.eraser = eraser;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public write() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.notebook || !<span class=\"keyword\">this</span>.pencil) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Dependencies not provided!'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'writing...'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    public draw() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.notebook || !<span class=\"keyword\">this</span>.pencil || !<span class=\"keyword\">this</span>.eraser) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Dependencies not provided!'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'drawing...'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> student = injector.resolve(Student);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(student <span class=\"keyword\">instanceof</span> Student); <span class=\"comment\">// true</span></div><div class=\"line\">student.notebook.printName(); <span class=\"comment\">// this is a notebook</span></div><div class=\"line\">student.pencil.printName(); <span class=\"comment\">// this is a pencil</span></div><div class=\"line\">student.eraser.printName(); <span class=\"comment\">// this is an eraser</span></div><div class=\"line\">student.draw(); <span class=\"comment\">// drawing</span></div><div class=\"line\">student.write(); <span class=\"comment\">// writing</span></div></pre></td></tr></table></figure></p>\n<p>利用装饰器，我们还可以实现一种比较激进的依赖注入，下文称之为RadicalInject。RadicalInject对原代码的侵入性比较强，不一定适合具体的业务，这里也一并介绍一下。要理解RadicalInject，需要对TypeScript装饰器的原理和Array.prototype上的reduce方法理解比较到位。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">RadicalInject</span>(<span class=\"params\">...dependencies</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> wrappedFunc:any = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target: any</span>) </span>&#123;</div><div class=\"line\">        dependencies = dependencies.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">dependency</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> dependency();</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">// 使用mockConstructor的原因和上例相同</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mockConstructor</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            target.apply(<span class=\"keyword\">this</span>, dependencies);</div><div class=\"line\">        &#125;</div><div class=\"line\">        mockConstructor.prototype = target.prototype;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">// 为什么需要使用reservedConstructor呢？因为使用RadicalInject对Student方法装饰之后，</span></div><div class=\"line\">        <span class=\"comment\">// Student指向的构造函数已经不是一开始我们声明的class Student了，而是这里的返回值，</span></div><div class=\"line\">        <span class=\"comment\">// 即reservedConstructor。Student的指向变了并不是一件不能接受的事，但是如果要</span></div><div class=\"line\">        <span class=\"comment\">// 保证student instanceof Student如我们所期望的那样工作，这里就应该将</span></div><div class=\"line\">        <span class=\"comment\">// reservedConstructor的prototype属性指向原Student的prototype</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reservedConstructor</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> mockConstructor();</div><div class=\"line\">        &#125;</div><div class=\"line\">        reservedConstructor.prototype = target.prototype;</div><div class=\"line\">        <span class=\"keyword\">return</span> reservedConstructor;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> wrappedFunc;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用RadicalInject，原构造函数实质上已经被一个新的函数代理了，使用上也更为简单，甚至都不需要再有injector的实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RadicalInject(Notebook, Pencil, Eraser)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\">    pencil: Pencil;</div><div class=\"line\">    eraser: Eraser;</div><div class=\"line\">    notebook: Notebook;</div><div class=\"line\">    public <span class=\"keyword\">constructor</span>() &#123;&#125;</div><div class=\"line\">    public <span class=\"keyword\">constructor</span>(notebook: Notebook, pencil: Pencil, eraser: Eraser) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.notebook = notebook;</div><div class=\"line\">        <span class=\"keyword\">this</span>.pencil = pencil;</div><div class=\"line\">        <span class=\"keyword\">this</span>.eraser = eraser;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public write() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.notebook || !<span class=\"keyword\">this</span>.pencil) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Dependencies not provided!'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'writing...'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    public draw() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.notebook || !<span class=\"keyword\">this</span>.pencil || !<span class=\"keyword\">this</span>.eraser) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Dependencies not provided!'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'drawing...'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 不再出现injector，直接调用构造函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> student = <span class=\"keyword\">new</span> Student();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(student <span class=\"keyword\">instanceof</span> Student); <span class=\"comment\">// true</span></div><div class=\"line\">student.notebook.printName(); <span class=\"comment\">// this is a notebook</span></div><div class=\"line\">student.pencil.printName(); <span class=\"comment\">// this is a pencil</span></div><div class=\"line\">student.eraser.printName(); <span class=\"comment\">// this is an eraser</span></div><div class=\"line\">student.draw(); <span class=\"comment\">// drawing</span></div><div class=\"line\">student.write(); <span class=\"comment\">// writing</span></div></pre></td></tr></table></figure></p>\n<p>由于class Student的constructor方法需要接收三个参数，直接无参调用new Student()会造成TypeScript编译器报错。当然这里只是分享一种思路，大家可以暂时忽略这个错误。有兴趣的同学也可以使用类似的思路尝试代理一个工厂方法，而非直接代理构造函数，以避免这类错误，这里不再展开。</p>\n<p>AngularJS2团队为了获得更好的装饰器和反射语法的支持，一度准备另起炉灶，基于AtScript（AtScript中的”A”指的就是Annotation）来进行新框架的开发。但最终却选择拥抱TypeScript，于是便有了微软和谷歌的奇妙组合。</p>\n<p>当然，需要说明的是，在缺少相关标准和浏览器厂商支持的情况下，TypeScript在运行时只是纯粹的Javascript，下节中出现的例子会印证这一点。</p>\n<h1 id=\"四-inversify-js——Javascript技术栈中的IoC容器\"><a href=\"#四-inversify-js——Javascript技术栈中的IoC容器\" class=\"headerlink\" title=\"四. inversify.js——Javascript技术栈中的IoC容器\"></a>四. inversify.js——Javascript技术栈中的IoC容器</h1><p>其实从Javascript出现各种支持高级语言特性的方言就可以预见到，IoC容器的出现只是早晚的事情。比如博主今天要介绍的基于TypeScript的inversify.js，就是其中的先行者之一。<br>inversity.js比上节中博主实现的例子还要进步很多，它最初设计的目的就是为了前端工程师同学们能在Javascript中写出符合SOLID原则的代码，立意可谓非常之高。表现在代码中，就是处处有接口，将”Depend upon Abstractions. Do not depend upon concretions.”（依赖于抽象，而非依赖于具体）表现地淋漓尽致。继续使用上面的例子，但是由于inversity.js是面向接口的，上面的代码需要进一步重构：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">interface NotebookInterface &#123;</div><div class=\"line\">    printName(): <span class=\"keyword\">void</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">interface PencilInterface &#123;</div><div class=\"line\">    printName(): <span class=\"keyword\">void</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">interface EraserInterface &#123;</div><div class=\"line\">    printName(): <span class=\"keyword\">void</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">interface StudentInterface &#123;</div><div class=\"line\">    <span class=\"attr\">notebook</span>: NotebookInterface;</div><div class=\"line\">    pencil: PencilInterface;</div><div class=\"line\">    eraser: EraserInterface;</div><div class=\"line\">    write(): <span class=\"keyword\">void</span>;</div><div class=\"line\">    draw(): <span class=\"keyword\">void</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Notebook</span> <span class=\"title\">implements</span> <span class=\"title\">NotebookInterface</span> </span>&#123;</div><div class=\"line\">    public printName() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is a notebook'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pencil</span> <span class=\"title\">implements</span> <span class=\"title\">PencilInterface</span> </span>&#123;</div><div class=\"line\">    public printName() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is a pencil'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Eraser</span> <span class=\"title\">implements</span> <span class=\"title\">EraserInterface</span> </span>&#123;</div><div class=\"line\">    public printName() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is an eraser'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"title\">implements</span> <span class=\"title\">StudentInterface</span> </span>&#123;</div><div class=\"line\">    notebook: NotebookInterface;</div><div class=\"line\">    pencil: PencilInterface;</div><div class=\"line\">    eraser: EraserInterface;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(notebook: NotebookInterface, pencil: PencilInterface, eraser: EraserInterface) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.notebook = notebook;</div><div class=\"line\">        <span class=\"keyword\">this</span>.pencil = pencil;</div><div class=\"line\">        <span class=\"keyword\">this</span>.eraser = eraser;</div><div class=\"line\">    &#125;</div><div class=\"line\">    write() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'writing...'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    draw() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'drawing...'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于使用了inversity框架，这次我们就不用自己实现injector和Inject装饰器啦，只需要从inversify模块中引用相关对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Inject &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"inversify\"</span>;</div><div class=\"line\"> </div><div class=\"line\">@Inject(<span class=\"string\">\"NotebookInterface\"</span>, <span class=\"string\">\"PencilInterface\"</span>, <span class=\"string\">\"EraserInterface\"</span>)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"title\">implements</span> <span class=\"title\">StudentInterface</span> </span>&#123;</div><div class=\"line\">    notebook: NotebookInterface;</div><div class=\"line\">    pencil: PencilInterface;</div><div class=\"line\">    eraser: EraserInterface;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(notebook: NotebookInterface, pencil: PencilInterface, eraser: EraserInterface) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.notebook = notebook;</div><div class=\"line\">        <span class=\"keyword\">this</span>.pencil = pencil;</div><div class=\"line\">        <span class=\"keyword\">this</span>.eraser = eraser;</div><div class=\"line\">    &#125;</div><div class=\"line\">    write() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'writing...'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    draw() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'drawing...'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样就行了吗？还记得上节中提到TypeScript中各种概念只是语法糖吗？不同于上一节中直接将constructor引用传递给Inject的例子，由于inversify.js是面向接口的，而诸如NotebookInterface、PencilInterface之类的接口只是由TypeScript提供的语法糖，在运行时并不存在，因此我们在装饰器中声明依赖时只能使用字符串形式而非引用形式。不过不用担心，inversify.js为我们提供了bind机制，在接口的字符串形式和具体的构造函数之间搭建了桥梁：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; TypeBinding, Kernel &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"inversify\"</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> kernel = <span class=\"keyword\">new</span> Kernel();</div><div class=\"line\">kernel.bind(<span class=\"keyword\">new</span> TypeBinding&lt;NotebookInterface&gt;(<span class=\"string\">\"NotebookInterface\"</span>, Notebook));</div><div class=\"line\">kernel.bind(<span class=\"keyword\">new</span> TypeBinding&lt;PencilInterface&gt;(<span class=\"string\">\"PencilInterface\"</span>, Pencil));</div><div class=\"line\">kernel.bind(<span class=\"keyword\">new</span> TypeBinding&lt;EraserInterface&gt;(<span class=\"string\">\"EraserInterface\"</span>, Eraser));</div><div class=\"line\">kernel.bind(<span class=\"keyword\">new</span> TypeBinding&lt;StudentInterface&gt;(<span class=\"string\">\"StudentInterface\"</span>, Student));</div></pre></td></tr></table></figure></p>\n<p>注意这步需要从inversify模块中引入TypeBinding和Kernel，并且为了保证返回值类型以及整个编译时静态类型检查能够顺利通过，泛型语法也被使用了起来。<br>说到这里，要理解new TypeBinding<notebookinterface>(“NotebookInterface”, Notebook)也就很自然了：为依赖于”NotebookInterface”字符串的类提供Notebook类的实例，返回值向上溯型到NotebookInterface。<br>完成了这些步骤，使用起来也还算顺手：</notebookinterface></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> student: StudentInterface = kernel.resolve&lt;StudentInterface&gt;(<span class=\"string\">\"StudentInterface\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(student <span class=\"keyword\">instanceof</span> Student); <span class=\"comment\">// true</span></div><div class=\"line\">student.notebook.printName(); <span class=\"comment\">// this is a notebook</span></div><div class=\"line\">student.pencil.printName(); <span class=\"comment\">// this is a pencil</span></div><div class=\"line\">student.eraser.printName(); <span class=\"comment\">// this is an eraser</span></div><div class=\"line\">student.draw(); <span class=\"comment\">// drawing</span></div><div class=\"line\">student.write(); <span class=\"comment\">// writing</span></div></pre></td></tr></table></figure>\n<p>最后，顺带提一下ECMAScript中相关提案的现状和进展。Google的AtScript团队曾经有过Annotation的提案，但是AtScript胎死腹中，这个提案自然不了了之了。目前比较有希望成为es7标准的是一个关于装饰器的提案：<a href=\"https://github.com/wycats/javascript-decorators。感兴趣的同学可以到相关的github页面跟踪了解。尽管DI只是OOP编程众多模式和特性中的一个，但却可以折射出Javascript在OOP上艰难前进的道路。但总得说来，也算得上是路途坦荡，前途光明。回到依赖注入的话题上，一边是翘首以盼的Javascript社区，一边是姗姗来迟的IoC容器，这二者最终能产生怎样的化学反应，让我们拭目以待。\" target=\"_blank\" rel=\"external\">https://github.com/wycats/javascript-decorators。感兴趣的同学可以到相关的github页面跟踪了解。尽管DI只是OOP编程众多模式和特性中的一个，但却可以折射出Javascript在OOP上艰难前进的道路。但总得说来，也算得上是路途坦荡，前途光明。回到依赖注入的话题上，一边是翘首以盼的Javascript社区，一边是姗姗来迟的IoC容器，这二者最终能产生怎样的化学反应，让我们拭目以待。</a></p>\n<blockquote>\n<p>作者：ralph_zhu</p>\n<p>时间：2016-02-23 08:00</p>\n<p>原文：<a href=\"http://www.cnblogs.com/front-end-ralph/p/5208045.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/front-end-ralph/p/5208045.html</a></p>\n</blockquote>\n","categories":[],"tags":["javascript"]},{"title":"记一次面试题目","url":"http://yoursite.com/2017/05/03/记一次面试算法题目/","content":"<p>题目：请在屏幕打印2的10000次方。</p>\n<p>解题思路：<br>1、双精度，存不下。<br>2、寻找规律与数据存储方式<br>[2],[4],[8],[16],[32],[64],[128]…<br>[2],[4],[8],[61],[23],[46],[924]…<br>会有规律如：[61]=&gt;[23]  6<em>2=12取个位进一留给1</em>2相加，得出[23]</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">var</span> arr = [<span class=\"number\">2</span>];</div><div class=\"line\">\t<span class=\"keyword\">var</span> t = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">var</span> plus = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">var</span> nextNum;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">\t\tplus = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(i &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; len; j++)&#123;</div><div class=\"line\">\t\t\tt = arr[j]*<span class=\"number\">2</span> + plus;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 判断是否需要进位</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(t &gt;= <span class=\"number\">10</span>)&#123;</div><div class=\"line\">\t\t\t\tarr[j] = t.toString().charAt(<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(!arr[j + <span class=\"number\">1</span>])&#123;</div><div class=\"line\">\t\t\t\t\tarr.push(t.toString().charAt(<span class=\"number\">0</span>))</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 记录进位数字</span></div><div class=\"line\">\t\t\t\t\tplus = <span class=\"built_in\">parseInt</span>(t.toString().charAt(<span class=\"number\">0</span>))</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tplus = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\tarr[j] = t;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> arr.reverse().join(<span class=\"string\">''</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>题目：有5个人，分50个宝石，从1号开始分，，每个人都根据自己利益来投票，每一轮投票&gt;50%才能通过，否则1号淘汰，2号继续。问1号怎么分才能对自己最有利</p>\n<p>回答： 从4、5号开始往前推导。</p>\n<p>题目：打印螺旋循环数字，输入多少打印到多少。<br>如：<br>7,8,9<br>6,1,2<br>5,4,3</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">RotateNumber</span> (<span class=\"params\">argument</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.print(<span class=\"number\">300</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">RotateNumber.prototype = &#123;</div><div class=\"line\">\t<span class=\"attr\">state</span>: <span class=\"string\">'push'</span>,</div><div class=\"line\">\t<span class=\"attr\">print</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//var n = 100;</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> arr1 = <span class=\"keyword\">this</span>.handleArr([], <span class=\"number\">1</span>,n);</div><div class=\"line\">\t\t<span class=\"comment\">// fill \" \" to print fomatter;</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> arr = <span class=\"keyword\">this</span>.handleArr(arr1, n + <span class=\"number\">1</span>, <span class=\"keyword\">this</span>.findMinLenCount(arr1) + n , <span class=\"string\">\"  \"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> str = <span class=\"string\">''</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++)&#123;</div><div class=\"line\">\t\t\tstr += arr[i].toString() + <span class=\"string\">'\\n'</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(str);</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">fillNum</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">len,num</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> arr = num.toString().split(<span class=\"string\">''</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt; len - num.toString().length; i++)&#123;</div><div class=\"line\">\t\t\tarr.unshift(<span class=\"string\">' '</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> arr.join(<span class=\"string\">''</span>);</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">findMinLenIndex</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr, preMinLenIndex</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> minLen = arr[<span class=\"number\">0</span>].length;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> minIndex = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> isAllLenEqual = <span class=\"keyword\">this</span>.isAllLenEqual(arr);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> isAsc = <span class=\"keyword\">this</span>.isArrLenAsc(arr);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(isAllLenEqual)&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 全部行数相同，返回上一次记录的最小长度所在下标</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> preMinLenIndex;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 数组没个元素长度升序</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(isAsc)&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(minLen &gt;= arr[i].length)&#123;</div><div class=\"line\">\t\t\t\t\t\tminLen = arr[i].length;</div><div class=\"line\">\t\t\t\t\t\tminIndex = i;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(minLen &gt; arr[i].length)&#123;</div><div class=\"line\">\t\t\t\t\t\tminLen = arr[i].length;</div><div class=\"line\">\t\t\t\t\t\tminIndex = i;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> minIndex;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"comment\">/*</span></div><div class=\"line\">\t* arr [] 已有数组</div><div class=\"line\">\t* s 数组开始数字</div><div class=\"line\">\t* n 数组结束数字</div><div class=\"line\">\t* fill 填充内容，默认为数字</div><div class=\"line\">\t*/</div><div class=\"line\">\thandleArr : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr, s, n, fill</span>)</span>&#123;</div><div class=\"line\">\t\tarr = arr || [];</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> tempArr;<span class=\"comment\">// new row array</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> minLenIndex = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> numLen = n.toString().length;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = s; i &lt;= n; i++)&#123;</div><div class=\"line\">\t\t\ttempArr = [];</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arr.length &lt;= <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\ttempArr.push(<span class=\"keyword\">this</span>.fillNum(numLen,i));</div><div class=\"line\">\t\t\t\tarr.push(tempArr);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 找到最小长度数组，进行插入操作</span></div><div class=\"line\">\t\t\t\tminLenIndex = <span class=\"keyword\">this</span>.findMinLenIndex(arr, minLenIndex);</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 关键判断，当最小数组的长度大于容器数组长度时，说明容器周边填充完毕，需要新增一行，并且前后插入是交替操作的</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(arr[minLenIndex].length &gt; arr.length)&#123;</div><div class=\"line\">\t\t\t\t\ttempArr.push(fill || <span class=\"keyword\">this</span>.fillNum(numLen,i));</div><div class=\"line\">\t\t\t\t\tarr[<span class=\"keyword\">this</span>.state](tempArr);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">this</span>.state = <span class=\"keyword\">this</span>.state == <span class=\"string\">'push'</span> ? <span class=\"string\">'unshift'</span> : <span class=\"string\">'push'</span>;</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t\t\tarr[minLenIndex][<span class=\"keyword\">this</span>.state](fill || <span class=\"keyword\">this</span>.fillNum(numLen,i));</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> arr;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">findMinLenCount</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> isAllLenEqual = <span class=\"keyword\">this</span>.isAllLenEqual(arr);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> minLen = <span class=\"keyword\">this</span>.getMinLen(arr);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(isAllLenEqual)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> count;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(minLen == arr[i].length)&#123;</div><div class=\"line\">\t\t\t\t\tcount++;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> count;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">isAllLenEqual</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> arr[<span class=\"number\">0</span>].length == arr[arr.length - <span class=\"number\">1</span>].length;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">getMinLen</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min(arr[<span class=\"number\">0</span>].length, arr[arr.length - <span class=\"number\">1</span>].length);</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">isArrLenAsc</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> arr[<span class=\"number\">0</span>].length &lt; arr[arr.length - <span class=\"number\">1</span>].length;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> RotateNumber()</div></pre></td></tr></table></figure>\n<p>题目证明：0.99999…. == 1</p>\n<p>分数法:<br>0.333…=1/3<br>3<em>0.333…=3</em>1/3=1<br>0.999…=1</p>\n<p>代数法:<br>c=0.999…<br>10c=9.999…<br>10c-c=9.999…-0.999…<br>9c=9<br>c=1 </p>\n<p>实解析-无穷等比数列:<br>0.999…=9<em>(1/10)+9</em>(1/10)^2+9<em>(1/10)^3+…=9</em>(1/10)/(1-1/10)=1</p>\n","categories":[],"tags":[]},{"title":"使用 Karma、Mocha、Chai 搭建支持 ES6 的测试环境","url":"http://yoursite.com/2017/04/26/测试框架Karma/","content":"<p>前端开发很多是界面开发，但我们可以将相对独立的逻辑和功能从整体业务逻辑中独立出来，这样就可以对它们做单元测试。使用 Karma 可以比较方便地搭建出测试环境。前端测试相关的还有：<code>Jasmine</code>、<code>Tape</code>、<code>Mocha</code>、<code>chai</code>、<code>Sinon</code>、<code>phantomjs</code>。</p>\n<a id=\"more\"></a>\n<p>测试框架、组件介绍</p>\n<p><strong>Karma</strong><br>Karma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。该工具可用于测试所有主流Web浏览器，也可集成到CI（Continuous integration）工具，也可和其他代码编辑器一起使用。这个测试工具的一个强大特性就是，它可以监控(Watch)文件的变化，然后自行执行，通过console.log显示测试结果。</p>\n<p><strong>mocha</strong><br>mocha是一个基于nodejs和浏览器集合的各种特性的JavaScript测试库，并且让异步测试变得简单，支持TDD(测试驱动开发)和BDD(行为驱动开发)，在测试中捕获到异常时，会给出灵活准确的报告。</p>\n<p><strong>chai</strong><br>chai是一个基于nodejs的断言库，并且完美支持各种主流的JavaScript测试框架。</p>\n<h1 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h1><p>使用 <code>Karma</code> <code>Mocha</code> <code>Chai</code> （启动器、测试框架、断言库）组合。</p>\n<p><code>npm install karma karma-mocha karma-chai --save-dev</code></p>\n<p>如果 npm 版本 &gt;=3.0，会看到如下提示：</p>\n<blockquote>\n<p>UNMET PEER DEPENDENCY chai@<em><br>karma@1.2.0<br>karma-chai@0.1.0<br>karma-mocha@1.1.1<br>UNMET PEER DEPENDENCY mocha@</em></p>\n</blockquote>\n<p>这是因为 npm 已经不再自动安装 peerDependencies：</p>\n<p><a href=\"http://blog.npmjs.org/post/110924823920/npm-weekly-5\" target=\"_blank\" rel=\"external\">We will also be changing the behavior of peerDependencies in npm@3. We won’t be automatically downloading the peer dependency anymore. Instead, we’ll warn you if the peer dependency isn’t already installed. This requires you to resolve peerDependency conflicts yourself, manually, but in the long run this should make it less likely that you’ll end up in a tricky spot with your packages’ dependencies.</a></p>\n<p>于是继续安装 <code>mocha</code> <code>chai</code><br><code>npm install mocha chai --save-dev</code></p>\n<h2 id=\"初始化-Karma\"><a href=\"#初始化-Karma\" class=\"headerlink\" title=\"初始化 Karma\"></a>初始化 Karma</h2><p><code>karma init</code><br>然后回答一系列问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">Which testing framework do you want to use ? Press tab to list possible options. Enter to move to the next question.</div><div class=\"line\">&gt; mocha</div><div class=\"line\"></div><div class=\"line\">Do you want to use Require.js ? This will add Require.js plugin. Press tab to list possible options. Enter to move to the next question.</div><div class=\"line\">&gt; no</div><div class=\"line\"></div><div class=\"line\">Do you want to capture any browsers automatically ? Press tab to list possible options. Enter empty string to move to the next question.</div><div class=\"line\">&gt; Chrome</div><div class=\"line\"></div><div class=\"line\">What is the location of your source and test files ? You can use glob patterns, eg. &quot;js/*.js&quot; or &quot;test/**/*Spec.js&quot;. Enter empty string to move to the next question. &gt; &quot;test/**/*.spec.js&quot; 01 09 2016 16:43:20.743:WARN [init]: There is no file matching this pattern.</div><div class=\"line\"></div><div class=\"line\">&gt;</div><div class=\"line\"></div><div class=\"line\">Should any of the files included by the previous patterns be excluded ? You can use glob patterns, eg. &quot;**/*.swp&quot;. Enter empty string to move to the next question.</div><div class=\"line\">&gt;</div><div class=\"line\"></div><div class=\"line\">Do you want Karma to watch all the files and run the tests on change ? Press tab to list possible options.</div><div class=\"line\">&gt; yes</div></pre></td></tr></table></figure></p>\n<p>然后就可以看到 <code>Karma</code> 已经创建的配置文件 <code>karma.conf.js</code>。如果选择使用 <code>PhantomJS</code>，需要单独安装。</p>\n<p><code>npm install phantomjs --save-dev</code>  并且karma配置中添加 <code>browsers: [&#39;PhantomJS&#39;]</code></p>\n<h2 id=\"添加-ES6-支持\"><a href=\"#添加-ES6-支持\" class=\"headerlink\" title=\"添加 ES6 支持\"></a>添加 ES6 支持</h2><p>现在前端开发的源码一般使用了 ES6 甚至 ES7，将这个处理工作用 webpack 搞定。</p>\n<p><code>npm install karma-webpack --save-dev</code><br>既然将 ES6 的处理交给 webpack，如果之前没有安装过 babel 环境，还需要安装 <code>babel-core</code> <code>babel-preset-es2015</code> 以及 <code>babel-loader</code>。</p>\n<p>如果出现下面的 <code>TypeError</code> 错误，只要在 exclude 中加入 /node_modules/ 就好了。</p>\n<blockquote>\n<p>TypeError: ‘caller’, ‘callee’, and ‘arguments’ properties may not be accessed on strict mode functions or the arguments objects for calls to them</p>\n</blockquote>\n<p>配置文件 <code>karma.conf.js</code> 中，需要注意的还有 <code>files preprocessors</code> 以及 <code>webpack</code> 部分。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Karma configuration</span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">  config.set(&#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\"></div><div class=\"line\">    files: [</div><div class=\"line\">      <span class=\"string\">'test/**/*.spec.js'</span></div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">preprocessors</span>: &#123;</div><div class=\"line\">      <span class=\"string\">'test/**/*.spec.js'</span>: [<span class=\"string\">'webpack'</span>]</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">webpack</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">resolve</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">root</span>: __dirname + <span class=\"string\">\"/src\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">loaders</span>: [&#123;</div><div class=\"line\">          <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">          <span class=\"attr\">exclude</span>: [<span class=\"regexp\">/node_modules/</span>, __dirname + <span class=\"string\">\"xxx/xxx/lib\"</span>],</div><div class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">\"babel-loader\"</span>,</div><div class=\"line\">          <span class=\"attr\">query</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">compact</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">            <span class=\"attr\">presets</span>: [<span class=\"string\">\"es2015\"</span>],</div><div class=\"line\">            <span class=\"attr\">plugins</span>: [<span class=\"string\">\"es6-promise\"</span>]</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;]</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"启动-Karma\"><a href=\"#启动-Karma\" class=\"headerlink\" title=\"启动 Karma\"></a>启动 Karma</h2><p>编写测试用例，这里是一个使用断言库 <code>Chai</code>，并使用它的 <code>expect</code> 断言风格的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;getMoneyText&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"xxx/xxx.js\"</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;expect&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"chai\"</span>;</div><div class=\"line\"></div><div class=\"line\">describe(<span class=\"string\">\"生成价格文案\"</span>, () =&gt; &#123;</div><div class=\"line\">  it(<span class=\"string\">\"价格文案：积分\"</span>, () =&gt; &#123;</div><div class=\"line\">    expect(getMoneyText(&#123;</div><div class=\"line\">      <span class=\"attr\">payType</span>: <span class=\"number\">1</span>,</div><div class=\"line\">      <span class=\"attr\">price</span>: <span class=\"number\">100</span>,</div><div class=\"line\">      <span class=\"attr\">points</span>: <span class=\"number\">100</span>,</div><div class=\"line\">    &#125;)).to.be.equal(<span class=\"string\">\"100积分\"</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">\"价格文案：人民币\"</span>, () =&gt; &#123;</div><div class=\"line\">    expect(getMoneyText(&#123;</div><div class=\"line\">      <span class=\"attr\">payType</span>: <span class=\"number\">2</span>,</div><div class=\"line\">      <span class=\"attr\">price</span>: <span class=\"number\">100</span>,</div><div class=\"line\">      <span class=\"attr\">points</span>: <span class=\"number\">100</span>,</div><div class=\"line\">    &#125;)).to.be.equal(<span class=\"string\">\"￥100.00\"</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">\"价格文案：人民币+积分\"</span>, () =&gt; &#123;</div><div class=\"line\">    expect(getMoneyText(&#123;</div><div class=\"line\">      <span class=\"attr\">payType</span>: <span class=\"number\">3</span>,</div><div class=\"line\">      <span class=\"attr\">price</span>: <span class=\"number\">100</span>,</div><div class=\"line\">      <span class=\"attr\">points</span>: <span class=\"number\">100</span>,</div><div class=\"line\">    &#125;)).to.be.equal(<span class=\"string\">\"￥100.00+100积分\"</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">\"价格文案：人民币+积分（多份数量）\"</span>, () =&gt; &#123;</div><div class=\"line\">    expect(getMoneyText(&#123;</div><div class=\"line\">      <span class=\"attr\">payType</span>: <span class=\"number\">3</span>,</div><div class=\"line\">      <span class=\"attr\">number</span>: <span class=\"number\">5</span>,</div><div class=\"line\">      <span class=\"attr\">price</span>: <span class=\"number\">100</span>,</div><div class=\"line\">      <span class=\"attr\">points</span>: <span class=\"number\">100</span>,</div><div class=\"line\">    &#125;)).to.be.equal(<span class=\"string\">\"￥500.00+500积分\"</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>启动 <code>Karma</code></p>\n<p><code>karma start</code><br>关于 Mocha （Chai, expect）的入门教程可以参考：<a href=\"http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html\" target=\"_blank\" rel=\"external\">测试框架 Mocha 实例教程</a></p>\n<blockquote>\n<p>参考 <a href=\"http://www.ituring.com.cn/article/264451?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">使用 Karma、Mocha、Chai 搭建支持 ES6 的测试环境</a></p>\n</blockquote>\n","categories":[],"tags":["测试"]},{"title":"常用的javascript设计模式","url":"http://yoursite.com/2017/04/20/常用的javascript设计模式/","content":"<blockquote>\n<p>转载自AlloyTeam：<a href=\"http://www.alloyteam.com/2012/10/common-javascript-design-patterns/\" target=\"_blank\" rel=\"external\">http://www.alloyteam.com/2012/10/common-javascript-design-patterns/</a></p>\n</blockquote>\n<p>收集相关：<br><a href=\"https://addyosmani.com/resources/essentialjsdesignpatterns/book/#constructorpatternjavascript\" target=\"_blank\" rel=\"external\">Learning JavaScript Design Patterns</a></p>\n<a id=\"more\"></a>\n<p>《<a href=\"http://www.amazon.cn/gp/product/B005V9BBDK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B005V9BBDK&amp;linkCode=as2&amp;tag=vastwork-23\" target=\"_blank\" rel=\"external\">Practical Common Lisp</a>》的作者 Peter Seibel 曾说，如果你需要一种模式，那一定是哪里出了问题。他所说的问题是指因为语言的天生缺陷，不得不去寻求和总结一种通用的解决方案。</p>\n<p>不管是弱类型或强类型，静态或动态语言，命令式或说明式语言、每种语言都有天生的优缺点。一个牙买加运动员， 在短跑甚至拳击方面有一些优势，在练瑜伽上就欠缺一些。</p>\n<p>术士和暗影牧师很容易成为一个出色的辅助，而一个背着梅肯满地图飞的敌法就会略显尴尬。 换到程序中, 静态语言里可能需要花很多功夫来实现装饰者，而js由于能随时往对象上面扔方法，以至于装饰者模式在js里成了鸡肋。</p>\n<p>讲 Javascript 设计模式的书还比较少，《<a href=\"http://www.amazon.cn/gp/product/159059908X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=159059908X&amp;linkCode=as2&amp;tag=vastwork-23\" target=\"_blank\" rel=\"external\">Pro javaScript Design Patterns</a>》是比较经典的一本，但是它里面的例子举得比较啰嗦，所以结合我在工作中写过的代码，把我的理解总结一下。如果我的理解出现了偏差，请不吝指正。</p>\n<h1 id=\"一-单例模式\"><a href=\"#一-单例模式\" class=\"headerlink\" title=\"一 单例模式\"></a>一 单例模式</h1><p>单例模式的定义是产生一个类的唯一实例，但js本身是一种“无类”语言。很多讲js设计模式的文章把{}当成一个单例来使用也勉强说得通。因为js生成对象的方式有很多种，我们来看下另一种更有意义的单例。</p>\n<p>有这样一个常见的需求，点击某个按钮的时候需要在页面弹出一个遮罩层。比如web.qq.com点击登录的时候.</p>\n<p><img src=\"./image-11.jpg\" alt=\"\"></p>\n<p>这个生成灰色背景遮罩层的代码是很好写的.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> createMask = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> </div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>,body.appendChild(  <span class=\"built_in\">document</span>.createElement(div)  );</div><div class=\"line\"> </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$( <span class=\"string\">'button'</span> ).click( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> </div><div class=\"line\">   Var mask  = createMask();</div><div class=\"line\"> </div><div class=\"line\">   mask.show();</div><div class=\"line\"> </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>问题是, 这个遮罩层是全局唯一的, 那么每次调用createMask都会创建一个新的div, 虽然可以在隐藏遮罩层的把它remove掉. 但显然这样做不合理.</p>\n<p>再看下第二种方案, 在页面的一开始就创建好这个div. 然后用一个变量引用它.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var mask = document.body.appendChild( document.createElement( ''div' ) );</div><div class=\"line\"> </div><div class=\"line\">$( ''button' ).click( function()&#123;</div><div class=\"line\"> </div><div class=\"line\">   mask.show();</div><div class=\"line\"> </div><div class=\"line\">&#125; )</div></pre></td></tr></table></figure>\n<p>这样确实在页面只会创建一个遮罩层div, 但是另外一个问题随之而来, 也许我们永远都不需要这个遮罩层, 那又浪费掉一个div, 对dom节点的任何操作都应该非常吝啬.</p>\n<p>如果可以借助一个变量. 来判断是否已经创建过div呢?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mask;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> createMask = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"keyword\">if</span> ( mask ) <span class=\"keyword\">return</span> mask;</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t </div><div class=\"line\">\t\tmask = <span class=\"built_in\">document</span>,body.appendChild(  <span class=\"built_in\">document</span>.createElement(div)  );</div><div class=\"line\">\t </div><div class=\"line\">\t\t<span class=\"keyword\">return</span> mask;</div><div class=\"line\">\t </div><div class=\"line\">\t&#125;</div><div class=\"line\"> </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>看起来不错, 到这里的确完成了一个产生单列对象的函数. 我们再仔细看这段代码有什么不妥.</p>\n<p>首先这个函数是存在一定副作用的, 函数体内改变了外界变量mask的引用, 在多人协作的项目中, createMask是个不安全的函数. 另一方面, mask这个全局变量并不是非需不可. 再来改进一下.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> createMask = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> mask;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> mask || ( mask = <span class=\"built_in\">document</span>.body.appendChild( <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>) ) )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>\n<p>用了个简单的闭包把变量mask包起来, 至少对于createMask函数来讲, 它是封闭的.</p>\n<p>可能看到这里, 会觉得单例模式也太简单了. 的确一些设计模式都是非常简单的, 即使从没关注过设计模式的概念, 在平时的代码中也不知不觉用到了一些设计模式. 就像多年前我明白老汉推车是什么回事的时候也想过尼玛原来这就是老汉推车.</p>\n<p>GOF里的23种设计模式, 也是在软件开发中早就存在并反复使用的模式. 如果程序员没有明确意识到他使用过某些模式, 那么下次他也许会错过更合适的设计 (这段话来自《松本行弘的程序世界》).</p>\n<p>再回来正题, 前面那个单例还是有缺点. 它只能用于创建遮罩层. 假如我又需要写一个函数, 用来创建一个唯一的xhr对象呢? 能不能找到一个通用的singleton包装器.</p>\n<p>js中函数是第一型, 意味着函数也可以当参数传递. 看看最终的代码.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> singleton = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> fn </span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> result || ( result = fn .apply( <span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span> ) );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> createMask = singleton( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.body.appendChild( <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>) );</div><div class=\"line\"> </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>用一个变量来保存第一次的返回值, 如果它已经被赋值过, 那么在以后的调用中优先返回该变量. 而真正创建遮罩层的代码是通过回调函数的方式传人到singleton包装器中的. 这种方式其实叫桥接模式. 关于桥接模式, 放在后面一点点来说.</p>\n<p>然而singleton函数也不是完美的, 它始终还是需要一个变量result来寄存div的引用. 遗憾的是js的函数式特性还不足以完全的消除声明和语句.</p>\n<h1 id=\"二-简单工厂模式\"><a href=\"#二-简单工厂模式\" class=\"headerlink\" title=\"二 简单工厂模式\"></a>二 简单工厂模式</h1><p>简单工厂模式是由一个方法来决定到底要创建哪个类的实例, 而这些实例经常都拥有相同的接口. 这种模式主要用在所实例化的类型在编译期并不能确定， 而是在执行期决定的情况。 说的通俗点，就像公司茶水间的饮料机，要咖啡还是牛奶取决于你按哪个按钮。</p>\n<p>简单工厂模式在创建ajax对象的时候也非常有用.</p>\n<p>之前我写了一个处理ajax异步嵌套的库，地址在<a href=\"https://github.com/AlloyTeam/DanceRequest\" target=\"_blank\" rel=\"external\">https://github.com/AlloyTeam/DanceRequest</a>.</p>\n<p>这个库里提供了几种ajax请求的方式，包括xhr对象的get, post, 也包括跨域用的jsonp和iframe. 为了方便使用, 这几种方式都抽象到了同一个接口里面.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var request1 = Request('cgi.xx.com/xxx' , ''get' );</div><div class=\"line\"> </div><div class=\"line\">request1.start();</div><div class=\"line\"> </div><div class=\"line\">request1.done( fn );</div><div class=\"line\"> </div><div class=\"line\">var request2 = Request('cgi.xx.com/xxx' , ''jsonp' );</div><div class=\"line\"> </div><div class=\"line\">request2.start();</div><div class=\"line\"> </div><div class=\"line\">request2.done( fn );</div></pre></td></tr></table></figure>\n<p>Request实际上就是一个工厂方法, 至于到底是产生xhr的实例, 还是jsonp的实例. 是由后来的代码决定的。</p>\n<p>实际上在js里面，所谓的构造函数也是一个简单工厂。只是批了一件new的衣服. 我们扒掉这件衣服看看里面。</p>\n<p>通过这段代码, 在firefox, chrome等浏览器里，可以完美模拟new.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"> name </span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ObjectFactory</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">var</span> obj = &#123;&#125;,</div><div class=\"line\"></div><div class=\"line\">                     Constructor = <span class=\"built_in\">Array</span>.prototype.shift.call( <span class=\"built_in\">arguments</span> );</div><div class=\"line\"></div><div class=\"line\">obj.__proto__ =  <span class=\"keyword\">typeof</span> Constructor .prototype === <span class=\"string\">'number'</span>  ? <span class=\"built_in\">Object</span>.prototype</div><div class=\"line\"></div><div class=\"line\">:  Constructor .prototype;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">var</span> ret = Constructor.apply( obj, <span class=\"built_in\">arguments</span> );</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> ret === <span class=\"string\">'object'</span> ? ret : obj;</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">var</span> a = ObjectFactory( A, <span class=\"string\">'svenzeng'</span> );</div><div class=\"line\"></div><div class=\"line\">       alert ( a.name );  <span class=\"comment\">//svenzeng</span></div></pre></td></tr></table></figure>\n<p>这段代码来自es5的new和构造器的相关说明， 可以看到，所谓的new， 本身只是一个对象的复制和改写过程， 而具体会生成什么是由调用ObjectFactory时传进去的参数所决定的。</p>\n<h1 id=\"三-观察者模式\"><a href=\"#三-观察者模式\" class=\"headerlink\" title=\"三 观察者模式\"></a>三 观察者模式</h1><p>观察者模式( 又叫发布者-订阅者模式 )应该是最常用的模式之一. 在很多语言里都得到大量应用. 包括我们平时接触的dom事件. 也是js和dom之间实现的一种观察者模式.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">div.onclick  =  function click ()&#123;</div><div class=\"line\"> </div><div class=\"line\">   alert ( ''click' )</div><div class=\"line\"> </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>只要订阅了div的click事件. 当点击div的时候, function click就会被触发.</p>\n<p>那么到底什么是观察者模式呢. 先看看生活中的观察者模式。</p>\n<p>好莱坞有句名言. “不要给我打电话， 我会给你打电话”. 这句话就解释了一个观察者模式的来龙去脉。 其中“我”是发布者， “你”是订阅者。</p>\n<p>再举个例子，我来公司面试的时候，完事之后每个面试官都会对我说：“请留下你的联系方式， 有消息我们会通知你”。 在这里“我”是订阅者， 面试官是发布者。所以我不用每天或者每小时都去询问面试结果， 通讯的主动权掌握在了面试官手上。而我只需要提供一个联系方式。</p>\n<p>观察者模式可以很好的实现2个模块之间的解耦。 假如我正在一个团队里开发一个html5游戏. 当游戏开始的时候，需要加载一些图片素材。加载好这些图片之后开始才执行游戏逻辑. 假设这是一个需要多人合作的项目. 我完成了Gamer和Map模块, 而我的同事A写了一个图片加载器loadImage.</p>\n<p>loadImage的代码如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">loadImage(  imgAry,  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"built_in\">Map</span>.init();</div><div class=\"line\">\t </div><div class=\"line\">\tGamer.init();</div><div class=\"line\"> </div><div class=\"line\">&#125; )</div></pre></td></tr></table></figure>\n<p>当图片加载好之后, 再渲染地图, 执行游戏逻辑. 嗯, 这个程序运行良好. 突然有一天, 我想起应该给游戏加上声音功能. 我应该让图片加载器添上一行代码.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">loadImage(  imgAry,  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"built_in\">Map</span>.init();</div><div class=\"line\">\t </div><div class=\"line\">\tGamer.init();</div><div class=\"line\"> \t</div><div class=\"line\"> \tSount.init();</div><div class=\"line\">&#125; )</div></pre></td></tr></table></figure>\n<p>可是写这个模块的同事A去了外地旅游. 于是我打电话给他, 喂. 你的loadImage函数在哪, 我能不能改一下, 改了之后有没有副作用. 如你所想, 各种不淡定的事发生了. 如果当初我们能这样写呢:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">loadImage.listen( <span class=\"string\">'ready'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"built_in\">Map</span>.init();</div><div class=\"line\"> </div><div class=\"line\">&#125;)</div><div class=\"line\"> </div><div class=\"line\">loadImage.listen( <span class=\"string\">'ready'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> </div><div class=\"line\">   Gamer.init();</div><div class=\"line\"> </div><div class=\"line\">&#125;)</div><div class=\"line\"> </div><div class=\"line\">loadImage.listen( <span class=\"string\">'ready'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> </div><div class=\"line\">   Sount.init();</div><div class=\"line\"> </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>loadImage完成之后, 它根本不关心将来会发生什么, 因为它的工作已经完成了. 接下来它只要发布一个信号.</p>\n<p>loadImage.trigger( ‘ready’ );</p>\n<p>那么监听了loadImage的’ready’事件的对象都会收到通知. 就像上个面试的例子. 面试官根本不关心面试者们收到面试结果后会去哪吃饭. 他只负责把面试者的简历搜集到一起. 当面试结果出来时照着简历上的电话挨个通知.</p>\n<p>说了这么多概念, 来一个具体的实现. 实现过程其实很简单. 面试者把简历扔到一个盒子里， 然后面试官在合适的时机拿着盒子里的简历挨个打电话通知结果.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\">Events = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">           <span class=\"keyword\">var</span> listen, log, obj, one, remove, trigger, __this;</div><div class=\"line\"> </div><div class=\"line\">           obj = &#123;&#125;;</div><div class=\"line\"> </div><div class=\"line\">           __this = <span class=\"keyword\">this</span>;</div><div class=\"line\"> </div><div class=\"line\">           listen = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> key, eventfn </span>) </span>&#123;  <span class=\"comment\">//把简历扔盒子, key就是联系方式.</span></div><div class=\"line\"> </div><div class=\"line\">             <span class=\"keyword\">var</span> stack, _ref;  <span class=\"comment\">//stack是盒子</span></div><div class=\"line\"> </div><div class=\"line\">             stack = ( _ref = obj[key] ) != <span class=\"literal\">null</span> ? _ref : obj[ key ] = [];</div><div class=\"line\"> </div><div class=\"line\">             <span class=\"keyword\">return</span> stack.push( eventfn );</div><div class=\"line\"> </div><div class=\"line\">           &#125;;</div><div class=\"line\"> </div><div class=\"line\">           one = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> key, eventfn </span>) </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">             remove( key );</div><div class=\"line\"> </div><div class=\"line\">             <span class=\"keyword\">return</span> listen( key, eventfn );</div><div class=\"line\"> </div><div class=\"line\">           &#125;;</div><div class=\"line\"> </div><div class=\"line\">           remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> key </span>) </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">             <span class=\"keyword\">var</span> _ref;</div><div class=\"line\"> </div><div class=\"line\">             <span class=\"keyword\">return</span> ( _ref = obj[key] ) != <span class=\"literal\">null</span> ? _ref.length = <span class=\"number\">0</span> : <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</div><div class=\"line\"> </div><div class=\"line\">           &#125;;</div><div class=\"line\"> </div><div class=\"line\">           trigger = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">//面试官打电话通知面试者</span></div><div class=\"line\"> </div><div class=\"line\">             <span class=\"keyword\">var</span> fn, stack, _i, _len, _ref, key;</div><div class=\"line\"> </div><div class=\"line\">             key = <span class=\"built_in\">Array</span>.prototype.shift.call( <span class=\"built_in\">arguments</span> ); </div><div class=\"line\"> </div><div class=\"line\">             stack = ( _ref = obj[ key ] ) != <span class=\"literal\">null</span> ? _ref : obj[ key ] = [];</div><div class=\"line\"> </div><div class=\"line\">             <span class=\"keyword\">for</span> ( _i = <span class=\"number\">0</span>, _len = stack.length; _i &lt; _len; _i++ ) &#123;</div><div class=\"line\"> </div><div class=\"line\">               fn = stack[ _i ];</div><div class=\"line\"> </div><div class=\"line\">               <span class=\"keyword\">if</span> ( fn.apply( __this,  <span class=\"built_in\">arguments</span> ) === <span class=\"literal\">false</span>) &#123;</div><div class=\"line\"> </div><div class=\"line\">                 <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\"> </div><div class=\"line\">               &#125;</div><div class=\"line\"> </div><div class=\"line\">             &#125;</div><div class=\"line\"> </div><div class=\"line\">             <span class=\"keyword\">return</span> &#123;</div><div class=\"line\"> </div><div class=\"line\">                <span class=\"attr\">listen</span>: listen,</div><div class=\"line\"> </div><div class=\"line\">                <span class=\"attr\">one</span>: one,</div><div class=\"line\"> </div><div class=\"line\">                <span class=\"attr\">remove</span>: remove,</div><div class=\"line\"> </div><div class=\"line\">                <span class=\"attr\">trigger</span>: trigger</div><div class=\"line\"> </div><div class=\"line\">             &#125;</div><div class=\"line\"> </div><div class=\"line\">           &#125;</div></pre></td></tr></table></figure>\n<p>最后用观察者模式来做一个成人电视台的小应用.<br>//订阅者</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> adultTv = Event();</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">adultTv .listen(  <span class=\"string\">'play'</span>,  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> data </span>)</span>&#123;</div><div class=\"line\"> </div><div class=\"line\">   alert ( <span class=\"string\">\"今天是谁的电影\"</span> + data.name );</div><div class=\"line\"> </div><div class=\"line\">&#125;);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//发布者</span></div><div class=\"line\"> </div><div class=\"line\">adultTv .trigger(  <span class=\"string\">'play'</span>,  &#123; <span class=\"string\">'name'</span>: <span class=\"string\">'麻生希'</span> &#125;  )</div></pre></td></tr></table></figure>\n<h1 id=\"四-适配器模式\"><a href=\"#四-适配器模式\" class=\"headerlink\" title=\"四 适配器模式\"></a>四 适配器模式</h1><p>去年年前当时正在开发dev.qplus.com, 有个存储应用分类id的js文件, 分类id的结构最开始设计的比较笨重. 于是我决定重构它. 我把它定义成一个json树的形式, 大概是这样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> category = &#123;</div><div class=\"line\">\t<span class=\"attr\">music</span>: &#123;</div><div class=\"line\">\t\t<span class=\"attr\">id</span>: <span class=\"number\">1</span>,</div><div class=\"line\">\t\t<span class=\"attr\">children</span>: [ , , , , ]</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>dev.qplus.com里大概有4，5个页面都调用这个category对象. 春节前我休了1个星期假. 过年来之后发现邮箱里有封邮件, 设计数据库的同学把category..js也重构了一份, 并且其他几个项目里都是用了这份category.js, 我拿过来一看就傻眼了, 和我之前定的数据结构完全不一样.</p>\n<p>当然这是一个沟通上的反面例子. 但接下来的重点是我已经在N个文件里用到了之前我定的category.js. 而且惹上了一些复杂的相关逻辑. 怎么改掉我之前的代码呢. 全部重写肯定是不愿意. 所以现在适配器就派上用场了.</p>\n<p>只需要把同事的category用一个函数转成跟我之前定义的一样.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">my.category = adapterCategory ( afu.category );</div></pre></td></tr></table></figure>\n<p>适配器模式的作用很像一个转接口. 本来iphone的充电器是不能直接插在电脑机箱上的, 而通过一个usb转接口就可以了.</p>\n<p>所以, 在程序里适配器模式也经常用来适配2个接口, 比如你现在正在用一个自定义的js库. 里面有个根据id获取节点的方法$id(). 有天你觉得jquery里的$实现得更酷, 但你又不想让你的工程师去学习新的库和语法. 那一个适配器就能让你完成这件事情.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$id = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> id </span>)</span>&#123;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">return</span> jQuery( <span class=\"string\">'#'</span> + id )[<span class=\"number\">0</span>];</div><div class=\"line\"> </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"五-代理模式\"><a href=\"#五-代理模式\" class=\"headerlink\" title=\"五 代理模式\"></a>五 代理模式</h1><p>代理模式的定义是把对一个对象的访问, 交给另一个代理对象来操作.</p>\n<p>举一个例子, 我在追一个MM想给她送一束花，但是我因为我性格比较腼腆，所以我托付了MM的一个好朋友来送。</p>\n<p>这个例子不是非常好， 至少我们没看出代理模式有什么大的用处，因为追MM更好的方式是送一台宝马。</p>\n<p>再举个例子，假如我每天都得写工作日报( 其实没有这么惨 ). 我的日报最后会让总监审阅. 如果我们都直接把日报发给 总监 , 那可能 总监 就没法工作了. 所以通常的做法是把日报发给我的组长 ， 组长把所有组员一周的日报都汇总后再发给总监 .</p>\n<p>实际的编程中， 这种因为性能问题使用代理模式的机会是非常多的。比如频繁的访问dom节点, 频繁的请求远程资源. 可以把操作先存到一个缓冲区, 然后自己选择真正的触发时机.</p>\n<p>再来个详细的例子，之前我写了一个街头霸王的游戏, 地址在<a href=\"http://alloyteam.github.com/StreetFighter/\" target=\"_blank\" rel=\"external\">http://alloyteam.github.com/StreetFighter/</a><br><img src=\"http://jbcdn2.b0.upaiyun.com/2012/10/image-2.jpg\" alt=\"\"><br>游戏中隆需要接受键盘的事件, 来完成相应动作.</p>\n<p>于是我写了一个keyManage类. 其中在游戏主线程里监听keyManage的变化.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> keyMgr = keyManage();</div><div class=\"line\"> </div><div class=\"line\">keyMgr.listen( <span class=\"string\">'change'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> keyCode </span>)</span>&#123;</div><div class=\"line\"> </div><div class=\"line\">   <span class=\"built_in\">console</span>.log( keyCode );</div><div class=\"line\"> </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>图片里面隆正在放升龙拳, 升龙拳的操作是前下前+拳. 但是这个keyManage类只要发生键盘事件就会触发之前监听的change函数. 这意味着永远只能取得前，后，前，拳这样单独的按键事件，而无法得到一个按键组合。</p>\n<p>好吧，我决定改写我的keyManage类, 让它也支持传递按键组合. 但是如果我以后写个html5版双截龙，意味着我每次都得改写keyManage. 我总是觉得, 这种函数应该可以抽象成一个更底层的方法, 让任何游戏都可以用上它.</p>\n<p>所以最后的keyManage只负责映射键盘事件. 而隆接受到的动作是通过一个代理对象处理之后的.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> request = Ajax.get( <span class=\"string\">'cgi.xx.com/xxx'</span> );</div><div class=\"line\"> </div><div class=\"line\">request.send();</div><div class=\"line\"> </div><div class=\"line\">request.done(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"六-桥接模式\"><a href=\"#六-桥接模式\" class=\"headerlink\" title=\"六 桥接模式\"></a>六 桥接模式</h1><p>桥接模式的作用在于<strong>将实现部分和抽象部分分离开来</strong>， 以便两者可以独立的变化。在实现api的时候， 桥接模式特别有用。比如最开始的singleton的例子.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> singleton = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> fn </span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> result || ( result = fn .apply( <span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span> ) );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> createMask = singleton( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.body.appendChild( <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>) );</div><div class=\"line\"> </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>singleton是抽象部分， 而createMask是实现部分。 他们完全可以独自变化互不影响。 如果需要再写一个单例的createScript就一点也不费力.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> createScript = singleton( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.body.appendChild( <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>) );</div><div class=\"line\"> </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>另外一个常见的例子就是forEach函数的实现, 用来迭代一个数组.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">forEach = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> ary, fn </span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = ary.length; i &lt; l; i++ )&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> c = ary[ i ];</div><div class=\"line\">    <span class=\"keyword\">if</span> ( fn.call( c, i, c ) === <span class=\"literal\">false</span> )&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看到, forEach函数并不关心fn里面的具体实现. fn里面的逻辑也不会被forEach函数的改写影响.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">forEach( [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> i, n </span>)</span>&#123;</div><div class=\"line\"> </div><div class=\"line\"> alert ( n*<span class=\"number\">2</span> )</div><div class=\"line\"> </div><div class=\"line\">&#125; )</div><div class=\"line\"> </div><div class=\"line\">forEach( [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> i, n </span>)</span>&#123;</div><div class=\"line\"> </div><div class=\"line\">  alert ( n*<span class=\"number\">3</span> )</div><div class=\"line\"> </div><div class=\"line\">&#125; )</div></pre></td></tr></table></figure>\n<h1 id=\"七-外观模式\"><a href=\"#七-外观模式\" class=\"headerlink\" title=\"七 外观模式\"></a>七 外观模式</h1><p>外观模式(门面模式)，是一种相对简单而又无处不在的模式。外观模式提供一个高层接口，这个接口使得客户端或子系统更加方便调用。<br>用一段再简单不过的代码来表示</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var getName = function()&#123;</div><div class=\"line\">  return ''svenzeng\"</div><div class=\"line\">&#125;</div><div class=\"line\">var getSex = function()&#123;</div><div class=\"line\">   return 'man'</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果你需要分别调用getName和getSex函数. 那可以用一个更高层的接口getUserInfo来调用.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> getUserInfo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> info = a() + b();</div><div class=\"line\">  <span class=\"keyword\">return</span> info;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>也许你会问为什么一开始不把getName和getSex的代码写到一起, 比如这样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> getNameAndSex = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'svenzeng'</span> + <span class=\"string\">'man'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>答案是显而易见的，饭堂的炒菜师傅不会因为你预定了一份烧鸭和一份白菜就把这两样菜炒在一个锅里。他更愿意给你提供一个烧鸭饭套餐。同样在程序设计中，我们需要保证函数或者对象尽可能的处在一个合理粒度，毕竟不是每个人喜欢吃烧鸭的同时又刚好喜欢吃白菜。<br>外观模式还有一个好处是可以对用户隐藏真正的实现细节，用户只关心最高层的接口。比如在烧鸭饭套餐的故事中，你并不关心师傅是先做烧鸭还是先炒白菜，你也不关心那只鸭子是在哪里成长的。</p>\n<p>最后写个我们都用过的外观模式例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> stopEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> e </span>)</span>&#123;   <span class=\"comment\">//同时阻止事件默认行为和冒泡</span></div><div class=\"line\">  e.stopPropagation();</div><div class=\"line\">  e.preventDefault();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"八-访问者模式\"><a href=\"#八-访问者模式\" class=\"headerlink\" title=\"八 访问者模式\"></a>八 访问者模式</h1><p>GOF官方定义： 访问者模式是表示一个作用于某个对象结构中的各元素的操作。它使可以在不改变各元素的类的前提下定义作用于这些元素的新操作。我们在使用一些操作对不同的对象进行处理时，往往会根据不同的对象选择不同的处理方法和过程。在实际的代码过程中，我们可以发现，如果让所有的操作分散到各个对象中，整个系统会变得难以维护和修改。且增加新的操作通常都要重新编译所有的类。因此，为了解决这个问题，我们可以将每一个类中的相关操作提取出来，包装成一个独立的对象，这个对象我们就称为访问者（Visitor）。利用访问者，对访问的元素进行某些操作时，只需将此对象作为参数传递给当前访问者，然后，访问者会依据被访问者的具体信息，进行相关的操作。</p>\n<p>据统计，上面这段话只有5%的人会看到最后一句。那么通俗点讲，访问者模式先把一些可复用的行为抽象到一个函数(对象)里，这个函数我们就称为访问者（Visitor）。如果另外一些对象要调用这个函数，只需要把那些对象当作参数传给这个函数，在js里我们经常通过call或者apply的方式传递this对象给一个Visitor函数.<br>访问者模式也被称为GOF总结的23种设计模式中最难理解的一种。不过这有很大一部分原因是因为《设计模式》基于C++和Smalltalk写成. 在强类型语言中需要通过多次重载来实现访问者的接口匹配。</p>\n<p>而在js这种基于鸭子类型的语言中，访问者模式几乎是原生的实现, 所以我们可以利用apply和call毫不费力的使用访问者模式，这一小节更关心的是这种模式的思想以及在js引擎中的实现。</p>\n<p>我们先来了解一下什么是鸭子类型，说个故事：<br>很久以前有个皇帝喜欢听鸭子呱呱叫，于是他召集大臣组建一个一千只鸭子的合唱团。大臣把全国的鸭子都抓来了，最后始终还差一只。有天终于来了一只自告奋勇的鸡，这只鸡说它也会呱呱叫，好吧在这个故事的设定里，它确实会呱呱叫。 后来故事的发展很明显，这只鸡混到了鸭子的合唱团中。— 皇帝只是想听呱呱叫，他才不在乎你是鸭子还是鸡呢。</p>\n<p>这个就是鸭子类型的概念，在js这种弱类型语言里，很多方法里都不做对象的类型检测，而是只关心这些对象能做什么。<br>Array构造器和String构造器的prototype上的方法就被特意设计成了访问者。这些方法不对this的数据类型做任何校验。这也就是为什么arguments能冒充array调用push方法.</p>\n<p>看下v8引擎里面Array.prototype.push的代码:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ArrayPush</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">\t<span class=\"keyword\">var</span> n = TO_UINT32( <span class=\"keyword\">this</span>.length );</div><div class=\"line\">\t<span class=\"keyword\">var</span> m = %_ArgumentsLength();    </div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;    </div><div class=\"line\">\t\t<span class=\"keyword\">this</span>[i+n] = %_Arguments(i);    <span class=\"comment\">//属性拷贝  </span></div><div class=\"line\">\t&#125;  </div><div class=\"line\">\t<span class=\"keyword\">this</span>.length = n + m;             <span class=\"comment\">//修正length  </span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，ArrayPush方法没有对this的类型做任何显示的限制，所以理论上任何对象都可以被传入ArrayPush这个访问者。</p>\n<p>不过在代码的执行期，还是会受到一些隐式限制，在上面的例子很容易看出要求:<br>1、 this对象上面可储存属性. //反例: 值类型的数据<br>2、 this的length属性可写. //反例: functon对象, function有一个只读的length属性, 表示形参个数.</p>\n<p>如果不符合这2条规则的话，代码在执行期会报错. 也就是说, Array.prototype.push.call( 1, ‘first’ )和Array.prototoype.push.call( function(){}, ‘first’ )都达不到预期的效果.</p>\n<p>利用访问者，我们来做个有趣的事情. 给一个object对象增加push方法.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Visitor = &#123;&#125;</div><div class=\"line\">Visitor .push  =  function()&#123;</div><div class=\"line\">    return Array.prototype.push.apply( this, arguments );</div><div class=\"line\">&#125;</div><div class=\"line\">var obj = &#123;&#125;;</div><div class=\"line\">obj.push = Visitor .push;</div><div class=\"line\">obj.push( '\"first\" );</div><div class=\"line\">alert ( obj[0] )  //\"first\"</div><div class=\"line\">alert ( obj.length );  //1</div></pre></td></tr></table></figure>\n<h1 id=\"九-策略模式\"><a href=\"#九-策略模式\" class=\"headerlink\" title=\"九 策略模式\"></a>九 策略模式</h1><p>策略模式的意义是定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。<br>一个小例子就能让我们一目了然。<br>回忆下jquery里的animate方法.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$( div ).animate( &#123;<span class=\"string\">\"left: 200px\"</span>&#125;, <span class=\"number\">1000</span>, <span class=\"string\">'linear'</span> );  <span class=\"comment\">//匀速运动</span></div><div class=\"line\">$( div ).animate( &#123;<span class=\"string\">\"left: 200px\"</span>&#125;, <span class=\"number\">1000</span>, <span class=\"string\">'cubic'</span> );  <span class=\"comment\">//三次方的缓动</span></div></pre></td></tr></table></figure></p>\n<p>这2句代码都是让div在1000ms内往右移动200个像素. linear(匀速)和cubic(三次方缓动)就是一种策略模式的封装.<br>再来一个例子. 上半年我写的dev.qplus.com, 很多页面都会有个即时验证的表单. 表单的每个成员都会有一些不同的验证规则.</p>\n<p>比如姓名框里面， 需要验证非空，敏感词，字符过长这几种情况。 当然是可以写3个if else来解决，不过这样写代码的扩展性和维护性可想而知。如果表单里面的元素多一点，需要校验的情况多一点，加起来写上百个if else也不是没有可能。<br>所以更好的做法是把每种验证规则都用策略模式单独的封装起来。需要哪种验证的时候只需要提供这个策略的名字。就像这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">nameInput.addValidata(&#123;</div><div class=\"line\">   <span class=\"attr\">notNull</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">   <span class=\"attr\">dirtyWords</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">   <span class=\"attr\">maxLength</span>: <span class=\"number\">30</span></div><div class=\"line\">&#125;)</div><div class=\"line\">而notNull，maxLength等方法只需要统一的返回<span class=\"literal\">true</span>或者<span class=\"literal\">false</span>，来表示是否通过了验证。</div><div class=\"line\">validataList = &#123;</div><div class=\"line\">  <span class=\"attr\">notNull</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> value !== <span class=\"string\">''</span>;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">maxLength</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value, maxLen </span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> value.length() &gt; maxLen;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看到，各种验证规则很容易被修改和相互替换。如果某天产品经理建议字符过长的限制改成60个字符。那只需要0.5秒完成这次工作。</p>\n<h1 id=\"十-模版方法模式\"><a href=\"#十-模版方法模式\" class=\"headerlink\" title=\"十 模版方法模式\"></a>十 模版方法模式</h1><p>模式方法是预先定义一组算法，先把算法的不变部分抽象到父类，再将另外一些可变的步骤延迟到子类去实现。听起来有点像工厂模式( 非前面说过的简单工厂模式 ).<br>最大的区别是,工厂模式的意图是根据子类的实现最终获得一种对象. 而模版方法模式着重于父类对子类的控制.</p>\n<p>按GOF的描叙，模版方法导致一种反向的控制结构，这种结构有时被称为“好莱坞法则”，即“别找我们，我们找你”。这指的是一个父类调用一个子类的操作，而不是相反。<br>一个很常用的场景是在一个公司的项目中，经常由架构师搭好架构，声明出抽象方法。下面的程序员再去分头重写这些抽象方法。</p>\n<p>在深入了解之前，容许我先扯远一点。<br>作为一个进化论的反对者，假设这个世界是上帝用代码创造的。那么上帝创造生命的时候可能就用到了模版方法模式。看看他是怎么在生命构造器中声明模版方法的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Life = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">Life.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.DNA复制();</div><div class=\"line\">   <span class=\"keyword\">this</span>.出生();</div><div class=\"line\">   <span class=\"keyword\">this</span>.成长();</div><div class=\"line\">   <span class=\"keyword\">this</span>.衰老();</div><div class=\"line\">   <span class=\"keyword\">this</span>.死亡();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">this</span>.prototype.DNA复制 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  &amp;*$%&amp;^%^&amp;(&amp;(&amp;(&amp;&amp;(^^(*)  <span class=\"comment\">//看不懂的代码</span></div><div class=\"line\">&#125;</div><div class=\"line\">Life.prototype.出生 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">Life.prototype.成长 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">Life.prototype.衰老 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">Life.prototype.死亡 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中DNA复制是预先定义的算法中不变部分. 所有子类都不能改写它. 如果需要我们可以写成protected的类型.<br>而其他的函数在父类中会被先定义成一个空函数(钩子). 然后被子类重写，这就是模版方法中所谓的可变的步骤。<br>假设有个子类哺乳动物类继承了Life类.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Mammal = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">Mammal.prototype = Life.prototype;   <span class=\"comment\">//继承Life</span></div></pre></td></tr></table></figure>\n<p>然后重写出生和衰老这两个钩子函数.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Mammal.prototope.出生 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//胎生()</span></div><div class=\"line\">&#125;</div><div class=\"line\">Mammal.prototype.成长 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//再留给子类去实现</span></div><div class=\"line\">&#125;</div><div class=\"line\">Mammal.prototope.衰老 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//自由基的过氧化反应()</span></div><div class=\"line\">&#125;</div><div class=\"line\">Life.prototype.死亡 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> <span class=\"comment\">//再留给子类去实现</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//再实现一个Dog类</span></div><div class=\"line\"><span class=\"keyword\">var</span> = Dog = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//Dog继承自哺乳动物.</span></div><div class=\"line\">Dog.prototype = Mammal.prototype;</div><div class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> Dog();</div><div class=\"line\">dog.init();</div></pre></td></tr></table></figure>\n<p>至此，一只小狗的生命会依次经历DNA复制，出生，成长，衰老，死亡这几个过程。这些步骤早在它出生前就决定了。所幸的是，上帝没有安排好它生命的所有细节。它还是能通过对成长函数的重写，来成为一只与众不同的小狗。</p>\n<p>举个稍微现实点的例子，游戏大厅中的所有游戏都有登录，游戏中，游戏结束这几个过程，而登录和游戏结束之后弹出提示这些函数都是应该公用的。<br>那么首先需要的是一个父类。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gameCenter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">gameCenter.ptototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.login();</div><div class=\"line\">  <span class=\"keyword\">this</span>.gameStart();</div><div class=\"line\">  <span class=\"keyword\">this</span>.end();</div><div class=\"line\">&#125;</div><div class=\"line\">gameCenter.prototype.login= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"comment\">//do something</span></div><div class=\"line\">&#125;</div><div class=\"line\">gameCenter.prototype.gameStart= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"comment\">//空函数, 留给子类去重写</span></div><div class=\"line\">&#125;</div><div class=\"line\">gameCenter.prototype.end= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  alert ( <span class=\"string\">\"欢迎下次再来玩\"</span> );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>接下来创建一个斗地主的新游戏, 只需要继承gameCenter然后重写它的gameStart函数.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> 斗地主 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">斗地主.prototype = gameCenter.prototype;  <span class=\"comment\">//继承</span></div><div class=\"line\">斗地主.prototype.gameStart = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//do something</span></div><div class=\"line\">&#125;</div><div class=\"line\">(<span class=\"keyword\">new</span> 斗地主).init();</div></pre></td></tr></table></figure></p>\n<p>这样一局新的游戏就开始了.</p>\n<h1 id=\"十一-中介者模式\"><a href=\"#十一-中介者模式\" class=\"headerlink\" title=\"十一 中介者模式\"></a>十一 中介者模式</h1><p>中介者对象可以让各个对象之间不需要显示的相互引用，从而使其耦合松散，而且可以独立的改变它们之间的交互。</p>\n<p>打个比方，军火买卖双方为了安全起见，找了一个信任的中介来进行交易。买家A把钱交给中介B，然后从中介手中得到军火，卖家C把军火卖给中介，然后从中介手中拿回钱。一场交易完毕，A甚至不知道C是一只猴子还是一只猛犸。因为中介的存在，A也未必一定要买C的军火，也可能是D，E，F。</p>\n<p>银行在存款人和贷款人之间也能看成一个中介。存款人A并不关心他的钱最后被谁借走。贷款人B也不关心他借来的钱来自谁的存款。因为有中介的存在，这场交易才变得如此方便。</p>\n<p>中介者模式和代理模式有一点点相似。都是第三者对象来连接2个对象的通信。具体差别可以从下图中区别。</p>\n<p>代理模式：</p>\n<p>A –&gt;  C  –&gt; B</p>\n<p>中介者模式</p>\n<p>A –&gt;     –&gt; E<br>B –&gt;  D  –&gt; F<br>C –&gt;     –&gt; G</p>\n<p>代理模式中A必然是知道B的一切，而中介者模式中A,B,C对E,F,G的实现并不关心.而且中介者模式可以连接任意多种对象。</p>\n<p>切回到程序世界里的mvc，无论是j2ee中struts的Action. 还是js中backbone.js和spine.js里的Controler. 都起到了一个中介者的作用.<br>拿backbone举例. 一个mode里的数据并不确定最后被哪些view使用. view需要的数据也可以来自任意一个mode. 所有的绑定关系都是在controler里决定. 中介者把复杂的多对多关系, 变成了2个相对简单的1对多关系.</p>\n<p>一段简单的示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mode1 = Mode.create(),  mode2 = Mode.create();</div><div class=\"line\"><span class=\"keyword\">var</span> view1 = View.create(),   view2 = View.create();</div><div class=\"line\"><span class=\"keyword\">var</span> controler1 = Controler.create( mode1, view1, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  view1.el.find( <span class=\"string\">''</span>div<span class=\"string\">' ).bind( '</span><span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.innerHTML = mode1.find( <span class=\"string\">'data'</span> );</div><div class=\"line\">  &#125; )</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">var</span> controler2 = Controler.create( mode2 view2, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  view1.el.find( <span class=\"string\">''</span>div<span class=\"string\">' ).bind( '</span><span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.innerHTML = mode2.find( <span class=\"string\">'data'</span> );</div><div class=\"line\">  &#125; )</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"十二-迭代器模式\"><a href=\"#十二-迭代器模式\" class=\"headerlink\" title=\"十二 迭代器模式\"></a>十二 迭代器模式</h1><p>迭代器模式提供一种方法顺序访问一个聚合对象中各个元素，而又不需要暴露该方法中的内部表示。<br>js中我们经常会封装一个each函数用来实现迭代器。<br>array的迭代器：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">forEach = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> ary, fn </span>)</span>&#123;  </div><div class=\"line\">\t<span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = ary.length; i &lt; l; i++ )&#123;    </div><div class=\"line\">\t\t<span class=\"keyword\">var</span> c = ary[ i ];    </div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ( fn.call( c, i , c ) === <span class=\"literal\">false</span> )&#123;      </div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;    </div><div class=\"line\">\t\t&#125;   </div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">forEach( [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> i, n </span>)</span>&#123;</div><div class=\"line\">  alert ( i );</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>obejct的迭代器:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">forEach = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> obj, fn </span>)</span>&#123;  </div><div class=\"line\">\t<span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj )&#123;    </div><div class=\"line\">\t\t<span class=\"keyword\">var</span> c = obj[ i ];    </div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ( fn.call( c, i, c ) === <span class=\"literal\">false</span> )&#123;      </div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;    </div><div class=\"line\">\t\t&#125;   </div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">forEach( &#123;<span class=\"string\">\"a\"</span>: <span class=\"number\">1</span>,<span class=\"string\">\"b\"</span>: <span class=\"number\">2</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> i, n </span>)</span>&#123;</div><div class=\"line\">  alert ( i );</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h1 id=\"十三-组合模式\"><a href=\"#十三-组合模式\" class=\"headerlink\" title=\"十三 组合模式\"></a>十三 组合模式</h1><p>组合模式又叫<strong>部分-整体模式</strong>，它将所有对象组合成树形结构。使得用户只需要操作最上层的接口，就可以对所有成员做相同的操作。<br>一个再好不过的例子就是jquery对象，大家都知道1个jquery对象其实是一组对象集合。比如在这样一个HTML页面<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>我们想取消所有节点上绑定的事件, 需要这样写<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> allNodes = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"*\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> len = allNodes.length;</div><div class=\"line\"><span class=\"keyword\">while</span>( len-- )&#123;</div><div class=\"line\">  allNodes.unbind(<span class=\"string\">\"*\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>但既然用了jquery，就肯定不会再做这么搓的事情。我们只需要$( ‘body’ ).unbind( ‘*’ );<br>当每个元素都实现unbind接口, 那么只需调用最上层对象$( ‘body’ )的unbind, 便可自动迭代并调用所有组合元素的unbind方法.<br>再来个具体点的例子， 还是dev.qplus.com这个网站的即时验证表单。</p>\n<p>注意下面那个修改资料的按钮，如果有任意一个field的验证没有通过，修改资料的按钮都将是灰色不可点的状态。 这意味着我们重新填写了表单内容后, 都得去校验每个field, 保证它们全部OK.<br>这代码不难实现.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> ( nameField.validata() &amp;&amp; idCard.validata() &amp;&amp; email.validata() &amp;&amp; phone.validata() )&#123;</div><div class=\"line\">   alert ( <span class=\"string\">\"验证OK\"</span> );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>似乎我们用一个外观模式也能勉强解决这里条件分支堆砌的问题，但真正的问题是，我们并不能保证表单里field的数量，也许明天产品经理就让你删掉一个或者增加两个.那么这样的维护方式显然不能被接受.<br>更好的实现是有一个form.validata函数, 它负责把真正的validata操作分发给每个组合对象.<br>form.validata函数里面会依次遍历所有需要校验的field. 若有一个field校验未通过, form.validata都会返回false. 伪代码如下.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">form.validata = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  forEach( fields, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> index, field </span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( field.validata() === <span class=\"literal\">false</span>  )&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"十四-备忘录模式\"><a href=\"#十四-备忘录模式\" class=\"headerlink\" title=\"十四 备忘录模式\"></a>十四 备忘录模式</h1><p>备忘录模式在js中经常用于数据缓存. 比如一个分页控件, 从服务器获得某一页的数据后可以存入缓存。以后再翻回这一页的时候，可以直接使用缓存里的数据而无需再次请求服务器。<br>实现比较简单，伪代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Page = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> page = <span class=\"number\">1</span>,</div><div class=\"line\">      cache = &#123;&#125;,</div><div class=\"line\">      data;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> page </span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ( cache[ page ] )&#123;</div><div class=\"line\">               data =  cache[ page ];</div><div class=\"line\">               render( data );</div><div class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">               Ajax.send( <span class=\"string\">'cgi.xx.com/xxx'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> data </span>)</span>&#123;</div><div class=\"line\">                   cache[ page ] = data;</div><div class=\"line\">                   render( data );</div><div class=\"line\">               &#125;)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>\n<h1 id=\"十五-职责链模式\"><a href=\"#十五-职责链模式\" class=\"headerlink\" title=\"十五 职责链模式\"></a>十五 职责链模式</h1><p>职责链模式是一个对象A向另一个对象B发起请求，如果B不处理，可以把请求转给C，如果C不处理，又可以把请求转给D。一直到有一个对象愿意处理这个请求为止。</p>\n<p>打个比方，客户让老板写个php程序。老板肯定不写，然后老板交给了部门经理。部门经理不愿意写，又交给项目经理。项目经理不会写，又交给程序员。最后由码农来完成。</p>\n<p>在这个假设里， 有几条职责链模式的特点。</p>\n<p>1 老板只跟部门经理打交道，部门经理只联系项目经理，项目经理只找码农的麻烦。<br>2 如果码农也不写，这个项目将会流产。<br>3 客户并不清楚这个程序最后是由谁写出来的。<br>js中的事件冒泡就是作为一个职责链来实现的。一个事件在某个节点上被触发，然后向根节点传递， 直到被节点捕获。</p>\n<h1 id=\"十六-享元模式\"><a href=\"#十六-享元模式\" class=\"headerlink\" title=\"十六 享元模式\"></a>十六 享元模式</h1><p>享元模式主要用来减少程序所需的对象个数. 有一个例子, 我们这边的前端同学几乎人手一本《javascript权威指南》. 从省钱的角度讲, 大约三本就够了. 放在部门的书柜里, 谁需要看的时候就去拿, 看完了还回去. 如果同时有4个同学需要看, 此时再去多买一本.</p>\n<p>在webqq里面, 打开QQ好友列表往下拉的时候，会为每个好友创建一个div( 如果算上div中的子节点, 还远不只1个元素 ).</p>\n<p>如果有1000个QQ好友, 意味着如果从头拉到尾, 会创建1000个div, 这时候有些浏览器也许已经假死了. 这还只是一个随便翻翻好友列表的操作.</p>\n<p>所以我们想到了一种解决办法, 当滚动条滚动的时候, 把已经消失在视线外的div都删除掉. 这样页面可以保持只有一定数量的节点. 问题是这样频繁的添加与删除节点, 也会造成很大的性能开销, 而且这种感觉很不对味.</p>\n<p>现在享元模式可以登场了. 顾名思义, 享元模式可以提供一些共享的对象以便重复利用. 仔细看下上图, 其实我们一共只需要10个div来显示好友信息,也就是出现在用户视线中的10个div.这10个div就可以写成享元.<br>伪代码如下.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">var</span> getDiv = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> created = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> create = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.body.appendChild( <span class=\"built_in\">document</span>.createElement( <span class=\"string\">'div'</span> ) );</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">         <span class=\"keyword\">if</span> ( created.length )&#123;</div><div class=\"line\">              <span class=\"keyword\">return</span> created.shift();</div><div class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> create();</div><div class=\"line\">           &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\"><span class=\"comment\">/* 一个假设的事件，用来监听刚消失在视线外的div，实际上可以通过监听滚                                     动条位置来实现 */</span></div><div class=\"line\">      userInfoContainer.disappear(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> div </span>)</span>&#123;</div><div class=\"line\">              created.push( div );</div><div class=\"line\">        &#125;)</div><div class=\"line\"> &#125;)()</div><div class=\"line\">  <span class=\"keyword\">var</span> div = getDiv();</div><div class=\"line\">  div.innerHTML = <span class=\"string\">\"$&#123;userinfo&#125;\"</span>;</div></pre></td></tr></table></figure></p>\n<p>原理其实很简单, 把刚隐藏起来的div放到一个数组中, 当需要div的时候, 先从该数组中取, 如果数组中已经没有了, 再重新创建一个. 这个数组里的div就是享元, 它们每一个都可以当作任何用户信息的载体.</p>\n<p>当然这只是个示例,实际的情况要复杂一些, 比如快速拖动的时候, 我们可能还得为节点设置一个缓冲区.</p>\n<h1 id=\"十七-状态模式\"><a href=\"#十七-状态模式\" class=\"headerlink\" title=\"十七 状态模式\"></a>十七 状态模式</h1><p>状态模式主要可以用于这种场景<br>1 一个对象的行为取决于它的状态<br>2 一个操作中含有庞大的条件分支语句</p>\n<p>回想下街头霸王的游戏。</p>\n<p>隆有走动，攻击，防御，跌倒，跳跃等等多种状态，而这些状态之间既有联系又互相约束。比如跳跃的时候是不能攻击和防御的。跌倒的时候既不能攻击又不能防御，而走动的时候既可以攻击也可以跳跃。</p>\n<p>要完成这样一系列逻辑, 常理下if else是少不了的. 而且数量无法估计, 特别是增加一种新状态的时候, 可能要从代码的第10行一直改到900行.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> ( state === <span class=\"string\">'jump'</span> )&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> ( currState === <span class=\"string\">'attack'</span> || currState === <span class=\"string\">'defense'</span> )&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( state === <span class=\"string\">'wait'</span> )&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> ( currState === <span class=\"string\">'attack'</span> || currState === <span class=\"string\">'defense'</span> )&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为了消灭这些if else, 并且方便修改和维护, 我们引入一个状态类.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> StateManager = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> currState = <span class=\"string\">'wait'</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> states = &#123;</div><div class=\"line\">    <span class=\"attr\">jump</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> state </span>)</span>&#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">wait</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> state </span>)</span>&#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">attack</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> state </span>)</span>&#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">crouch</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> state </span>)</span>&#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">defense</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> state </span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ( currState === <span class=\"string\">'jump'</span>  )&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  <span class=\"comment\">//不成功，跳跃的时候不能防御</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"comment\">//do something;     //防御的真正逻辑代码, 为了防止状态类的代码过多, 应该把这些逻辑继续扔给真正的fight类来执行.</span></div><div class=\"line\">    currState = <span class=\"string\">'defense'</span>; <span class=\"comment\">//  切换状态</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">var</span> changeState = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> state </span>)</span>&#123;</div><div class=\"line\">    states[ state ] &amp;&amp; states[ state ]();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">changeState</span>  : changeState</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> stateManager = StateManager();</div><div class=\"line\">stateManager.changeState( <span class=\"string\">'defense'</span> );</div></pre></td></tr></table></figure></p>\n<p>通过这个状态类，可以把散落在世界各地的条件分支集中管理到一个类里，并且可以很容易的添加一种新的状态。而作为调用者，只需要通过暴露的changeState接口来切换人物的状态。</p>\n<p>/<strong><strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong></strong>分界线1<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</p>\n<p>GOF提出的23种设计模式，至此已经写完大半。还有一些要么是js里不太适用，要么是js中已有原生自带的实现，所以就没再去深究。这2篇文章里的大部分例子都来自或改写自工作和学习中的代码。我对设计模式的看法是不用刻意去学习设计模式，平时我们接触的很多代码里已经包含了一些设计模式的实现。我的过程是读过prototype和jquery的源码后，回头翻设计模式的书，发现不知觉中已经接触过十之六七。</p>\n<p>同样在实际的编码中也没有必要刻意去使用一些设计模式。就如同tokyo hot 32式一样，在一场友好的papapa过程中，没有必要去刻意使用某种姿势。一切还是看需求和感觉。</p>\n","categories":[],"tags":["javascript"]},{"title":"react-redux学习笔记","url":"http://yoursite.com/2017/04/19/redux学习笔记/","content":"<p>这里记录react-redux的一些关键点，并不是做为redux的介绍，自己备忘用。</p>\n<a id=\"more\"></a>\n<p>参考资源</p>\n<ul>\n<li><a href=\"https://github.com/reactjs/redux\" target=\"_blank\" rel=\"external\">redux</a></li>\n<li><a href=\"https://github.com/reactjs/react-router-redux\" target=\"_blank\" rel=\"external\">react-router-redux</a></li>\n<li><a href=\"https://github.com/erikras/ducks-modular-redux\" target=\"_blank\" rel=\"external\">ducks-modular-redux</a></li>\n<li><a href=\"https://github.com/goopscoop/ga-react-tutorial/tree/6-reduxActionsAndReducers\" target=\"_blank\" rel=\"external\">ga-react-tutorial</a></li>\n<li><a href=\"https://github.com/erikras/react-redux-universal-hot-example\" target=\"_blank\" rel=\"external\">react-redux-universal-hot-example</a></li>\n<li><a href=\"https://github.com/redux-saga/redux-saga\" target=\"_blank\" rel=\"external\">redux-saga</a></li>\n<li><a href=\"https://www.zhihu.com/question/47995437?sort=created\" target=\"_blank\" rel=\"external\">Redux有哪些最佳实践?</a></li>\n</ul>\n<h1 id=\"redux\"><a href=\"#redux\" class=\"headerlink\" title=\"redux\"></a><a href=\"http://redux.js.org/\" target=\"_blank\" rel=\"external\">redux</a></h1><p>Redux是JavaScript应用程序的可预测状态容器。<a href=\"http://cn.redux.js.org/\" target=\"_blank\" rel=\"external\">中文文档</a><br>You can use Redux together with React, or with any other view library.<br><a href=\"http://redux.js.org/docs/introduction/Ecosystem.html\" target=\"_blank\" rel=\"external\">生态系统</a>：很好的redux资源</p>\n<h3 id=\"react-redux-Sample-Examples\"><a href=\"#react-redux-Sample-Examples\" class=\"headerlink\" title=\"react-redux Sample Examples\"></a>react-redux Sample Examples</h3><p>实现容器组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// mapStateToProps</span></div><div class=\"line\"><span class=\"keyword\">const</span> getVisibleTodos = <span class=\"function\">(<span class=\"params\">todos, filter</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (filter) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'SHOW_ALL'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> todos</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'SHOW_COMPLETED'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> todos.filter(<span class=\"function\"><span class=\"params\">t</span> =&gt;</span> t.completed)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'SHOW_ACTIVE'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> todos.filter(<span class=\"function\"><span class=\"params\">t</span> =&gt;</span> !t.completed)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> mapStateToProps = <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">todos</span>: getVisibleTodos(state.todos, state.visibilityFilter)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// mapDispatchToProps</span></div><div class=\"line\"><span class=\"keyword\">const</span> mapDispatchToProps = <span class=\"function\">(<span class=\"params\">dispatch</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">onTodoClick</span>: <span class=\"function\">(<span class=\"params\">id</span>) =&gt;</span> &#123;</div><div class=\"line\">      dispatch(toggleTodo(id))</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Finally, we create the VisibleTodoList by calling connect() and passing these two functions:</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> VisibleTodoList = connect(</div><div class=\"line\">  mapStateToProps,</div><div class=\"line\">  mapDispatchToProps</div><div class=\"line\">)(TodoList)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> VisibleTodoList</div></pre></td></tr></table></figure>\n<p>bindActionCreators 包装action</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// actionCreators</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inputChange</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">type</span>: INPUT_CHANGED,</div><div class=\"line\">    value</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bind</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> todoActionCreators <span class=\"keyword\">from</span> <span class=\"string\">'./todoActionCreators'</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> counterActionCreators <span class=\"keyword\">from</span> <span class=\"string\">'./counterActionCreators'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; bindActionCreators &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapStateToProps</span>(<span class=\"params\">state</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">todos</span>: state.todos &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapDispatchToProps</span>(<span class=\"params\">dispatch</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">todoActions</span>: bindActionCreators(todoActionCreators, dispatch),</div><div class=\"line\">    <span class=\"attr\">counterActions</span>: bindActionCreators(counterActionCreators, dispatch)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// or </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapDispatchToProps</span>(<span class=\"params\">dispatch</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">actions</span>: bindActionCreators(<span class=\"built_in\">Object</span>.assign(&#123;&#125;, todoActionCreators, counterActionCreators), dispatch)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// or </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapDispatchToProps</span>(<span class=\"params\">dispatch</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> bindActionCreators(<span class=\"built_in\">Object</span>.assign(&#123;&#125;, todoActionCreators, counterActionCreators), dispatch)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>mergeProps 使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 根据组件的 props 注入特定用户的 todos 并把 props.userId 传入到 action 中</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> actionCreators <span class=\"keyword\">from</span> <span class=\"string\">'./actionCreators'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapStateToProps</span>(<span class=\"params\">state</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">todos</span>: state.todos &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeProps</span>(<span class=\"params\">stateProps, dispatchProps, ownProps</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, ownProps, &#123;</div><div class=\"line\">    <span class=\"attr\">todos</span>: stateProps.todos[ownProps.userId],</div><div class=\"line\">    <span class=\"attr\">addTodo</span>: <span class=\"function\">(<span class=\"params\">text</span>) =&gt;</span> dispatchProps.addTodo(ownProps.userId, text)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapStateToProps, actionCreators, mergeProps)(TodoApp)</div></pre></td></tr></table></figure>\n<p>Store</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Provider &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></div><div class=\"line\"><span class=\"keyword\">import</span> todoApp <span class=\"keyword\">from</span> <span class=\"string\">'./reducers'</span></div><div class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./components/App'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> store = createStore(todoApp)</div><div class=\"line\"></div><div class=\"line\">render(</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span>,</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<h3 id=\"异步Action\"><a href=\"#异步Action\" class=\"headerlink\" title=\"异步Action\"></a>异步Action</h3><ul>\n<li>你可以使用 <a href=\"https://github.com/acdlite/redux-promise\" target=\"_blank\" rel=\"external\">redux-promise</a> 或者 <a href=\"https://github.com/pburtchaell/redux-promise-middleware\" target=\"_blank\" rel=\"external\">redux-promise-middleware</a> 来 dispatch Promise 来替代函数。</li>\n<li>你可以使用 <a href=\"https://github.com/redux-observable/redux-observable\" target=\"_blank\" rel=\"external\">redux-observable</a> 来 dispatch Observable。</li>\n<li>你可以使用 <a href=\"https://github.com/yelouafi/redux-saga/\" target=\"_blank\" rel=\"external\">redux-saga</a> 中间件来创建更加复杂的异步 action。</li>\n<li>你可以使用 <a href=\"https://github.com/lelandrichardson/redux-pack\" target=\"_blank\" rel=\"external\">redux-pack</a> 中间件 dispatch 基于 Promise 的异步 Action。</li>\n<li>你甚至可以写一个自定义的 middleware 来描述 API 请求，就像这个 <a href=\"http://cn.redux.js.org/docs/introduction/Examples.html#real-world\" target=\"_blank\" rel=\"external\">真实场景的案例</a> 中的做法一样。</li>\n</ul>\n<h3 id=\"Middleware\"><a href=\"#Middleware\" class=\"headerlink\" title=\"Middleware\"></a>Middleware</h3><p>在生态系统中，有几个比较常用的中间件。</p>\n<h4 id=\"react-thunk\"><a href=\"#react-thunk\" class=\"headerlink\" title=\"react-thunk\"></a>react-thunk</h4><p>处理异步Action</p>\n<p>Redux Thunk middleware allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. The inner function receives the store methods dispatch and getState as parameters.</p>\n<p>An action creator that returns a function to perform asynchronous dispatch:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> INCREMENT_COUNTER = <span class=\"string\">'INCREMENT_COUNTER'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">increment</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">type</span>: INCREMENT_COUNTER</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">incrementAsync</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">dispatch</span> =&gt;</span> &#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// Yay! Can invoke sync or async actions with `dispatch`</span></div><div class=\"line\">      dispatch(increment());</div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>An action creator that returns a function to perform conditional dispatch:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">incrementIfOdd</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch, getState</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> &#123; counter &#125; = getState();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (counter % <span class=\"number\">2</span> === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    dispatch(increment());</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.1.0版本后，还添加注入参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> store = createStore(</div><div class=\"line\">  reducer,</div><div class=\"line\">  applyMiddleware(thunk.withExtraArgument(api))</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// later</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchUser</span>(<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch, getState, api</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// you can use api here</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"redux-promise\"><a href=\"#redux-promise\" class=\"headerlink\" title=\"redux-promise\"></a>redux-promise</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; isFSA &#125; <span class=\"keyword\">from</span> <span class=\"string\">'flux-standard-action'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPromise</span>(<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> val &amp;&amp; <span class=\"keyword\">typeof</span> val.then === <span class=\"string\">'function'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">promiseMiddleware</span>(<span class=\"params\">&#123; dispatch &#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">next</span> =&gt;</span> action =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!isFSA(action)) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> isPromise(action)</div><div class=\"line\">        ? action.then(dispatch)</div><div class=\"line\">        : next(action);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> isPromise(action.payload)</div><div class=\"line\">      ? action.payload.then(</div><div class=\"line\">          <span class=\"function\"><span class=\"params\">result</span> =&gt;</span> dispatch(&#123; ...action, <span class=\"attr\">payload</span>: result &#125;),</div><div class=\"line\">          error =&gt; &#123;</div><div class=\"line\">            dispatch(&#123; ...action, <span class=\"attr\">payload</span>: error, <span class=\"attr\">error</span>: <span class=\"literal\">true</span> &#125;);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</div><div class=\"line\">          &#125;</div><div class=\"line\">        )</div><div class=\"line\">      : next(action);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过中间件处理reducer中的promise payload.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// implicit promise</span></div><div class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</div><div class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">'FOO'</span>,</div><div class=\"line\">  <span class=\"attr\">payload</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>()</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// explicit promise</span></div><div class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</div><div class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">'FOO'</span>,</div><div class=\"line\">  <span class=\"attr\">payload</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">promise</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"ducks-modular-redux\"><a href=\"#ducks-modular-redux\" class=\"headerlink\" title=\"ducks-modular-redux\"></a>ducks-modular-redux</h4><p>ducks modular主要是吧reducer封装起来，在component中调用无需写过多type等参数，只需调用方法。</p>\n<p>例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapDispatchToProps</span>(<span class=\"params\">dispatch</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">inputChange</span>: <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> dispatch(inputChange(value)),</div><div class=\"line\">    <span class=\"attr\">inputSubmit</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> dispatch(inputSubmit()),</div><div class=\"line\">    <span class=\"attr\">deleteListItem</span>: <span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> dispatch(deleteListItem(i)),</div><div class=\"line\">    <span class=\"attr\">listItemClick</span>: <span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> dispatch(listItemClick(i))</div><div class=\"line\">  &#125;; <span class=\"comment\">// here we're mapping actions to props</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(</div><div class=\"line\">  mapStateToProps,</div><div class=\"line\">  mapDispatchToProps</div><div class=\"line\">)(ToDoApp);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> List <span class=\"keyword\">from</span> <span class=\"string\">'./List'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Input <span class=\"keyword\">from</span> <span class=\"string\">'./Input'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToDoApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  onInputChange = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.props.inputChange(event.target.value);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  onInputSubmit = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</div><div class=\"line\">    event.preventDefault();</div><div class=\"line\">    <span class=\"keyword\">this</span>.props.inputSubmit();</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  onListItemClick = <span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.props.listItemClick(i)</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  deleteListItem = <span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.props.deleteListItem(i)</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  render()&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.props)</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div className=\"row\"&gt;</div><div class=\"line\">        &lt;div className=\"col-md-8 col-md-offset-2\"&gt;</div><div class=\"line\">          &lt;div className=\"panel panel-default\"&gt;</div><div class=\"line\">            &lt;div className=\"panel-body\"&gt;</div><div class=\"line\">              &lt;h1&gt;My To Do App&lt;/h1&gt;</div><div class=\"line\">              &lt;hr/&gt;</div><div class=\"line\">              &lt;List</div><div class=\"line\">                onClick=&#123;this.onListItemClick&#125;</div><div class=\"line\">                listItems=&#123;this.props.toDoApp.list&#125;</div><div class=\"line\">                deleteListItem=&#123;this.deleteListItem&#125;</div><div class=\"line\">              /&gt;</div><div class=\"line\">              &lt;Input</div><div class=\"line\">                value=&#123;this.props.toDoApp.newToDo&#125;</div><div class=\"line\">                onChange=&#123;this.onInputChange&#125;</div><div class=\"line\">                onSubmit=&#123;this.onInputSubmit&#125;</div><div class=\"line\">              /&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default ToDoApp;</div></pre></td></tr></table></figure>\n<p>createActionDispathchers example</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Creates a function which creates same-named action dispatchers from an object</div><div class=\"line\"> * whose function properties are action creators. Any non-functions in the actionCreators</div><div class=\"line\"> * object are ignored.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">var</span> createActionDispatchers = <span class=\"function\"><span class=\"params\">actionCreators</span> =&gt;</span> dispatch =&gt;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.keys(actionCreators).reduce(<span class=\"function\">(<span class=\"params\">actionDispatchers, name</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> actionCreator = actionCreators[name];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreator == <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      actionDispatchers[name] = <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> dispatch(actionCreator(...args));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> actionDispatchers;</div><div class=\"line\">  &#125;, &#123;&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> actionCreators = <span class=\"built_in\">require</span>(<span class=\"string\">'./ducks/widgets'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> mapStateToProps = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.widgets;</div><div class=\"line\"><span class=\"keyword\">var</span> mapDispatchToProps = createActionDispatchers(actionCreators);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> MyComponent = React.createClass(&#123; <span class=\"comment\">/* ... */</span> &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = connect(mapStateToProps , mapDispatchToProps)(MyComponent);</div></pre></td></tr></table></figure>\n","categories":[],"tags":["react"]},{"title":"计算机网络基础知识总结","url":"http://yoursite.com/2017/04/17/计算机网络基础知识总结/","content":"<p>　　计算机网络学习的核心内容就是网络协议的学习。网络协议是为计算机网络中进行数据交换而建立的规则、标准或者说是约定的集合。因为不同用户的数据终端可能采取的字符集是不同的，两者需要进行通信，必须要在一定的标准上进行。一个很形象地比喻就是我们的语言，我们大天朝地广人多，地方性语言也非常丰富，而且方言之间差距巨大。A地区的方言可能B地区的人根本无法接受，所以我们要为全国人名进行沟通建立一个语言标准，这就是我们的普通话的作用。同样，放眼全球，我们与外国友人沟通的标准语言是英语，所以我们才要苦逼的学习英语。</p>\n<p>　　计算机网络协议同我们的语言一样，多种多样。而ARPA公司与1977年到1979年推出了一种名为ARPANET的网络协议受到了广泛的热捧，其中最主要的原因就是它推出了人尽皆知的TCP/IP标准网络协议。目前TCP/IP协议已经成为Internet中的“通用语言”，下图为不同计算机群之间利用TCP/IP进行通信的示意图。</p>\n<a id=\"more\"></a>\n<p><img src=\"./1.gif\" alt=\"\"></p>\n<h1 id=\"网络层次划分\"><a href=\"#网络层次划分\" class=\"headerlink\" title=\"网络层次划分\"></a>网络层次划分</h1><p>　　为了使不同计算机厂家生产的计算机能够相互通信，以便在更大的范围内建立计算机网络，国际标准化组织（ISO）在1978年提出了“开放系统互联参考模型”，即著名的OSI/RM模型（Open System Interconnection/Reference Model）。它将计算机网络体系结构的通信协议划分为七层，自下而上依次为：物理层（Physics Layer）、数据链路层（Data Link Layer）、网络层（Network Layer）、传输层（Transport Layer）、会话层（Session Layer）、表示层（Presentation Layer）、应用层（Application Layer）。其中第四层完成数据传送服务，上面三层面向用户。<br>　　除了标准的OSI七层模型以外，常见的网络层次划分还有TCP/IP四层协议以及TCP/IP五层协议，它们之间的对应关系如下图所示：</p>\n<p><img src=\"./2.jpg\" alt=\"\"></p>\n<h1 id=\"OSI七层网络模型\"><a href=\"#OSI七层网络模型\" class=\"headerlink\" title=\"OSI七层网络模型\"></a>OSI七层网络模型</h1><p>　　TCP/IP协议毫无疑问是互联网的基础协议，没有它就根本不可能上网，任何和互联网有关的操作都离不开TCP/IP协议。不管是OSI七层模型还是TCP/IP的四层、五层模型，每一层中都要自己的专属协议，完成自己相应的工作以及与上下层级之间进行沟通。由于OSI七层模型为网络的标准层次划分，所以我们以OSI七层模型为例从下向上进行一一介绍。</p>\n<p><img src=\"./3.gif\" alt=\"\"></p>\n<p>　　<strong>1）物理层（Physical Layer）</strong><br>　　激活、维持、关闭通信端点之间的机械特性、电气特性、功能特性以及过程特性。该层为上层协议提供了一个传输数据的可靠的物理媒体。简单的说，物理层确保原始的数据可在各种物理媒体上传输。物理层记住两个重要的设备名称，中继器（Repeater，也叫放大器）和集线器。</p>\n<p>　　<strong>2）数据链路层（Data Link Layer）</strong></p>\n<p>　　数据链路层在物理层提供的服务的基础上向网络层提供服务，其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。为达到这一目的，数据链路必须具备一系列相应的功能，主要有：如何将数据组合成数据块，在数据链路层中称这种数据块为帧（frame），帧是数据链路层的传送单位；如何控制帧在物理信道上的传输，包括如何处理传输差错，如何调节发送速率以使与接收方相匹配；以及在两个网络实体之间提供数据链路通路的建立、维持和释放的管理。数据链路层在不可靠的物理介质上提供可靠的传输。该层的作用包括：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。</p>\n<p>　　有关数据链路层的重要知识点：</p>\n<p>　　1&gt; 数据链路层为网络层提供可靠的数据传输；</p>\n<p>　　2&gt; 基本数据单位为帧；</p>\n<p>　　3&gt; 主要的协议：以太网协议；</p>\n<p>　　4&gt; 两个重要设备名称：网桥和交换机。</p>\n<p>　　<strong>3）网络层（Network Layer）</strong></p>\n<p>　　网络层的目的是实现两个端系统之间的数据透明传送，具体功能包括寻址和路由选择、连接的建立、保持和终止等。它提供的服务使传输层不需要了解网络中的数据传输和交换技术。如果您想用尽量少的词来记住网络层，那就是“路径选择、路由及逻辑寻址”。</p>\n<p>　　网络层中涉及众多的协议，其中包括最重要的协议，也是TCP/IP的核心协议——IP协议。IP协议非常简单，仅仅提供不可靠、无连接的传送服务。IP协议的主要功能有：无连接数据报传输、数据报路由选择和差错控制。与IP协议配套使用实现其功能的还有地址解析协议ARP、逆地址解析协议RARP、因特网报文协议ICMP、因特网组管理协议IGMP。具体的协议我们会在接下来的部分进行总结，有关网络层的重点为：</p>\n<p>　　1&gt; 网络层负责对子网间的数据包进行路由选择。此外，网络层还可以实现拥塞控制、网际互连等功能；</p>\n<p>　　2&gt; 基本数据单位为IP数据报；</p>\n<p>　　3&gt; 包含的主要协议：</p>\n<p>　　IP协议（Internet Protocol，因特网互联协议）;</p>\n<p>　　ICMP协议（Internet Control Message Protocol，因特网控制报文协议）;</p>\n<p>　　ARP协议（Address Resolution Protocol，地址解析协议）;</p>\n<p>　　RARP协议（Reverse Address Resolution Protocol，逆地址解析协议）。</p>\n<p>　　4&gt; 重要的设备：路由器。</p>\n<p>　　<strong>4）传输层（Transport Layer）</strong></p>\n<p>　　第一个端到端，即主机到主机的层次。传输层负责将上层数据分段并提供端到端的、可靠的或不可靠的传输。此外，传输层还要处理端到端的差错控制和流量控制问题。</p>\n<p>　　传输层的任务是根据通信子网的特性，最佳的利用网络资源，为两个端系统的会话层之间，提供建立、维护和取消传输连接的功能，负责端到端的可靠数据传输。在这一层，信息传送的协议数据单元称为段或报文。<br>　　网络层只是根据网络地址将源结点发出的数据包传送到目的结点，而传输层则负责将数据可靠地传送到相应的端口。<br>　　有关网络层的重点：<br>　　1&gt; 传输层负责将上层数据分段并提供端到端的、可靠的或不可靠的传输以及端到端的差错控制和流量控制问题；<br>　　2&gt; 包含的主要协议：TCP协议（Transmission Control Protocol，传输控制协议）、UDP协议（User Datagram Protocol，用户数据报协议）；<br>　　3&gt; 重要设备：网关。</p>\n<p>　　<strong>5）会话层</strong></p>\n<p>　　会话层管理主机之间的会话进程，即负责建立、管理、终止进程之间的会话。会话层还利用在数据中插入校验点来实现数据的同步。</p>\n<p>　　<strong>6）表示层</strong></p>\n<p>　　表示层对上层数据或信息进行变换以保证一个主机应用层信息可以被另一个主机的应用程序理解。表示层的数据转换包括数据的加密、压缩、格式转换等。</p>\n<p>　　<strong>7）应用层</strong></p>\n<p>　　为操作系统或网络应用程序提供访问网络服务的接口。</p>\n<p>　　会话层、表示层和应用层重点：</p>\n<p>　　1&gt; 数据传输基本单位为报文；</p>\n<p>　　2&gt; 包含的主要协议：FTP（文件传送协议）、Telnet（远程登录协议）、DNS（域名解析协议）、SMTP（邮件传送协议），POP3协议（邮局协议），HTTP协议（Hyper Text Transfer Protocol）。</p>\n<h1 id=\"IP地址\"><a href=\"#IP地址\" class=\"headerlink\" title=\"IP地址\"></a>IP地址</h1><p>　　<strong>1）网络地址</strong></p>\n<p>　　IP地址由网络号（包括子网号）和主机号组成，网络地址的主机号为全0，网络地址代表着整个网络。</p>\n<p>　　<strong>2）广播地址</strong></p>\n<p>　　广播地址通常称为直接广播地址，是为了区分受限广播地址。</p>\n<p>　　广播地址与网络地址的主机号正好相反，广播地址中，主机号为全1。当向某个网络的广播地址发送消息时，该网络内的所有主机都能收到该广播消息。</p>\n<p>　　<strong>3）组播地址</strong></p>\n<p>　　D类地址就是组播地址。</p>\n<p>　　先回忆下A，B，C，D类地址吧：</p>\n<p>　　A类地址以0开头，第一个字节作为网络号，地址范围为：0.0.0.0~127.255.255.255；(modified @2016.05.31)</p>\n<p>　　B类地址以10开头，前两个字节作为网络号，地址范围是：128.0.0.0~191.255.255.255;</p>\n<p>　　C类地址以110开头，前三个字节作为网络号，地址范围是：192.0.0.0~223.255.255.255。</p>\n<p>　　D类地址以1110开头，地址范围是224.0.0.0~239.255.255.255，D类地址作为组播地址（一对多的通信）；</p>\n<p>　　E类地址以1111开头，地址范围是240.0.0.0~255.255.255.255，E类地址为保留地址，供以后使用。</p>\n<p>　　注：只有A,B,C有网络号和主机号之分，D类地址和E类地址没有划分网络号和主机号。</p>\n<p>　　<strong>4）255.255.255.255</strong></p>\n<p>　　该IP地址指的是受限的广播地址。受限广播地址与一般广播地址（直接广播地址）的区别在于，受限广播地址只能用于本地网络，路由器不会转发以受限广播地址为目的地址的分组；一般广播地址既可在本地广播，也可跨网段广播。例如：主机192.168.1.1/30上的直接广播数据包后，另外一个网段192.168.1.5/30也能收到该数据报；若发送受限广播数据报，则不能收到。</p>\n<p>　　注：一般的广播地址（直接广播地址）能够通过某些路由器（当然不是所有的路由器），而受限的广播地址不能通过路由器。</p>\n<p>　　<strong>5）0.0.0.0</strong></p>\n<p>　　常用于寻找自己的IP地址，例如在我们的RARP，BOOTP和DHCP协议中，若某个未知IP地址的无盘机想要知道自己的IP地址，它就以255.255.255.255为目的地址，向本地范围（具体而言是被各个路由器屏蔽的范围内）的服务器发送IP请求分组。</p>\n<p>　　<strong>6）回环地址</strong></p>\n<p>　　127.0.0.0/8被用作回环地址，回环地址表示本机的地址，常用于对本机的测试，用的最多的是127.0.0.1。</p>\n<p>　　<strong>7）A、B、C类私有地址</strong></p>\n<p>　　私有地址(private address)也叫专用地址，它们不会在全球使用，只具有本地意义。</p>\n<p>　　A类私有地址：10.0.0.0/8，范围是：10.0.0.0~10.255.255.255</p>\n<p>　　B类私有地址：172.16.0.0/12，范围是：172.16.0.0~172.31.255.255</p>\n<p>　　C类私有地址：192.168.0.0/16，范围是：192.168.0.0~192.168.255.255</p>\n<h1 id=\"子网掩码及网络划分\"><a href=\"#子网掩码及网络划分\" class=\"headerlink\" title=\"子网掩码及网络划分\"></a>子网掩码及网络划分</h1><p>　　随着互连网应用的不断扩大，原先的IPv4的弊端也逐渐暴露出来，即网络号占位太多，而主机号位太少，所以其能提供的主机地址也越来越稀缺，目前除了使用NAT在企业内部利用保留地址自行分配以外，通常都对一个高类别的IP地址进行再划分，以形成多个子网，提供给不同规模的用户群使用。</p>\n<p>　　这里主要是为了在网络分段情况下有效地利用IP地址，通过对主机号的高位部分取作为子网号，从通常的网络位界限中扩展或压缩子网掩码，用来创建某类地址的更多子网。但创建更多的子网时，在每个子网上的可用主机地址数目会比原先减少。</p>\n<p>　　<strong>什么是子网掩码？</strong></p>\n<p>　　子网掩码是标志两个IP地址是否同属于一个子网的，也是32位二进制地址，其每一个为1代表该位是网络位，为0代表主机位。它和IP地址一样也是使用点式十进制来表示的。如果两个IP地址在子网掩码的按位与的计算下所得结果相同，即表明它们共属于同一子网中。</p>\n<p>　　在计算子网掩码时，我们要注意IP地址中的保留地址，即“ 0”地址和广播地址，它们是指主机地址或网络地址全为“ 0”或“ 1”时的IP地址，它们代表着本网络地址和广播地址，一般是不能被计算在内的。</p>\n<p>　　<strong>子网掩码的计算：</strong></p>\n<p>　　对于无须再划分成子网的IP地址来说，其子网掩码非常简单，即按照其定义即可写出：如某B类IP地址为 10.12.3.0，无须再分割子网，则该IP地址的子网掩码255.255.0.0。如果它是一个C类地址，则其子网掩码为 255.255.255.0。其它类推，不再详述。下面我们关键要介绍的是一个IP地址，还需要将其高位主机位再作为划分出的子网网络号，剩下的是每个子网的主机号，这时该如何进行每个子网的掩码计算。</p>\n<p>　　下面总结一下有关子网掩码和网络划分常见的面试考题：</p>\n<p>　　<strong>1）利用子网数来计算</strong></p>\n<p>　　在求子网掩码之前必须先搞清楚要划分的子网数目，以及每个子网内的所需主机数目。</p>\n<p>　　(1) 将子网数目转化为二进制来表示;</p>\n<p>　　如欲将B类IP地址168.195.0.0划分成27个子网：27=11011；</p>\n<p>　　(2) 取得该二进制的位数，为N；</p>\n<p>　　该二进制为五位数，N = 5</p>\n<p>　　(3) 取得该IP地址的类子网掩码，将其主机地址部分的的前N位置1即得出该IP地址划分子网的子网掩码。</p>\n<p>　　将B类地址的子网掩码255.255.0.0的主机地址前5位置 1，得到 255.255.248.0</p>\n<p>　　<strong>2）利用主机数来计算</strong></p>\n<p>　　如欲将B类IP地址168.195.0.0划分成若干子网，每个子网内有主机700台：</p>\n<p>　　(1) 将主机数目转化为二进制来表示；</p>\n<p>　　700=1010111100；</p>\n<p>　　(2) 如果主机数小于或等于254（注意去掉保留的两个IP地址），则取得该主机的二进制位数，为N，这里肯定 N<8。如果大于254，则 n=\"\">8，这就是说主机地址将占据不止8位；</8。如果大于254，则></p>\n<p>　　该二进制为十位数，N=10；</p>\n<p>　　(3) 使用255.255.255.255来将该类IP地址的主机地址位数全部置1，然后从后向前的将N位全部置为 0，即为子网掩码值。</p>\n<p>　　将该B类地址的子网掩码255.255.0.0的主机地址全部置1，得到255.255.255.255，然后再从后向前将后 10位置0,即为：11111111.11111111.11111100.00000000，即255.255.252.0。这就是该欲划分成主机为700台的B类IP地址 168.195.0.0的子网掩码。</p>\n<p>　　<strong>3）还有一种题型，要你根据每个网络的主机数量进行子网地址的规划和计算子网掩码。这也可按上述原则进行计算。</strong></p>\n<p>　　比如一个子网有10台主机，那么对于这个子网需要的IP地址是：</p>\n<p>　　10＋1＋1＋1＝13</p>\n<p>　　注意：加的第一个1是指这个网络连接时所需的网关地址，接着的两个1分别是指网络地址和广播地址。</p>\n<p>　　因为13小于16（16等于2的4次方），所以主机位为4位。而256－16＝240，所以该子网掩码为255.255.255.240。</p>\n<p>　　如果一个子网有14台主机，不少人常犯的错误是：依然分配具有16个地址空间的子网，而忘记了给网关分配地址。这样就错误了，因为14＋1＋1＋1＝17，17大于16，所以我们只能分配具有32个地址（32等于2的5次方）空间的子网。这时子网掩码为：255.255.255.224。</p>\n<h1 id=\"ARP-RARP协议\"><a href=\"#ARP-RARP协议\" class=\"headerlink\" title=\"ARP/RARP协议\"></a>ARP/RARP协议</h1><p>　　<strong>地址解析协议，即ARP（Address Resolution Protocol），是根据IP地址获取物理地址的一个TCP/IP协议。</strong>主机发送信息时将包含目标IP地址的ARP请求广播到网络上的所有主机，并接收返回消息，以此确定目标的物理地址；收到返回消息后将该IP地址和物理地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。地址解析协议是建立在网络中各个主机互相信任的基础上的，网络上的主机可以自主发送ARP应答消息，其他主机收到应答报文时不会检测该报文的真实性就会将其记入本机ARP缓存；由此攻击者就可以向某一主机发送伪ARP应答报文，使其发送的信息无法到达预期的主机或到达错误的主机，这就构成了一个ARP欺骗。<strong>ARP命令可用于查询本机ARP缓存中IP地址和MAC地址的对应关系、添加或删除静态对应关系等。</strong></p>\n<p>　　ARP工作流程举例：</p>\n<p>　　主机A的IP地址为192.168.1.1，MAC地址为0A-11-22-33-44-01；<br>　　主机B的IP地址为192.168.1.2，MAC地址为0A-11-22-33-44-02；<br>　　当主机A要与主机B通信时，地址解析协议可以将主机B的IP地址（192.168.1.2）解析成主机B的MAC地址，以下为工作流程：<br>　　（1）根据主机A上的路由表内容，IP确定用于访问主机B的转发IP地址是192.168.1.2。然后A主机在自己的本地ARP缓存中检查主机B的匹配MAC地址。<br>　　（2）如果主机A在ARP缓存中没有找到映射，它将询问192.168.1.2的硬件地址，从而将ARP请求帧广播到本地网络上的所有主机。源主机A的IP地址和MAC地址都包括在ARP请求中。本地网络上的每台主机都接收到ARP请求并且检查是否与自己的IP地址匹配。如果主机发现请求的IP地址与自己的IP地址不匹配，它将丢弃ARP请求。<br>　　（3）主机B确定ARP请求中的IP地址与自己的IP地址匹配，则将主机A的IP地址和MAC地址映射添加到本地ARP缓存中。<br>　　（4）主机B将包含其MAC地址的ARP回复消息直接发送回主机A。<br>　　（5）当主机A收到从主机B发来的ARP回复消息时，会用主机B的IP和MAC地址映射更新ARP缓存。本机缓存是有生存期的，生存期结束后，将再次重复上面的过程。主机B的MAC地址一旦确定，主机A就能向主机B发送IP通信了。<br>　　<strong>逆地址解析协议，即RARP，功能和ARP协议相对，其将局域网中某个主机的物理地址转换为IP地址</strong>，比如局域网中有一台主机只知道物理地址而不知道IP地址，那么可以通过RARP协议发出征求自身IP地址的广播请求，然后由RARP服务器负责回答。</p>\n<p>　　RARP协议工作流程：</p>\n<p>　　（1）给主机发送一个本地的RARP广播，在此广播包中，声明自己的MAC地址并且请求任何收到此请求的RARP服务器分配一个IP地址；</p>\n<p>　　（2）本地网段上的RARP服务器收到此请求后，检查其RARP列表，查找该MAC地址对应的IP地址；</p>\n<p>　　（3）如果存在，RARP服务器就给源主机发送一个响应数据包并将此IP地址提供给对方主机使用；<br>　　（4）如果不存在，RARP服务器对此不做任何的响应；<br>　　（5）源主机收到从RARP服务器的响应信息，就利用得到的IP地址进行通讯；如果一直没有收到RARP服务器的响应信息，表示初始化失败。</p>\n<h1 id=\"路由选择协议\"><a href=\"#路由选择协议\" class=\"headerlink\" title=\"路由选择协议\"></a>路由选择协议</h1><p>　　常见的路由选择协议有：RIP协议、OSPF协议。</p>\n<p>　　<strong>RIP协议 </strong>：底层是贝尔曼福特算法，它选择路由的度量标准（metric)是跳数，最大跳数是15跳，如果大于15跳，它就会丢弃数据包。</p>\n<p>　　<strong>OSPF协议 </strong>：Open Shortest Path First开放式最短路径优先，底层是迪杰斯特拉算法，是链路状态路由选择协议，它选择路由的度量标准是带宽，延迟。</p>\n<h1 id=\"TCP-IP协议\"><a href=\"#TCP-IP协议\" class=\"headerlink\" title=\"TCP/IP协议\"></a>TCP/IP协议</h1><p>　　<strong>TCP/IP协议是Internet最基本的协议、Internet国际互联网络的基础，由网络层的IP协议和传输层的TCP协议组成。通俗而言：TCP负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地。而IP是给因特网的每一台联网设备规定一个地址。</strong><br>　　IP层接收由更低层（网络接口层例如以太网设备驱动程序）发来的数据包，并把该数据包发送到更高层—TCP或UDP层；相反，IP层也把从TCP或UDP层接收来的数据包传送到更低层。IP数据包是不可靠的，因为IP并没有做任何事情来确认数据包是否按顺序发送的或者有没有被破坏，IP数据包中含有发送它的主机的地址（源地址）和接收它的主机的地址（目的地址）。<br> 　　TCP是面向连接的通信协议，通过三次握手建立连接，通讯完成时要拆除连接，由于TCP是面向连接的所以只能用于端到端的通讯。TCP提供的是一种可靠的数据流服务，采用“带重传的肯定确认”技术来实现传输的可靠性。TCP还采用一种称为“滑动窗口”的方式进行流量控制，所谓窗口实际表示接收能力，用以限制发送方的发送速度。</p>\n<p>　　<strong>TCP报文首部格式：</strong></p>\n<p><img src=\"./4.png\" alt=\"\"></p>\n<p>　　<strong>TCP协议的三次握手和四次挥手：</strong></p>\n<p><img src=\"./5.gif\" alt=\"\"></p>\n<p>　　注：seq:”sequance”序列号；ack:”acknowledge”确认号；SYN:”synchronize”请求同步标志；；ACK:”acknowledge”确认标志”；FIN：”Finally”结束标志。</p>\n<p>　　<strong>TCP连接建立过程：</strong>首先Client端发送连接请求报文，Server段接受连接后回复ACK报文，并为这次连接分配资源。Client端接收到ACK报文后也向Server段发生ACK报文，并分配资源，这样TCP连接就建立了。</p>\n<p>　　<strong>TCP连接断开过程：</strong>假设Client端发起中断连接请求，也就是发送FIN报文。Server端接到FIN报文后，意思是说”我Client端没有数据要发给你了”，但是如果你还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK，”告诉Client端，你的请求我收到了，但是我还没准备好，请继续你等我的消息”。这个时候Client端就进入FIN_WAIT状态，继续等待Server端的FIN报文。当Server端确定数据已发送完成，则向Client端发送FIN报文，”告诉Client端，好了，我这边数据发完了，准备好关闭连接了”。Client端收到FIN报文后，”就知道可以关闭连接了，但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后进入TIME_WAIT状态，如果Server端没有收到ACK则可以重传。“，Server端收到ACK后，”就知道可以断开连接了”。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！</p>\n<p>　　<strong>为什么要三次挥手？</strong></p>\n<p>　　在只有两次“握手”的情形下，假设Client想跟Server建立连接，但是却因为中途连接请求的数据报丢失了，故Client端不得不重新发送一遍；这个时候Server端仅收到一个连接请求，因此可以正常的建立连接。但是，有时候Client端重新发送请求不是因为数据报丢失了，而是有可能数据传输过程因为网络并发量很大在某结点被阻塞了，这种情形下Server端将先后收到2次请求，并持续等待两个Client请求向他发送数据…问题就在这里，Cient端实际上只有一次请求，而Server端却有2个响应，极端的情况可能由于Client端多次重新发送请求数据而导致Server端最后建立了N多个响应在等待，因而造成极大的资源浪费！所以，“三次握手”很有必要！</p>\n<p>　　<strong>为什么要四次挥手？</strong></p>\n<p>　　试想一下，假如现在你是客户端你想断开跟Server的所有连接该怎么做？第一步，你自己先停止向Server端发送数据，并等待Server的回复。但事情还没有完，虽然你自身不往Server发送数据了，但是因为你们之前已经建立好平等的连接了，所以此时他也有主动权向你发送数据；故Server端还得终止主动向你发送数据，并等待你的确认。其实，说白了就是保证双方的一个合约的完整执行！</p>\n<p>　　使用TCP的协议：FTP（文件传输协议）、Telnet（远程登录协议）、SMTP（简单邮件传输协议）、POP3（和SMTP相对，用于接收邮件）、HTTP协议等。</p>\n<h1 id=\"UDP协议\"><a href=\"#UDP协议\" class=\"headerlink\" title=\"UDP协议　\"></a>UDP协议　</h1><p>　　<strong>UDP用户数据报协议，是面向无连接的通讯协议，UDP数据包括目的端口号和源端口号信息，由于通讯不需要连接，所以可以实现广播发送。UDP通讯时不需要接收方确认，属于不可靠的传输，可能会出现丢包现象，实际应用中要求程序员编程验证。</strong><br>　　UDP与TCP位于同一层，但它不管数据包的顺序、错误或重发。因此，UDP不被应用于那些使用虚电路的面向连接的服务，UDP主要用于那些面向查询—应答的服务，例如NFS。相对于FTP或Telnet，这些服务需要交换的信息量较小。<br>　　每个UDP报文分UDP报头和UDP数据区两部分。报头由四个16位长（2字节）字段组成，分别说明该报文的源端口、目的端口、报文长度以及校验值。UDP报头由4个域组成，其中每个域各占用2个字节，具体如下：<br>　　（1）源端口号；<br>　　（2）目标端口号；<br>　　（3）数据报长度；<br>　　（4）校验值。<br>　　使用UDP协议包括：TFTP（简单文件传输协议）、SNMP（简单网络管理协议）、DNS（域名解析协议）、NFS、BOOTP。<br>　　<strong>TCP 与 UDP 的区别：TCP是面向连接的，可靠的字节流服务；UDP是面向无连接的，不可靠的数据报服务。</strong></p>\n<h1 id=\"DNS协议\"><a href=\"#DNS协议\" class=\"headerlink\" title=\"DNS协议\"></a>DNS协议</h1><p>　　DNS是域名系统(DomainNameSystem)的缩写，该系统用于命名组织到域层次结构中的计算机和网络服务，<strong>可以简单地理解为将URL转换为IP地址。</strong>域名是由圆点分开一串单词或缩写组成的，每一个域名都对应一个惟一的IP地址，在Internet上域名与IP地址之间是一一对应的，DNS就是进行域名解析的服务器。DNS命名用于Internet等TCP/IP网络中，通过用户友好的名称查找计算机和服务。</p>\n<h1 id=\"NAT协议\"><a href=\"#NAT协议\" class=\"headerlink\" title=\"NAT协议\"></a>NAT协议</h1><p>　　NAT网络地址转换(Network Address Translation)属接入广域网(WAN)技术，是一种将私有（保留）地址转化为合法IP地址的转换技术，它被广泛应用于各种类型Internet接入方式和各种类型的网络中。原因很简单，NAT不仅完美地解决了lP地址不足的问题，而且还能够有效地避免来自网络外部的攻击，隐藏并保护网络内部的计算机。</p>\n<h1 id=\"DHCP协议\"><a href=\"#DHCP协议\" class=\"headerlink\" title=\"DHCP协议\"></a>DHCP协议</h1><p>　　DHCP动态主机设置协议（Dynamic Host Configuration Protocol）是一个局域网的网络协议，使用UDP协议工作，主要有两个用途：给内部网络或网络服务供应商自动分配IP地址，给用户或者内部网络管理员作为对所有计算机作中央管理的手段。</p>\n<h1 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h1><p>　　超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准。<br>　　<strong>HTTP 协议包括哪些请求？</strong></p>\n<p>　　GET：请求读取由URL所标志的信息。</p>\n<p>　　POST：给服务器添加信息（如注释）。</p>\n<p>　　PUT：在给定的URL下存储一个文档。</p>\n<p>　　DELETE：删除给定的URL所标志的资源。</p>\n<p>　　<strong>HTTP 中， POST 与 GET 的区别</strong></p>\n<p>　　1）Get是从服务器上获取数据，Post是向服务器传送数据。</p>\n<p>　　2）Get是把参数数据队列加到提交表单的Action属性所指向的URL中，值和表单内各个字段一一对应，在URL中可以看到。</p>\n<p>　　3）Get传送的数据量小，不能大于2KB；Post传送的数据量较大，一般被默认为不受限制。</p>\n<p>　　4）根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的。</p>\n<p>　　I. 所谓 安全的 意味着该操作用于获取信息而非修改信息。换句话说，GET请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。</p>\n<p>　　II. 幂等 的意味着对同一URL的多个请求应该返回同样的结果。</p>\n<h1 id=\"一个举例\"><a href=\"#一个举例\" class=\"headerlink\" title=\"一个举例\"></a>一个举例</h1><p>　　在浏览器中输入 www.baidu.com  后执行的全部过程</p>\n<p>　　现在假设如果我们在客户端（客户端）浏览器中输入<a href=\"http://www.baidu.com,而baidu.com为要访问的服务器（服务器），下面详细分析客户端为了访问服务器而执行的一系列关于协议的操作：\" target=\"_blank\" rel=\"external\">http://www.baidu.com,而baidu.com为要访问的服务器（服务器），下面详细分析客户端为了访问服务器而执行的一系列关于协议的操作：</a></p>\n<p>　　1）客户端浏览器通过DNS解析到www.baidu.com的IP地址220.181.27.48，通过这个IP地址找到客户端到服务器的路径。客户端浏览器发起一个HTTP会话到220.161.27.48，然后通过TCP进行封装数据包，输入到网络层。</p>\n<p>　　2）在客户端的传输层，把HTTP会话请求分成报文段，添加源和目的端口，如服务器使用80端口监听客户端的请求，客户端由系统随机选择一个端口如5000，与服务器进行交换，服务器把相应的请求返回给客户端的5000端口。然后使用IP层的IP地址查找目的端。</p>\n<p>　　3）客户端的网络层不用关系应用层或者传输层的东西，主要做的是通过查找路由表确定如何到达服务器，期间可能经过多个路由器，这些都是由路由器来完成的工作，不作过多的描述，无非就是通过查找路由表决定通过那个路径到达服务器。</p>\n<p>　　4）客户端的链路层，包通过链路层发送到路由器，通过邻居协议查找给定IP地址的MAC地址，然后发送ARP请求查找目的地址，如果得到回应后就可以使用ARP的请求应答交换的IP数据包现在就可以传输了，然后发送IP数据包到达服务器的地址。</p>\n<blockquote>\n<p>作者：Poll的笔记<br>博客出处：<a href=\"http://www.cnblogs.com/maybe2030/p/4781555.html#_label6\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/maybe2030/p/4781555.html#_label6</a></p>\n</blockquote>\n<h1 id=\"https介绍\"><a href=\"#https介绍\" class=\"headerlink\" title=\"https介绍\"></a>https介绍</h1><p><a href=\"http://www.ruanyifeng.com/blog/2016/08/http.html\" target=\"_blank\" rel=\"external\">HTTP 协议入门</a><br><a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\" target=\"_blank\" rel=\"external\">SSL/TLS协议运行机制的概述</a><br><a href=\"http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html\" target=\"_blank\" rel=\"external\">图解SSL/TLS协议</a><br><a href=\"http://www.ruanyifeng.com/blog/2011/02/seven_myths_about_https.html\" target=\"_blank\" rel=\"external\">HTTPS的七个误解（译文）</a></p>\n","categories":[],"tags":["web"]},{"title":"前端安全知识","url":"http://yoursite.com/2017/04/17/前端安全知识/","content":"<p>前端安全问题收集，对安全问题要有深刻认识。</p>\n<a id=\"more\"></a>\n<h1 id=\"XSS跨站脚本攻击-Cross-Site-Scripting\"><a href=\"#XSS跨站脚本攻击-Cross-Site-Scripting\" class=\"headerlink\" title=\"XSS跨站脚本攻击(Cross Site Scripting)\"></a>XSS跨站脚本攻击(Cross Site Scripting)</h1><p>XSS是一种经常出现在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。比如这些代码包括HTML代码和客户端脚本。攻击者利用XSS漏洞旁路掉访问控制——例如同源策略(same origin policy)。这种类型的漏洞由于被黑客用来编写危害性更大的网络钓鱼(Phishing)攻击而变得广为人知。对于跨站脚本攻击，黑客界共识是：跨站脚本攻击是新型的“缓冲区溢出攻击“，而JavaScript是新型的“ShellCode”。</p>\n<h2 id=\"XSS攻击的危害包括\"><a href=\"#XSS攻击的危害包括\" class=\"headerlink\" title=\"XSS攻击的危害包括\"></a>XSS攻击的危害包括</h2><p>1、盗取各类用户帐号，如机器登录帐号、用户网银帐号、各类管理员帐号<br>2、控制企业数据，包括读取、篡改、添加、删除企业敏感数据的能力<br>3、盗窃企业重要的具有商业价值的资料<br>4、非法转账<br>5、强制发送电子邮件<br>6、网站挂马<br>7、控制受害者机器向其它网站发起攻击</p>\n<h2 id=\"XSS漏洞分类\"><a href=\"#XSS漏洞分类\" class=\"headerlink\" title=\"XSS漏洞分类\"></a>XSS漏洞分类</h2><p><strong>类型A</strong>，本地利用漏洞，这种漏洞存在于页面中客户端脚本自身。其攻击过程如下所示：<br>Alice给Bob发送一个恶意构造了Web的URL。<br>Bob点击并查看了这个URL。<br>恶意页面中的JavaScript打开一个具有漏洞的HTML页面并将其安装在Bob电脑上。<br>具有漏洞的HTML页面包含了在Bob电脑本地域执行的JavaScript。<br>Alice的恶意脚本可以在Bob的电脑上执行Bob所持有的权限下的命令。</p>\n<p><strong>类型B</strong>，反射式漏洞，这种漏洞和类型A有些类似，不同的是Web客户端使用Server端脚本生成页面为用户提供数据时，如果未经验证的用户数据被包含在页面中而未经HTML实体编码，客户端代码便能够注入到动态页面中。其攻击过程如下：<br>Alice经常浏览某个网站，此网站为Bob所拥有。Bob的站点运行Alice使用用户名/密码进行登录，并存储敏感信息(比如银行帐户信息)。<br>Charly发现Bob的站点包含反射性的XSS漏洞。<br>Charly编写一个利用漏洞的URL，并将其冒充为来自Bob的邮件发送给Alice。<br>Alice在登录到Bob的站点后，浏览Charly提供的URL。<br>嵌入到URL中的恶意脚本在Alice的浏览器中执行，就像它直接来自Bob的服务器一样。此脚本盗窃敏感信息(授权、信用卡、帐号信息等)然后在Alice完全不知情的情况下将这些信息发送到Charly的Web站点。</p>\n<p><strong>类型C</strong>，存储式漏洞，该类型是应用最为广泛而且有可能影响到Web服务器自身安全的漏洞，骇客将攻击脚本上传到Web服务器上，使得所有访问该页面的用户都面临信息泄漏的可能，其中也包括了Web服务器的管理员。其攻击过程如下：<br>Bob拥有一个Web站点，该站点允许用户发布信息/浏览已发布的信息。<br>Charly注意到Bob的站点具有类型C的XSS漏洞。<br>Charly发布一个热点信息，吸引其它用户纷纷阅读。<br>Bob或者是任何的其他人如Alice浏览该信息，其会话cookies或者其它信息将被Charly盗走。</p>\n<p>类型A直接威胁用户个体，而类型B和类型C所威胁的对象都是企业级Web应用。</p>\n<h2 id=\"防御技术\"><a href=\"#防御技术\" class=\"headerlink\" title=\"防御技术\"></a>防御技术</h2><p>1、从url中获取的信息，渲染在页面，由后端获取，在前端转义后再行输出。<br>2、对于XSS的预防自然也是对提交数据的过滤，另外还有一点——谨慎返回用户提交的内容！</p>\n<h1 id=\"CSRF（cross-site-request-forgery）跨站请求伪造\"><a href=\"#CSRF（cross-site-request-forgery）跨站请求伪造\" class=\"headerlink\" title=\"CSRF（cross-site request forgery）跨站请求伪造\"></a>CSRF（cross-site request forgery）跨站请求伪造</h1><p>CSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常不同，XSS利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求来利用受信任的网站。与XSS攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性。</p>\n<h2 id=\"示例特性\"><a href=\"#示例特性\" class=\"headerlink\" title=\"示例特性\"></a>示例特性</h2><p>攻击通过在授权用户访问的页面中包含链接或者脚本的方式工作。例如：一个网站用户Bob可能正在浏览聊天论坛，而同时另一个用户Alice也在此论坛中，并且后者刚刚发布了一个具有Bob银行链接的图片消息。设想一下，Alice编写了一个在Bob的银行站点上进行取款的form提交的链接，并将此链接作为图片src。如果Bob的银行在cookie中保存他的授权信息，并且此cookie没有过期，那么当Bob的浏览器尝试装载图片时将提交这个取款form和他的cookie，这样在没经Bob同意的情况下便授权了这次事务。<br>CSRF是一种依赖web浏览器的、被混淆过的代理人攻击（deputy attack）。在上面银行示例中的代理人是Bob的web浏览器，它被混淆后误将Bob的授权直接交给了Alice使用。<br>下面是CSRF的常见特性：<br>依靠用户标识危害网站<br>利用网站对用户标识的信任<br>欺骗用户的浏览器发送HTTP请求给目标站点<br>另外可以通过IMG标签会触发一个GET请求，可以利用它来实现CSRF攻击。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"http://a.com/transaction\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"hack\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"to\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"hacker_account\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"value\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"100000\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"hack\"</span>).submit();</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"相关威胁\"><a href=\"#相关威胁\" class=\"headerlink\" title=\"相关威胁\"></a>相关威胁</h2><p>贴图只是GET的方式，很多时候我们需要伪造POST的请求。一个办法是利用跨站，当然目标站点可能不存在跨站，这个时候我们可以从第三方网站发动攻击。<br>比如我要攻击一个存在问题的blog，那就先去目标blog留言，留下一个网址，诱其主人点击过来（这个就要看你的忽悠本事咯:p），然后构造个HTML表单提交些数据过去。<br>多窗口浏览器就帮了一点忙。<br>多窗口浏览器（firefox、遨游、MyIE……）便捷的同时也带来了一些问题，因为多窗口浏览器新开的窗口是具有当前所有会话的。即我用IE登陆了我的Blog，然后我想看新闻了，又运行一个IE进程，这个时候两个IE窗口的会话是彼此独立的，从看新闻的IE发送请求到Blog不会有我登录的cookie；但是多窗口浏览器永远都只有一个进程，各窗口的会话是通用的，即看新闻的窗口发请求到Blog是会带上我在blog登录的cookie。<br>想一想，当我们用鼠标在Blog/BBS/WebMail点击别人留下的链接的时候，说不定一场精心准备的CSRF攻击正等着我们。</p>\n<h2 id=\"防范措施\"><a href=\"#防范措施\" class=\"headerlink\" title=\"防范措施\"></a>防范措施</h2><p>对于web站点，将持久化的授权方法（例如cookie或者HTTP授权）切换为瞬时的授权方法（在每个form中提供隐藏field），这将帮助网站防止这些攻击。一种类似的方式是在form中包含秘密信息、用户指定的代号作为cookie之外的验证。<br>另一个可选的方法是“双提交”cookie。此方法只工作于Ajax请求，但它能够作为无需改变大量form的全局修正方法。如果某个授权的cookie在form post之前正被JavaScript代码读取，那么限制跨域规则将被应用。如果服务器需要在Post请求体或者URL中包含授权cookie的请求，那么这个请求必须来自于受信任的域，因为其它域是不能从信任域读取cookie的。<br>与通常的信任想法相反，使用Post代替Get方法并不能提供卓有成效的保护。因为JavaScript能使用伪造的POST请求。尽管如此，那些导致对安全产生“副作用”的请求应该总使用Post方式发送。Post方式不会在web服务器和代理服务器日志中留下数据尾巴，然而Get方式却会留下数据尾巴。<br>尽管CSRF是web应用的基本问题，而不是用户的问题，但用户能够在缺乏安全设计的网站上保护他们的帐户：通过在浏览其它站点前登出站点或者在浏览器会话结束后清理浏览器的cookie。<br>给所有请求加上 token 检查。token 一般是随机字符串，只需确保其不可预测性即可。token 可以在 QueryString、POST body 甚至是 Custom Header 里，但千万不能在 Cookies 里。</p>\n<h1 id=\"会话劫持\"><a href=\"#会话劫持\" class=\"headerlink\" title=\"会话劫持\"></a>会话劫持</h1><p>百度百科有个很有意思的引喻——“在现实生活中，比如你去市场买菜，在交完钱后你要求先去干一些别的事情，稍候再来拿菜；如果这个时候某个陌生人要求把菜拿走，卖菜的人会把菜给陌生人吗？”</p>\n<p>这个比喻很有意思，我们常规访问一个http网站时是与其服务器建立了一次HTTP会话。假设你宿舍楼的“朋友”都跟你处于同一个子网上，其中有人想伪装成你来劫持你的HTTP会话，那么服务器会把菜，哦不，是信息返回给那个人吗？</p>\n<p>答案是肯定的，因为HTTP会话并不安全。它在经过TCP/IP协议封装传输数据时，在传输的数据的每一个字节中插入一个32位的序列号码，这个序列号用来保持跟踪数据和提供可靠性（序列号是依循数据顺序逐步递增的）。第三方攻击者可以通过嗅探的方式来获取用户与服务器通讯中的报文信息，如果他能猜测到数据中的序列号，那便能把合法的用户断开，伪装成合法用户让自己控制后续的通话。</p>\n<p>对于会话劫持的预防，可以走SSH协议、增强网络安全系统健壮性，也可以使用无序的UUID来替代通讯中的序列号码（而非逐步递增）。</p>\n<h1 id=\"控制台注入代码\"><a href=\"#控制台注入代码\" class=\"headerlink\" title=\"控制台注入代码\"></a>控制台注入代码</h1><p>黑客会诱骗用户去往控制台里面粘贴东西（欺负小白用户不懂代码），比如可以在朋友圈贴个什么文章，说:”只要访问天猫，按下F12并且粘贴以下内容，则可以获得xx元礼品”之类的，那么有的用户真的会去操作，并且自己隐私被暴露了也不知道。</p>\n","categories":[],"tags":["web"]},{"title":"react学习笔记","url":"http://yoursite.com/2017/04/14/react学习笔记/","content":"<p>记录一些好的实践、性能优化。</p>\n<a id=\"more\"></a>\n<p>React特点：</p>\n<ol>\n<li>“轻”；react是很轻量的框架 </li>\n<li>速度快，效率高；真正Dom其实是很巨大的，直接操作Dom很耗性能。React引入virtual dom概念，它不直接操作Dom而是将Dom结构存储在内存中，然后通过render中返回的内容做一个Dom Diff的比较，再将变化反映到Dom做局部更新。 </li>\n<li>组件化思想；利用React可以轻松构建所需要的组件，并且各组件之间可轻易的组合，使得代码重用及各模块之间的测试变得更加简单。 </li>\n<li>单向式响应数据流；React实现了单向式相应数据流，使得数据交互变得非常简易清晰，减少了许多重复代码，比传统的数据绑定简单。</li>\n</ol>\n<h1 id=\"React知识点\"><a href=\"#React知识点\" class=\"headerlink\" title=\"React知识点\"></a>React知识点</h1><p><strong>ReactJS Lifecycle Methods(Context)</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">constructor(props, context)</div><div class=\"line\"></div><div class=\"line\">componentWillReceiveProps(nextProps, nextContext)</div><div class=\"line\"></div><div class=\"line\">shouldComponentUpdate(nextProps, nextState, nextContext)</div><div class=\"line\"></div><div class=\"line\">componentWillUpdate(nextProps, nextState, nextContext)</div><div class=\"line\"></div><div class=\"line\">componentDidUpdate(prevProps, prevState, PrevContext)</div></pre></td></tr></table></figure>\n<p><strong>Mounting</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">constructor</span>()</div><div class=\"line\"></div><div class=\"line\">componentWillMount()</div><div class=\"line\"></div><div class=\"line\">render()</div><div class=\"line\"></div><div class=\"line\">componentDidMount()</div></pre></td></tr></table></figure>\n<p><strong>Updating</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">componentWillReceiveProps(nextProps, nextContext)</div><div class=\"line\"></div><div class=\"line\">shouldComponentUpdate(nextProps, nextState, nextContext)</div><div class=\"line\"></div><div class=\"line\">componentWillUpdate(nextProps, nextState, nextContext)</div><div class=\"line\"></div><div class=\"line\">render()</div><div class=\"line\"></div><div class=\"line\">componentDidUpdate(prevProps, prevState, PrevContext)</div></pre></td></tr></table></figure>\n<p><strong>UnMount</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">componentWillUnmount()</div></pre></td></tr></table></figure>\n<p><strong>在生命周期中的哪一步你应该发起 AJAX 请求</strong></p>\n<p>我们应当将AJAX 请求放到 componentDidMount 函数中执行，主要原因有下：</p>\n<ul>\n<li><p>React 下一代调和算法 Fiber 会通过开始或停止渲染的方式优化应用性能，其会影响到 componentWillMount 的触发次数。对于 componentWillMount 这个生命周期函数的调用次数会变得不确定，React 可能会多次频繁调用 componentWillMount。如果我们将 AJAX 请求放到 componentWillMount 函数中，那么显而易见其会被触发多次，自然也就不是好的选择。</p>\n</li>\n<li><p>如果我们将 AJAX 请求放置在生命周期的其他函数中，我们并不能保证请求仅在组件挂载完毕后才会要求响应。如果我们的数据请求在组件挂载之前就完成，并且调用了setState函数将数据添加到组件状态中，对于未挂载的组件则会报错。而在 componentDidMount 函数中进行 AJAX 请求则能有效避免这个问题。</p>\n</li>\n</ul>\n<p><strong>优化关键：shouldComponentUpdate</strong></p>\n<p>shouldComponentUpdate 允许我们手动地判断是否要进行组件更新，根据组件的应用场景设置函数的合理返回值能够帮我们避免不必要的更新。</p>\n<p><strong>调用 setState 之后发生了什么？</strong></p>\n<p>在代码中调用setState函数之后，React 会将传入的参数对象与组件当前的状态合并，然后触发所谓的调和过程（Reconciliation）。经过调和过程，React 会以相对高效的方式根据新的状态构建 React 元素树并且着手重新渲染整个UI界面。在 React 得到元素树之后，React 会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重渲染。在差异计算算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了按需更新，而不是全部重新渲染。</p>\n<p><strong>React 中 Element 与 Component 的区别是？</strong></p>\n<p>简单而言，React Element 是描述屏幕上所见内容的数据结构，是对于 UI 的对象表述。典型的 React Element 就是利用 JSX 构建的声明式代码片然后被转化为createElement的调用组合。而 React Component 则是可以接收参数输入并且返回某个 React Element 的函数或者类。更多介绍可以参考<a href=\"http://link.zhihu.com/?target=https%3A//tylermcginnis.com/react-elements-vs-react-components/\" target=\"_blank\" rel=\"external\">React Elements vs React Components</a>。</p>\n<p><strong>在什么情况下你会优先选择使用 Class Component 而不是 Functional Component？</strong></p>\n<p>在组件需要包含内部状态或者使用到生命周期函数的时候使用 Class Component ，否则使用函数式组件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">count</span>: props.initialCount&#125;;</div><div class=\"line\">    <span class=\"keyword\">this</span>.tick = <span class=\"keyword\">this</span>.tick.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  tick() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">count</span>: <span class=\"keyword\">this</span>.state.count + <span class=\"number\">1</span>&#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.tick&#125;</span>&gt;</span></span></div><div class=\"line\">        Clicks: &#123;this.state.count&#125;</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Counter.propTypes = &#123; <span class=\"attr\">initialCount</span>: React.PropTypes.number &#125;;</div><div class=\"line\">Counter.defaultProps = &#123; <span class=\"attr\">initialCount</span>: <span class=\"number\">0</span> &#125;;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">const HelloMessage = (props) =&gt; &lt;div&gt;Hello, &#123;props.name&#125;&lt;/div&gt;;</div><div class=\"line\">HelloMessage.propTypes = &#123;</div><div class=\"line\">  name: React.PropTypes.string</div><div class=\"line\">&#125;</div><div class=\"line\">HelloMessage.defaultProps = &#123;</div><div class=\"line\">  name: 'John Doe'</div><div class=\"line\">&#125;</div><div class=\"line\">ReactDOM.render(&lt;HelloMessage name=\"Mădălina\"/&gt;, mountNode);</div></pre></td></tr></table></figure>\n<p><strong>React 中 refs 的作用</strong></p>\n<p>Refs 是 React 提供给我们的安全访问 DOM 元素或者某个组件实例的句柄。我们可以为元素添加ref属性然后在回调函数中接受该元素在 DOM 树中的句柄，该值会作为回调函数的第一个参数返回：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">render: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> (</div><div class=\"line\">     &lt;TextInput</div><div class=\"line\">       ref=&#123;function(input) &#123;</div><div class=\"line\">         if (input != null) &#123;</div><div class=\"line\">           input.focus();</div><div class=\"line\">         &#125;</div><div class=\"line\">       &#125;&#125; /&gt;</div><div class=\"line\">   );</div><div class=\"line\"> &#125;,</div><div class=\"line\"></div><div class=\"line\"> // or using an es6 arrow function:</div><div class=\"line\"></div><div class=\"line\"> render: function() &#123;</div><div class=\"line\">   return &lt;TextInput ref=&#123;(c) =&gt; this._input = c&#125; /&gt;;</div><div class=\"line\"> &#125;,</div><div class=\"line\"> componentDidMount: function() &#123;</div><div class=\"line\">   this._input.focus();</div><div class=\"line\"> &#125;,</div></pre></td></tr></table></figure>\n<p><strong>React 中 keys 的作用</strong></p>\n<p>Keys 是 React 用于追踪哪些列表中元素被修改、被添加或者被移除的辅助标识。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">render () &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></div><div class=\"line\">      &#123;this.state.todoItems.map((&#123;task, uid&#125;) =&gt; &#123;</div><div class=\"line\">        return <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;uid&#125;</span>&gt;</span>&#123;task&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      &#125;)&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在开发过程中，我们需要保证某个元素的 key 在其同级元素中具有唯一性。在 React Diff 算法中 React 会借助元素的 Key 值来判断该元素是新近创建的还是被移动而来的元素，从而减少不必要的元素重渲染。此外，React 还需要借助 Key 值来判断元素与本地状态的关联关系，因此我们绝不可忽视转换函数中 Key 的重要性。</p>\n<p><strong>React 中this.props.children的用法</strong></p>\n<p>回调渲染模式（Render Callback Pattern）。这种模式中，组件会接收某个函数作为其子组件，然后在渲染函数中以props.children进行调用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Twitter username=<span class=\"string\">'tylermcginnis33'</span>&gt;</div><div class=\"line\">  &#123;(user) =&gt; user === <span class=\"literal\">null</span></div><div class=\"line\">    ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Loading</span> /&gt;</span></span></div><div class=\"line\">    : <span class=\"tag\">&lt;<span class=\"name\">Badge</span> <span class=\"attr\">info</span>=<span class=\"string\">&#123;user&#125;</span> /&gt;</span>&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Twitter</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component, PropTypes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> fetchUser <span class=\"keyword\">from</span> <span class=\"string\">'twitter'</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Twitter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  state = &#123;</div><div class=\"line\">    <span class=\"attr\">user</span>: <span class=\"literal\">null</span>,</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">static</span> propTypes = &#123;</div><div class=\"line\">    <span class=\"attr\">username</span>: PropTypes.string.isRequired,</div><div class=\"line\">  &#125;</div><div class=\"line\">  componentDidMount () &#123;</div><div class=\"line\">    fetchUser(<span class=\"keyword\">this</span>.props.username)</div><div class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> <span class=\"keyword\">this</span>.setState(&#123;user&#125;))</div><div class=\"line\">  &#125;</div><div class=\"line\">  render () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.props.children(<span class=\"keyword\">this</span>.state.user)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种模式的优势在于将父组件与子组件解耦和，父组件可以直接访问子组件的内部状态而不需要再通过Props传递，这样父组件能够更为方便地控制子组件展示的UI界面。譬如产品经理让我们将原本展示的Badge替换为Profile，我们可以轻易地修改下回调函数即可：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Twitter username=<span class=\"string\">'tylermcginnis33'</span>&gt;</div><div class=\"line\">  &#123;(user) =&gt; user === <span class=\"literal\">null</span></div><div class=\"line\">    ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Loading</span> /&gt;</span></span></div><div class=\"line\">    : <span class=\"tag\">&lt;<span class=\"name\">Profile</span> <span class=\"attr\">info</span>=<span class=\"string\">&#123;user&#125;</span> /&gt;</span>&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Twitter</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>Controlled Component 与 Uncontrolled Component 之间的区别</strong></p>\n<p>React 的核心组成之一就是能够维持内部状态的自治组件，不过当我们引入原生的HTML表单元素时（input,select,textarea 等），我们是否应该将所有的数据托管到 React 组件中还是将其仍然保留在 DOM 元素中呢？这个问题的答案就是受控组件与非受控组件的定义分割。受控组件（Controlled Component）代指那些交由 React 控制并且所有的表单数据统一存放的组件。譬如下面这段代码中username变量值并没有存放到DOM元素中，而是存放在组件状态数据中。任何时候我们需要改变username变量值时，我们应当调用setState函数进行修改。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ControlledForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  state = &#123;</div><div class=\"line\">    <span class=\"attr\">username</span>: <span class=\"string\">''</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  updateUsername = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">      <span class=\"attr\">username</span>: e.target.value,</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">  handleSubmit = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;</div><div class=\"line\">  render () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">onSubmit</span>=<span class=\"string\">&#123;this.handleSubmit&#125;</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span></span></div><div class=\"line\">          <span class=\"attr\">type</span>=<span class=\"string\">'text'</span></div><div class=\"line\">          <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state.username&#125;</span></div><div class=\"line\">          <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.updateUsername&#125;</span> /&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">'submit'</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>而非受控组件（Uncontrolled Component）则是由DOM存放表单数据，并非存放在 React 组件中。我们可以使用 refs 来操控DOM元素：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnControlledForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  handleSubmit = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Input Value: \"</span>, <span class=\"keyword\">this</span>.input.value)</div><div class=\"line\">  &#125;</div><div class=\"line\">  render () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">onSubmit</span>=<span class=\"string\">&#123;this.handleSubmit&#125;</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span></span></div><div class=\"line\">          <span class=\"attr\">type</span>=<span class=\"string\">'text'</span></div><div class=\"line\">          <span class=\"attr\">ref</span>=<span class=\"string\">&#123;(input)</span> =&gt; this.input = input&#125; /&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">'submit'</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>竟然非受控组件看上去更好实现，我们可以直接从 DOM 中抓取数据，而不需要添加额外的代码。不过实际开发中我们并不提倡使用非受控组件，因为实际情况下我们需要更多的考虑表单验证、选择性的开启或者关闭按钮点击、强制输入格式等功能支持，而此时我们将数据托管到 React 中有助于我们更好地以声明式的方式完成这些功能。引入 React 或者其他 MVVM 框架最初的原因就是为了将我们从繁重的直接操作 DOM 中解放出来。</p>\n<p><strong>setState使用</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 基本使用</span></div><div class=\"line\"><span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">username</span>: <span class=\"string\">'tylermcginnis33'</span> &#125;)</div><div class=\"line\"><span class=\"comment\">// 完成回调</span></div><div class=\"line\"><span class=\"keyword\">this</span>.setState(</div><div class=\"line\">  &#123; <span class=\"attr\">username</span>: <span class=\"string\">'tylermcginnis33'</span> &#125;,</div><div class=\"line\">  () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'setState has finished and the component has re-rendered.'</span>)</div><div class=\"line\">)</div><div class=\"line\"><span class=\"comment\">// 状态针</span></div><div class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prevState, props</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;<span class=\"attr\">showForm</span>: !prevState.showForm&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong><a href=\"http://reactjs.cn/react/docs/animation.html\" target=\"_blank\" rel=\"external\">Animation</a></strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">render: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> items = <span class=\"keyword\">this</span>.state.items.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, i</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;item&#125;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleRemove.bind(this,</span> <span class=\"attr\">i</span>)&#125;&gt;</span></span></div><div class=\"line\">        &#123;item&#125;</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;.bind(<span class=\"keyword\">this</span>));</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleAdd&#125;</span>&gt;</span>Add Item<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">ReactCSSTransitionGroup</span> <span class=\"attr\">transitionName</span>=<span class=\"string\">\"example\"</span> <span class=\"attr\">transitionEnterTimeout</span>=<span class=\"string\">&#123;500&#125;</span> <span class=\"attr\">transitionLeaveTimeout</span>=<span class=\"string\">&#123;300&#125;</span>&gt;</span></div><div class=\"line\">        &#123;items&#125;</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ReactCSSTransitionGroup</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.example-enter</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0.01</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.example-enter</span><span class=\"selector-class\">.example-enter-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"attribute\">transition</span>: opacity <span class=\"number\">500ms</span> ease-in;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.example-leave</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.example-leave</span><span class=\"selector-class\">.example-leave-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0.01</span>;</div><div class=\"line\">  <span class=\"attribute\">transition</span>: opacity <span class=\"number\">300ms</span> ease-in;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>概述下 React 中的事件处理逻辑</strong></p>\n<p>为了解决跨浏览器兼容性问题，React 会将浏览器原生事件（Browser Native Event）封装为合成事件（SyntheticEvent）传入设置的事件处理器中。这里的合成事件提供了与原生事件相同的接口，不过它们屏蔽了底层浏览器的细节差异，保证了行为的一致性。另外有意思的是，React 并没有直接将事件附着到子元素上，而是以单一事件监听器的方式将所有的事件发送到顶层进行处理。这样 React 在更新 DOM 的时候就不需要考虑如何去处理附着在 DOM 上的事件监听器，最终达到优化性能的目的。</p>\n<p><a href=\"http://reactjs.cn/react/docs/events.html\" target=\"_blank\" rel=\"external\">Event System</a></p>\n<p><strong>createElement 与 cloneElement 的区别</strong></p>\n<p>createElement 函数是 JSX 编译之后使用的创建 React Element 的函数，而 cloneElement 则是用于复制某个元素并传入新的 Props。</p>\n<h1 id=\"React性能优化-amp-最佳实践\"><a href=\"#React性能优化-amp-最佳实践\" class=\"headerlink\" title=\"React性能优化 &amp; 最佳实践\"></a>React性能优化 &amp; 最佳实践</h1><h2 id=\"Immutable\"><a href=\"#Immutable\" class=\"headerlink\" title=\"Immutable\"></a>Immutable</h2><p><a href=\"http://facebook.github.io/immutable-js/\" target=\"_blank\" rel=\"external\">Immutable.js</a></p>\n<p><a href=\"https://github.com/camsong/blog/issues/3\" target=\"_blank\" rel=\"external\">Immutable 详解及 React 中实践</a></p>\n<p>结合 shouldComponentUpdate()</p>\n<h2 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h2><p><a href=\"https://www.zhihu.com/question/47995437?sort=created\" target=\"_blank\" rel=\"external\">Redux有哪些最佳实践?</a></p>\n<ol>\n<li>action creators和reducer请用pure函数，不要副作用。</li>\n<li>immutable.js配合效果很好。</li>\n<li>项目大了请用ducks module <a href=\"https://github.com/erikras/ducks-modular-redux\" target=\"_blank\" rel=\"external\">https://github.com/erikras/ducks-modular-redux</a></li>\n<li>reducer里只存储必要的state, 需要推到的都放到selector里(connect函数的第一个参数)</li>\n<li>reducer和selector请放到一个文件，请记住reducer之间可以compose.</li>\n<li>请善用higher order component. 如果某一项功能是多个组建通用，higher order component往往要比套一层container更灵活。</li>\n<li>请慎重选择组建树的哪一层使用connected component(连接到store)，通常是比较高层的组建用来和store沟通，最低层组建使用这防止太长的prop chain.</li>\n<li>项目大了之后请用<strong><a href=\"http://leonshi.com/redux-saga-in-chinese/index.html\" target=\"_blank\" rel=\"external\">redux-saga</a></strong>或者<strong><a href=\"https://github.com/redux-observable/redux-observable\" target=\"_blank\" rel=\"external\">redux-observables</a></strong></li>\n<li>请慎用自定义的redux-middleware,错误的配置可能会影响到其他middleware.</li>\n</ol>\n<h1 id=\"React-Diff\"><a href=\"#React-Diff\" class=\"headerlink\" title=\"React Diff\"></a>React Diff</h1><p><a href=\"http://www.infoq.com/cn/articles/react-dom-diff/\" target=\"_blank\" rel=\"external\">深入浅出React（四）：虚拟DOM Diff算法解析</a></p>\n<ul>\n<li>不同节点直接删除</li>\n<li>逐层节点比较，先消除，在重新创建</li>\n</ul>\n<p>理解diff让我们更好的理解生命周期。</p>\n<h1 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h1><p><a href=\"https://github.com/erikras/react-redux-universal-hot-example\" target=\"_blank\" rel=\"external\">react-redux-universal-hot-example</a> 一个使用全面技术的例子</p>\n","categories":[],"tags":[]},{"title":"前端性能优化","url":"http://yoursite.com/2017/04/13/前端性能优化/","content":"<p>前端性能优化笔记</p>\n<a id=\"more\"></a>\n<h1 id=\"性能优化核心关注点\"><a href=\"#性能优化核心关注点\" class=\"headerlink\" title=\"性能优化核心关注点\"></a>性能优化核心关注点</h1><p>对普通的网站有一个统一的思路，就是尽量向<strong>前端优化、减少数据库操作、减少磁盘IO</strong>。<br>向前端优化指的是，在不影响功能和体验的情况下，能在浏览器执行的不要在服务端执行，能在缓存服务器上直接返回的不要到应用服务器，程序能直接取得的结果不要到外部取得，本机内能取得的数据不要到远程取，内存能取到的不要到磁盘取，缓存中有的不要去数据库查询。<br>减少数据库操作指减少更新次数、缓存结果减少查询次数、将数据库执行的操作尽可能的让你的程序完成（例如join查询），减少磁盘IO指尽量不使用文件系统作为缓存、减少读写文件次数等。程序优化永远要优化慢的部分，换语言是无法“优化”的。</p>\n<h1 id=\"图片优化\"><a href=\"#图片优化\" class=\"headerlink\" title=\"图片优化\"></a>图片优化</h1><h2 id=\"CSS代替图片\"><a href=\"#CSS代替图片\" class=\"headerlink\" title=\"CSS代替图片\"></a>CSS代替图片</h2><p>直接使用CSS替代图片来实现修饰效果吧！如半透明、边框、圆角、阴影、渐变等，在当前主流浏览器中都可以用CSS达成。将来CSS滤镜得到广泛支持后，还可以做到alpha混合、正片叠底等各种效果。</p>\n<h2 id=\"使用矢量图替代位图\"><a href=\"#使用矢量图替代位图\" class=\"headerlink\" title=\"使用矢量图替代位图\"></a>使用矢量图替代位图</h2><p>对于绝大多数图案、图标等，矢量图更小，且可缩放而无需生成多套图。现在主流浏览器都支持SVG了，所以可放心使用！</p>\n<h2 id=\"使用data-url\"><a href=\"#使用data-url\" class=\"headerlink\" title=\"使用data url\"></a>使用data url</h2><p>资源内嵌于CSS或HTML中，而不必单独请求。注意，多个地方都要使用的资源不一定适合用此优化方式，因为图片数据重复多了，增加流量。另外许多浏览器对data url有长度限制，注意资源的大小。</p>\n<h2 id=\"按照HTTP协议设置合理的缓存\"><a href=\"#按照HTTP协议设置合理的缓存\" class=\"headerlink\" title=\"按照HTTP协议设置合理的缓存\"></a>按照HTTP协议设置合理的缓存</h2><p>具体的缓存策略（如永久缓存+重命名）、部署策略（如反向代理、CDN等）这里就不展开了。</p>\n<h2 id=\"资源的lazyload或postpone\"><a href=\"#资源的lazyload或postpone\" class=\"headerlink\" title=\"资源的lazyload或postpone\"></a>资源的lazyload或postpone</h2><p>（lazyload：延迟到其他资源下载完成后再加载，postpone：延迟到元素可见再加载。）目前基本上都要用脚本控制。未来HTML和CSS会增加相关的控制属性</p>\n<h2 id=\"资源的prefetch\"><a href=\"#资源的prefetch\" class=\"headerlink\" title=\"资源的prefetch\"></a>资源的prefetch</h2><p>可用<link rel=\"prefetch\">，见<a href=\"http://www.whatwg.org/specs/web-apps/current-work/#link-type-prefetch。注意prefetch只是hint，Firefox会预取资源（如果网络空闲的话），而IE\" target=\"_blank\" rel=\"external\">http://www.whatwg.org/specs/web-apps/current-work/#link-type-prefetch。注意prefetch只是hint，Firefox会预取资源（如果网络空闲的话），而IE</a> 9则是对该资源的hostname进行DNS预解析。如果你真的需要更强的控制，则得用脚本。注意：Chrome支持与prefetch相近但更进一步的<link rel=\"prerender\">，另外SPDY加入了与prefetch相近但语义不同的subresource link支持，这两个新特性我也没用过，有兴趣的可以尝试。</p>\n<p>图片的其他优化技巧如字体图标、CSS Sprites等，不过我不推荐。用字体图标不如用SVG。使用了SPDY和data url后，CSS Sprites完全没有必要用了。</p>\n<h2 id=\"responsive设计\"><a href=\"#responsive设计\" class=\"headerlink\" title=\"responsive设计\"></a>responsive设计</h2><p>可能要产生多套不同大小和分辨率的图片，配合media query、以及srcset属性、picture元素、src-N等标准提案。</p>\n<h2 id=\"使用恰当的图片格式\"><a href=\"#使用恰当的图片格式\" class=\"headerlink\" title=\"使用恰当的图片格式\"></a>使用恰当的图片格式</h2><p>我们常见的图片格式有JPEG、GIF、PNG。基本上，内容图片多为照片之类的，适用于JPEG。而修饰图片通常更适合用无损压缩的PNG。而GIF基本上除了GIF动画外不要使用。且动画的话，也更建议用video元素和视频格式，或用SVG动画取代。除了这些格式之外，Chrome、新版Opera、Android 4+支持WebP格式，IE 9+、IE mobile 10+支持JPEG XR。这两个新格式都支持无损和有损压缩，都具有更良好的压缩比。当然这需要为不同的浏览器返回不同的图片，增加了开发成本，也增加存储成本。不过你省了流量或者相同流量下改善了图片质量，提升了用户体验。你会如何取舍呢？对了，别忘了使用优秀的图片编码器及合适的参数。好的图片编码器，尤其是有损图片格式的编码器，能通过算法或手动调整，获得更高的压缩比。</p>\n<p>作者：贺师俊<br>链接：<a href=\"https://www.zhihu.com/question/21815101/answer/19410993\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/21815101/answer/19410993</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h2 id=\"使用“渐进”图片或“交错”图片\"><a href=\"#使用“渐进”图片或“交错”图片\" class=\"headerlink\" title=\"使用“渐进”图片或“交错”图片\"></a>使用“渐进”图片或“交错”图片</h2><p>JPEG、GIF和PNG这三种图像格式都提供了一种功能，让图像能够更快地显示。图像可以以一种特殊方式存储，显示时先大概显示图像的草图，当文件全部下载后再填充细节（百度图片，QQ空间，点点网等显示大图时都使用的这种方式）。这起到一种很有意义的心理效果，因为这样使人们有东西可看，而不必坐着干等大型图像慢慢显示在屏幕上。但这种效果并不是所有浏览器都支持。</p>\n<p>在测试各个浏览器（未说明都为最新版本）时发现：</p>\n<p>　　1、Chrome对“渐进”和“交错”都支持良好</p>\n<p>　　2、Safari(PC/MAC)对“渐进”不支持，“交错支持良好”</p>\n<p>　　3、Fiefox对“渐进”和“交错”都支持良好</p>\n<p>　　4、Opera对“渐进”和“交错”都支持良好</p>\n<p>　　5、IE9对“渐进”和“交错”都不支持</p>\n<p>图一：基本显示效果演示<br><img src=\"./R1.GIF\" alt=\"\"></p>\n<p>图二：渐进\\交错显示效果演示<br><img src=\"./R2.GIF\" alt=\"\"></p>\n<p>上图一：</p>\n<p>　　图一中我们可以发现图片是从上倒下一条一条逐渐加载的，显示效果如图一的这种JPG压缩模式叫做顺序式编码（Sequential Encoding），一次将图像由左到右、由上到下顺序处理。也是一种常见的JPG编码模式。</p>\n<p>上图二：</p>\n<p>　　图二中我们可以发现同样是一样图片，因为图片较大图，要逐渐加载完我们才知道这张图片的大致轮廓，但是在图二上，由于使用了渐进式JPG格式，在图片加载的时候我们已经可以看到了图片的大致轮廓，这种就是渐进式JPG，使用了递增式编码（Progressive Encoding）。</p>\n<p>所以</p>\n<p>　　所谓的渐进式JPG格式就是采用了递增式编码的JPG，你可以通过谷歌搜索关键字JPG Progressive Encoding查的更多英文的资料，因为我发现国内这方面的介绍不是很多。</p>\n<p>这种JPG格式是当图像传输的时间较长时，可将图像分数次处理，以从模糊到清晰的方式来传送图像（效果类似GIF在网络上的传输）。</p>\n<p>二、渐进式JPEG创建</p>\n<ol>\n<li>PHP转换<br>2.photoshop中有个“存储为web所用格式”，连续勾选就是渐进式JPEG图片</li>\n</ol>\n<h1 id=\"CSS优化\"><a href=\"#CSS优化\" class=\"headerlink\" title=\"CSS优化\"></a>CSS优化</h1><h2 id=\"CSS-优化主要是四个方面：\"><a href=\"#CSS-优化主要是四个方面：\" class=\"headerlink\" title=\"CSS 优化主要是四个方面：\"></a>CSS 优化主要是四个方面：</h2><p><strong>加载性能</strong><br>这个方面相关的 best practice 太多了，网上随便找一找就是一堆资料，比如不要用 import 、多用继承熟悉啊，压缩啊等等，主要是从减少文件体积、减少阻塞加载、提高并发方面入手的，任何 hint 都逃不出这几个大方向。<br><strong>选择器性能</strong><br>可以参考 GitHub 的这个分享 <a href=\"https://speakerdeck.com/jonrohan/githubs-css-performance，但\" target=\"_blank\" rel=\"external\">https://speakerdeck.com/jonrohan/githubs-css-performance，但</a> selector 的对整体性能的影响可以忽略不计了，selector 的考察更多是规范化和可维护性、健壮性方面，很少有人在实际工作当中会把选择器性能作为重点关注对象的，但也像 GitHub 这个分享里面说的一样——知道总比不知道好。<br><strong>渲染性能</strong><br>渲染性能是 CSS 优化最重要的关注对象。页面渲染 junky 过多？看看是不是大量使用了 text-shadow？是不是开了字体抗锯齿？CSS 动画怎么实现的？合理利用 GPU 加速了吗？什么你用了 Flexible Box Model？有没有测试换个 layout 策略对 render performance 的影响？这个方面搜索一下 CSS render performance 或者 <a href=\"http://www.w3cplus.com/animation/animation-performance.html\" target=\"_blank\" rel=\"external\">CSS animation performance</a> 也会有一堆一堆的资料可供参考。<br><strong>可维护性、健壮性</strong><br>命名合理吗？结构层次设计是否足够健壮？对样式进行抽象复用了吗？优雅的 CSS 不仅仅会影响后期的维护成本，也会对加载性能等方面产生影响。这方面可以多找一些 OOCSS（不是说就要用 OOCSS，而是说多了解一下）等等不同 CSS Strategy 的信息，取长补短。</p>\n<h2 id=\"Css-Lint提到的规则\"><a href=\"#Css-Lint提到的规则\" class=\"headerlink\" title=\"Css Lint提到的规则\"></a>Css Lint提到的规则</h2><p><strong><em>修复解析错误（Parsing errors should be fixed）</em></strong><br>避免使用多类选择符（Don’t use adjoining classes）<br>IE6以及更古老的浏览器对类似.foo.bar的多类选择符解析不正确，参考IE6下的多类选择符一文。 </p>\n<p><strong><em>移除空的css规则（Remove empty rules）</em></strong><br>这个规则不包含任何属性，类似：.foo { }空规则的产生原因一般来说是为了预留样式。去除这些空规则无疑能减少css文档体积。 </p>\n<p><strong><em>正确使用display的属性（Use correct properties for a display）</em></strong><br>由于display的作用，某些样式组合会无效，徒增样式体积的同时也影响解析性能。CSS Lint会检查一下几点：<br>display:inline后不应该再使用width、height、margin、padding以及float。<br>display:inline-block后不应该再使用float。<br>display:block后不应该再使用vertical-align。<br>display:table-*后不应该再使用margin或者float。 </p>\n<p><strong><em>不滥用浮动（Don’t use too many floats）</em></strong><br>虽然浮动不可避免，但不可否认很多css bug是由于浮动而引起。CSS Lint一旦检测出样式文件中有超过10次的浮动便会提示警告。 </p>\n<p><strong><em>不滥用web字体（Don’t use too many web fonts）</em></strong><br>对于中文网站来说Web Fonts可能很陌生，国外却很流行。web fonts通常体积庞大，而且一些浏览器在下载web fonts时会阻塞页面渲染损伤性能。 </p>\n<p><strong><em>不声明过多的font-size（Don’t use too may font-size declarations）</em></strong><br>这是设计层面的问题，设计精良的页面不会有过多的font-size声明。 </p>\n<p><strong><em>不在选择符中使用ID标识符（Don’t use IDs in selectors）</em></strong><br>主要考虑到样式重用性以及与页面的耦合性。 </p>\n<p><strong><em>不给h1~h6元素定义过多的样式（Don’t qualify headings）</em></strong><br>全站统一定义一遍heading元素即可，若需额外定制样式，可使用其他选择符作为代替。 </p>\n<p><strong><em>不重复定义h1~h6元素（Heading styles should only be defined once）</em></strong></p>\n<p><strong><em>值为0时不需要任何单位（Zero values don’t need units）</em></strong></p>\n<p><strong><em>标准化各种浏览器前缀（Vendor prefixed properties should also have the standard）</em></strong><br>通常将浏览器前缀置于前面，将标准样式属性置于最后，类似：<br>.foo {-moz-border-radius: 5px;border-radius: 5px; } </p>\n<p><strong><em>使用CSS渐变等高级特性，需指定所有浏览器的前缀（CSS gradients require all browser prefixes）</em></strong></p>\n<p><strong><em>避免让选择符看起来像正则表达式（Avoid selectors that look like regular expressions）</em></strong><br>CSS3添加了一些类似~=等复杂属性，也不是所有浏览器都支持，需谨慎使用。 </p>\n<p><strong><em>遵守盒模型规则（Beware of broken box models）</em></strong></p>\n<h2 id=\"CSS方法论\"><a href=\"#CSS方法论\" class=\"headerlink\" title=\"CSS方法论\"></a>CSS方法论</h2><p>什么是CSS方法论呢?简单地说就是一些同行为了提高CSS可维护性、提出的一些编写CSS代码的规范和方法。他们提出了一些概念，这些概念可能听起来很高大上，但是实际你平时可能不知不觉也会用到这些所谓的CSS方法论。下面我简单地介绍下几个比较常见的CSS方法论。</p>\n<p><strong>OOCSS　　</strong><br>OOCSS是(Object Oriented CSS)，顾名思义就是面向对象的CSS。　　<br>OOCSS主要有两个原则：　　<br>1、结构和样式分离　　<br>我们平时一定遇到过这种情况，比如一个页面存在着多个不同功能的按钮，这些按钮的形状大小都差不多，但是根据不同的功能会有不同的颜色或背景来加以区分。如果不进行结构和样式分离，我们的CSS代码可能是这样的<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.btn-primary</span>&#123;　　<span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;　　<span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;　　<span class=\"attribute\">padding</span>:<span class=\"number\">5px</span> <span class=\"number\">3px</span>;　　<span class=\"attribute\">background</span>:<span class=\"number\">#ccc</span>;　　<span class=\"attribute\">color</span>:<span class=\"number\">#000</span>;　　&#125;　　</div><div class=\"line\"><span class=\"selector-class\">.btn-delete</span>&#123;　　<span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;　　<span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;　　<span class=\"attribute\">padding</span>:<span class=\"number\">5px</span> <span class=\"number\">3px</span>;　　<span class=\"attribute\">background</span>:red;　　<span class=\"attribute\">color</span>:<span class=\"number\">#fff</span>;　　&#125;</div></pre></td></tr></table></figure></p>\n<p>这两个或者可能更多的按钮拥有一些不同的样式，但是它们同时拥有相同的大小样式等，我们将其抽象的部分提取出来，结果如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.btn</span>&#123;　　<span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;　　<span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;　　<span class=\"attribute\">padding</span>:<span class=\"number\">5px</span> <span class=\"number\">3px</span>;　　&#125;　　</div><div class=\"line\"><span class=\"selector-class\">.primary</span>&#123;　　<span class=\"attribute\">background</span>:red;　　<span class=\"attribute\">color</span>:<span class=\"number\">#fff</span>;　　&#125;　　</div><div class=\"line\"><span class=\"selector-class\">.delete</span>&#123;　　<span class=\"attribute\">background</span>:red;　　<span class=\"attribute\">color</span>:<span class=\"number\">#fff</span>;　　&#125;</div></pre></td></tr></table></figure></p>\n<p>这样提取公用的样式出来，然后按钮同时引用btn和primary等。这种做法除了减少重复的代码精简CSS之外，还有一个好处是复用性，如果需要增加其他额外的按钮，只需要编写不同的样式，和btn配合使用即可。</p>\n<p>2、容器和内容分离</p>\n<p><strong>SMACSS</strong></p>\n<p>SMACSS是什么呢，它的全称是Scalable and Modular Architecture for<br>CSS。简单说就是可扩展和模块化的CSS架构。</p>\n<p>SMACSS将样式分成5种类型：Base，Layout，Module，State，Theme，我们简单来说说每一种类型分别指什么。</p>\n<p>1、Base　　<br>基础样式表，定义了基本的样式，我们平时写CSS比如reset.css就是属于基础样式表，另外我认为清除浮动，一些动画也可以归类为基础样式。　　<br>2、Layout　　<br>布局样式，用于实现网页的基本布局，搭起整个网页的基本骨架。　　<br>3、Module　　<br>网页中不同的区域有这个不同的功能，这些功能是相对独立的，我们可以称其为模块。模块是独立的，可重用的组件，它们不依赖于布局组件，可以安全的删除修改而不影响其他模块。　　<br>4、State　　<br>状态样式，通常和js一起配合使用，表示某个组件或功能不同的状态，比如菜单选中状态，按钮不可用状态等。　　<br>关于状态样式，我个人觉得要分情况进行讨论：　　<br>(1)不同组件的同一状态的样式是一样的，比如头部的导航菜单的选中状态样式和侧栏的菜单选中状态样式是一样的，我认为这部分状态样式可以归类为State　　<br>(2)不同组件的统一状态的样式是不一样的，即两个地方的菜单虽然都是选中状态，但是他们却又不同的选中样式，这部分样式不应该被认为是State类型，而是应该放在其组件对应的Module中。　　<br>5、Theme　　<br>皮肤样式，对于可更换皮肤的站点来说，这个是很有必要的，分离了结构和皮肤，根据不同的皮肤应用不同的样式文件。</p>\n<p><strong>BEM</strong>　　<br>BEM是Block，Element，Modifier的缩写。下面分别来介绍一下这三个概念：　　<br>(1)Block：在BEM的理论中，一个网页是由block组成的，比如头部是个block，内容是block，logo也是block，一个block可能由几个子block组成。　　<br>(2)Element：element是block的一部分，具有某种功能，element依赖于block，比如在logo中，img是logo的一个element，在菜单中，菜单项是菜单的一个element　　<br>(3)Modifier：modifier是用来修饰block或者element的，它表示block或者element在外观或行为上的改变　　<br>我们通过BEM命名法写样式如下：　　<br>.block{}　　<br>.block-element{}　　<br>.block-modifier{}　　<br>.block-element-modifier{}　　<br>BEM将页面解析为block和element，然后根据不同的状态使用modifier来设置样式。　　<br>我对BEM的思想理解可能不到位，对BEM的看法主要是由两点：　　<br>(1)页面CSS模块化，每个block就是一个模块，模块间相互独立　　<br>(2)多级的class命名，避免选择器的嵌套结构</p>\n<h3 id=\"总结的写CSS代码的一些关键点。\"><a href=\"#总结的写CSS代码的一些关键点。\" class=\"headerlink\" title=\"总结的写CSS代码的一些关键点。　　\"></a>总结的写CSS代码的一些关键点。　　</h3><p>1、写代码之前：从PSD文件出发　　<br>当我们拿到设计师给的PSD时，首先不要急于写CSS代码，首先对整个页面进行分析，主要关注点是下面几个：　　<br>(1)页面分成了几个模块，哪些模块是公用的，常见的比如头部和底部，还有一些菜单栏等等　　<br>(2)分析每一个模块都有什么样式，提取出公用的样式，注意公用样式是全局公用(整个页面公用)还是局部公用(模块内公用)，公用样式包括公用的状态样式，比如公用的选中状态，禁用状态等等。　　<br>2、开始写代码　　<br>根据对PSD文件的分析，我们就可以开始着手写代码，我比较推荐SMACSS将样式分成不同类型的做法：　　<br>(1)第一步是搭好页面的骨架，也就是base样式，layout样式。　　<br>(2)第二步就是依次实现不同的模块，在这里我推荐BEM的命名思想，但是可以嵌套一到两层的选择器结构　　<br>3、优化代码　　<br>我相信当我们完成基本的页面效果后，还是会存在着一些重复的或者不够简洁的代码，这时候就是要去优化这些代码，主要是在提取重复代码，尽可能地精简代码。</p>\n<h1 id=\"JS优化\"><a href=\"#JS优化\" class=\"headerlink\" title=\"JS优化\"></a>JS优化</h1><p>相关 ：Nicholas 《Speed up your JavaScript》</p>\n<ul>\n<li>定义局部变量</li>\n<li>不要使用 with() 语句</li>\n<li>小心使用闭包</li>\n<li>对象属性和数组元素的速度都比变量慢</li>\n<li>不要在数组中挖得太深</li>\n<li>避免 for-in 循环（和基于函数的迭代）<br>这是另一条非常教条的建议：不要使用for-in循环。</li>\n</ul>\n<p>这背后的逻辑非常直接：要遍历一个集合内的元素，你可以使用诸如for循环、或者do-while循环来替代for-in循环，for-in循环不仅仅可能需要遍历额外的数组项，还需要更多的时间。</p>\n<p>为了遍历这些元素，JavaScript需要为每一个元素建立一个函数，这种基于函数的迭代带来了一系列性能问题：额外的函数引入了函数对象被创建和销毁的上下文，将会在作用域链的顶端增加额外的元素。</p>\n<ul>\n<li>在循环时将控制条件和控制变量合并起来</li>\n</ul>\n<h2 id=\"针对DOM问题，Javascript的应对方案\"><a href=\"#针对DOM问题，Javascript的应对方案\" class=\"headerlink\" title=\"针对DOM问题，Javascript的应对方案\"></a>针对DOM问题，Javascript的应对方案</h2><p><strong>核心问题</strong></p>\n<p>当解析的html文件很大时，生成DOM树占用内存较大，同时遍历（不更新）元素耗时也更长。但这都不是重点，DOM的核心问题是：DOM修改导致的页面重绘、重新排版！重新排版是用户阻塞的操作，同时，如果频繁重排，CPU使用率也会猛涨！</p>\n<p>DOM操作会导致一系列的重绘（repaint）、重新排版（reflow）操作。为了确保执行结果的准确性，所有的修改操作是按顺序同步执行的。大部分浏览器都不会在JavaScript的执行过程中更新DOM。相应的，这些浏览器将对对 DOM的操作放进一个队列，并在JavaScript脚本执行完毕以后按顺序一次执行完毕。也就是说，在JavaScript执行的过程，直到发生重新排版，用户一直被阻塞。</p>\n<p>一般的浏览器中（不含IE），repaint的速度远快于reflow，所以避免reflow更重要。</p>\n<p>导致repaint、reflow的操作：</p>\n<ul>\n<li><p>DOM元素的添加、修改（内容）、删除( Reflow + Repaint)</p>\n</li>\n<li><p>仅修改DOM元素的字体颜色（只有Repaint，因为不需要调整布局）</p>\n</li>\n<li><p>应用新的样式或者修改任何影响元素外观的属性</p>\n</li>\n<li><p>Resize浏览器窗口、滚动页面</p>\n</li>\n<li><p>读取元素的某些属性（offsetLeft、offsetTop、offsetHeight、offsetWidth、scrollTop/Left/Width/Height、clientTop/Left/Width/Height、getComputedStyle()、currentStyle(in IE)) </p>\n</li>\n</ul>\n<p>其他<br>某些Javascript框架中，CSS选择器，如：var el = $(‘.hyddd’);由于IE6、7不支持，所以Javascript框架必须通过遍历整个DOM树来寻找对象。</p>\n<p>解决问题的关键是：减少因DOM操作，引起的reflow。Nicholas总结了一些方法：</p>\n<p>在DOM外，执行尽量多的变更操作。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 不好的做法</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; items.length; i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> item = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"li\"</span>);</div><div class=\"line\">    item.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"Option \"</span> + i);</div><div class=\"line\">    list.appendChild(item);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 更好的做法</span></div><div class=\"line\"><span class=\"comment\">// 使用容器存放临时变更， 最后再一次性更新DOM</span></div><div class=\"line\"><span class=\"keyword\">var</span> fragment = <span class=\"built_in\">document</span>.createDocumentFragment();</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; items.length; i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> item = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"li\"</span>);</div><div class=\"line\">    item.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"Option \"</span> + i);</div><div class=\"line\">    fragment.appendChild(item);</div><div class=\"line\">&#125;</div><div class=\"line\">list.appendChild(fragment);</div></pre></td></tr></table></figure></p>\n<p>操作DOM前，先把DOM节点删除或隐藏，因为隐藏的节点不会触发重排。Demo如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">list.style.display = <span class=\"string\">\"none\"</span>;  </div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; items.length; i++)&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> item = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"li\"</span>);  </div><div class=\"line\">    item.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"Option \"</span> + i);  </div><div class=\"line\">    list.appendChild(item);  </div><div class=\"line\">&#125;  </div><div class=\"line\">list.style.display = <span class=\"string\">\"\"</span>;</div></pre></td></tr></table></figure></p>\n<p>一次性，修改样式属性。Demo如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 不好的做法</span></div><div class=\"line\"><span class=\"comment\">// 这种做法会触发多次重排</span></div><div class=\"line\">element.style.backgroundColor = <span class=\"string\">\"blue\"</span>;  </div><div class=\"line\">element.style.color = <span class=\"string\">\"red\"</span>;  </div><div class=\"line\">element.style.fontSize = <span class=\"string\">\"12em\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 更好的做法是，把样式都放在一个class下</span></div><div class=\"line\">.newStyle &#123;  </div><div class=\"line\">    background-color: blue;  </div><div class=\"line\">    color: red;  </div><div class=\"line\">    font-size: <span class=\"number\">12</span>em;  </div><div class=\"line\">&#125;  </div><div class=\"line\">element.className = <span class=\"string\">\"newStyle\"</span>;</div></pre></td></tr></table></figure></p>\n<p>使用缓存，缓存临时节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 不好的做法</span></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>).style.left = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>).offsetLeft +  </div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>).offsetWidth + <span class=\"string\">\"px\"</span>;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 更好的做法</span></div><div class=\"line\"><span class=\"keyword\">var</span> myDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>);  </div><div class=\"line\">myDiv.style.left = myDiv.offsetLeft + myDiv.offsetWidth + <span class=\"string\">\"px\"</span>;</div></pre></td></tr></table></figure>\n<h1 id=\"前端综合\"><a href=\"#前端综合\" class=\"headerlink\" title=\"前端综合\"></a>前端综合</h1><h2 id=\"使用tree-shaking以及code-splitting机制来减轻负载-Use-tree-shaking-and-code-splitting-to-reduce-payloads\"><a href=\"#使用tree-shaking以及code-splitting机制来减轻负载-Use-tree-shaking-and-code-splitting-to-reduce-payloads\" class=\"headerlink\" title=\"使用tree-shaking以及code-splitting机制来减轻负载(Use tree-shaking and code-splitting to reduce payloads)\"></a>使用tree-shaking以及code-splitting机制来减轻负载(Use tree-shaking and code-splitting to reduce payloads)</h2><p>在你进行项目构建的过程中，Tree-shaking机制能够帮你清理生产环境中的冗余代码。例如，你可以利用Webpack2中的Tree-Shaking机制来清理冗余的exports代码或者使用UnCSS、Helium工具来清理冗余的CSS代码。或许你也想知道究竟如何才能写出高效的CSS选择器以及究竟如何才能避免自己写出冗余、低性能的CSS代码。</p>\n<p>code splitting机制实际上是Webpack的一个特性，该特性能够将你的代码块分成多个“chunk”，并且能够做到对“chunk”按需载入。另外，一旦你在代码块中定义好分割点(split point)，那么Webpack就会帮你处理好分割点之间的依赖关系，而且还会输出相对应的文件。在项目中使用Webpack的split point特性之后，(我们发现)该特性不仅能够实现对文件的瘦身，而且还能对(所需要的)代码做到按需载入。</p>\n<p>值得注意的是，通过对比Browserify之后，我们发现：“用Rollup来export代码会取得更加不错的效果”。还有就是，你可能需要用到Rollupify(Browserify进行transform时需要用到的工具，能够将ES6模块转成CommonJS模块)，这是因为小型规模的模块(module)能够起到意想不到的优化效果，(至于究竟可以优化到哪种程度)，这取决于你选择的打包工具以及模块系统(AMD、CommonJS、ES6模块)。</p>\n<h2 id=\"优化网络环境能够加快网络传输的速度-Warm-up-the-connection-to-speed-up-delivery\"><a href=\"#优化网络环境能够加快网络传输的速度-Warm-up-the-connection-to-speed-up-delivery\" class=\"headerlink\" title=\"优化网络环境能够加快网络传输的速度(Warm up the connection to speed up delivery)\"></a>优化网络环境能够加快网络传输的速度(Warm up the connection to speed up delivery)</h2><p>使用skeleton screen或者使用懒加载的方式载入字体或者HTTP开销很大的组件，例如，视频、iframe、轮播图<br>为节省时间，可以针对下面列出的操作使用资源优化的小技巧<br><code>dns-prefetch</code>(能够让浏览器在后台进程执行一次DNS查询)，<code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//fonts.googleapis.com&quot;</code><br><code>preconnect</code>(能够让浏览器在后台进程发起一次握手(DNS，TCP，TLS))，<br><code>prefetch</code>(能够让浏览器发起对资源的请求)，<code>&lt;link rel=&quot;prefetch&quot; href=&quot;http://daker.me/2013/05/hello-world.html&quot;/&gt;</code><br><code>prerender</code>(能够让浏览器在后台进程渲染出特定的页面)，<code>&lt;link rel=&quot;prerender&quot; href=&quot;http://daker.me/2013/05/hello-world.html&quot;/&gt;</code><br>preload(在不执行资源的前提下，预先拿到该资源)，<code>&lt;link rel=&quot;preload&quot; as=&quot;script&quot; href=&quot;map.js&quot; media=&quot;(min-width: 601px)&quot;&gt;</code><br>值得注意的是：在实践过程中，由于浏览器对这些东西支持不一，因此对于preconnect来说，你要更倾向于使用<code>dns-prefetch</code>，另外在使用<code>prefetch</code>、<code>prerender</code>的过程中，你需要特别小心，这是因为使用prerender的场景(指的是你要很清楚地知道用户下一步所做的决策，例如购买渠道)很特殊。</p>\n<h2 id=\"用service-worker来处理缓存问题或者将service-worker作为网络-出现问题时-的应急方案，合适吗？-Are-service-workers-used-for-caching-and-network-fallbacks\"><a href=\"#用service-worker来处理缓存问题或者将service-worker作为网络-出现问题时-的应急方案，合适吗？-Are-service-workers-used-for-caching-and-network-fallbacks\" class=\"headerlink\" title=\"用service worker来处理缓存问题或者将service worker作为网络(出现问题时)的应急方案，合适吗？(Are service workers used for caching and network fallbacks?)\"></a>用service worker来处理缓存问题或者将service worker作为网络(出现问题时)的应急方案，合适吗？(Are service workers used for caching and network fallbacks?)</h2><p>你要知道，(在有网以及服务器已被优化的情况下)，用户从服务端拿数据是不可能比用户从本地拿缓存来的快。如果你的网站已经切到HTTPS，推荐你使用pragmatist-service-worker(不但可以(让你)通过service worker cache来缓存静态资源、离线资源(比如离线的页面)，而且可以让你从缓存中拿数据)。当然，你也可以去看Jake的Offline Cookbook或者去看Udacity开设的免费公开课“离线web应用”。浏览器对serviceworker支持度怎么样？你要的答案在<a href=\"http://caniuse.com/#search=serviceworker\" target=\"_blank\" rel=\"external\">这里</a>，不管浏览器对service worker支持度怎么样，性能优化的备用方案仍然是基于网络的。</p>\n<p><a href=\"http://web.jobbole.com/84792/\" target=\"_blank\" rel=\"external\">Service Worker初体验</a></p>\n<h2 id=\"HTML5的离线储存怎么使用，工作原理能不能解释一下？\"><a href=\"#HTML5的离线储存怎么使用，工作原理能不能解释一下？\" class=\"headerlink\" title=\"HTML5的离线储存怎么使用，工作原理能不能解释一下？\"></a>HTML5的离线储存怎么使用，工作原理能不能解释一下？</h2><p>  在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。<br>  原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。</p>\n<p>  如何使用：<br>  1、页面头部像下面一样加入一个manifest的属性；<br>  2、在cache.manifest文件的编写离线存储的资源；<br>    CACHE MANIFEST</p>\n<pre><code>#v0.11\nCACHE:\njs/app.js\ncss/style.css\nNETWORK:\nresourse/logo.png\nFALLBACK:\n/ /offline.html\n</code></pre><p>  3、在离线状态时，操作window.applicationCache进行需求实现。</p>\n<p>  <a href=\"http://yanhaijing.com/html/2014/12/28/html5-manifest/\" target=\"_blank\" rel=\"external\">HTML5 离线缓存-manifest简介</a></p>\n","categories":[],"tags":["web"]},{"title":"【转】前端开发者应知必会：浏览器是如何渲染网页的","url":"http://yoursite.com/2017/03/10/前端开发者应知必会：浏览器是如何渲染网页的/","content":"<p>今天我们讨论的话题将专注于网页渲染以及它在Web开发中至关重要的作用。其实网上已经有许多谈论这个主题的文章了，但大多数文章提供的都是比较碎片化的信息，我需要查阅相当多的资料，才能完整地了解网页渲染。所以我决定写下这篇有一定综合性的文章。相信一方面能够帮助初学者了解网页渲染的原理，另一方面也能帮助有经验的同学细化巩固相关的知识结构。</p>\n<a id=\"more\"></a>\n<p>不同的浏览器引擎运行起来会有些许差异，针对特定浏览器的具体内容会更加复杂。本文并不会涉及某个浏览器的底层原理，而是讨论一些通共的原则。</p>\n<h1 id=\"浏览器如何渲染网页\"><a href=\"#浏览器如何渲染网页\" class=\"headerlink\" title=\"浏览器如何渲染网页\"></a>浏览器如何渲染网页</h1><p>我们先来了解一下浏览器是如何对网页进行渲染的：</p>\n<p>1、浏览器将从服务器获取的HTML文档构建成文档对象模型DOM(Document Object Model).<br>2、样式将被载入和解析，构成层叠样式表模型CSSOM(CSS Object Model).<br>3、在DOM和CSSOM之上，渲染树(rendering tree)将会被创建，代表一系列将被渲染的对象（这在Webkit内核中被称为renderer或者渲染对象render object，在Gecko内核中被称为框架frame）。渲染树映射除了不可见元素（例如<strong><head></head></strong>或者含有<strong>display:none;</strong>的标签）外的所有DOM结构。每一段文本字符串都将划分在不同的渲染对象中，每一个渲染对象都包含了它相应的DOM对象以及计算后的样式。换句话讲，渲染树是DOM的直观表示。<br>4、渲染树的每个元素包含的内容都是计算过的，它被称之为布局layout.浏览器使用一种流式处理的方法，只需要一次pass绘制操作就可以布局所有的元素（<strong>tables</strong>需要多次pass绘制，pass表示像素处理和顶点处理）。<br>5、最后布局完成，渲染树将转化为屏幕上的实际内容，这一步被称为绘制painting.</p>\n<h1 id=\"重绘Repaint\"><a href=\"#重绘Repaint\" class=\"headerlink\" title=\"重绘Repaint\"></a>重绘Repaint</h1><p>当页面元素样式的改变不影响元素在文档流中的位置时（例如<strong>background-color, border-color,visibility</strong>）,浏览器只会将新样式赋予元素并进行重绘操作。</p>\n<h1 id=\"当改变影响文档内容或者结构，或者元素位置时，回流操作就会被触发，一般有以下几种情况：\"><a href=\"#当改变影响文档内容或者结构，或者元素位置时，回流操作就会被触发，一般有以下几种情况：\" class=\"headerlink\" title=\"当改变影响文档内容或者结构，或者元素位置时，回流操作就会被触发，一般有以下几种情况：\"></a>当改变影响文档内容或者结构，或者元素位置时，回流操作就会被触发，一般有以下几种情况：</h1><ul>\n<li>DOM操作（对元素的增删改，顺序变化等）；</li>\n<li>内容变化，包括表单区域内的文本改变；</li>\n<li>CSS属性的更改或重新计算；</li>\n<li>增删样式表内容；</li>\n<li>修改class属性；</li>\n<li>浏览器窗口变化（滚动或缩放）；</li>\n<li>伪类样式激活（<strong>:hover</strong>等）。</li>\n</ul>\n<h1 id=\"浏览器如何优化渲染\"><a href=\"#浏览器如何优化渲染\" class=\"headerlink\" title=\"浏览器如何优化渲染\"></a>浏览器如何优化渲染</h1><p>浏览器本身会尽可能地减少其重绘或回流的次数，只更改必要的元素。例如一个<strong>position</strong>设置为<strong>absolute/fixed</strong>的元素的更改只会影响其本身和其子元素，而static的元素变化则会影响其之后的所有页面元素。</p>\n<p>另外一项优化的技术则是在JavaScript代码运行时，浏览器会缓存所有的变化，然后只通过一次pass绘制操作来应用这些更改。例如下面这段代码只会触发一次重绘和回流：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $body = $(<span class=\"string\">'body'</span>);</div><div class=\"line\">$body.css(<span class=\"string\">'padding'</span>, <span class=\"string\">'1px'</span>); <span class=\"comment\">// 触发重绘与回流</span></div><div class=\"line\">$body.css(<span class=\"string\">'color'</span>, <span class=\"string\">'red'</span>); <span class=\"comment\">// 触发重绘</span></div><div class=\"line\">$body.css(<span class=\"string\">'margin'</span>, <span class=\"string\">'2px'</span>); <span class=\"comment\">// 触发重绘与回流</span></div><div class=\"line\"><span class=\"comment\">// 最终只有一次重绘和回流被触发</span></div></pre></td></tr></table></figure>\n<p>然而，根据我们之前提到过的，获取某个元素的属性将会触发强制回流。比如我们在刚才的代码中加上一句读取元素属性的操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $body = $(<span class=\"string\">'body'</span>);</div><div class=\"line\">$body.css(<span class=\"string\">'padding'</span>, <span class=\"string\">'1px'</span>);</div><div class=\"line\">$body.css(<span class=\"string\">'padding'</span>); <span class=\"comment\">// 此处触发强制回流</span></div><div class=\"line\">$body.css(<span class=\"string\">'color'</span>, <span class=\"string\">'red'</span>);</div><div class=\"line\">$body.css(<span class=\"string\">'margin'</span>, <span class=\"string\">'2px'</span>);</div></pre></td></tr></table></figure>\n<p>结果就会有两次回流发生。因此，我们应该尽量合并读取元素属性的操作来优化性能。</p>\n<p>当然也有我们不得不触发强制回流的情况。比如说对同一个元素的<strong>margin-left</strong>属性进行两次操作——开始的时候赋值<strong>100px</strong>的距离，之后为了实现动画效果，再加上<strong>transition</strong>属性将距离改变到<strong>50px</strong>.</p>\n<p>我们先定义一个CSS类：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.has-transition</span> &#123;</div><div class=\"line\">   <span class=\"attribute\">-webkit-transition</span>: margin-left <span class=\"number\">1s</span> ease-out;</div><div class=\"line\">      <span class=\"attribute\">-moz-transition</span>: margin-left <span class=\"number\">1s</span> ease-out;</div><div class=\"line\">        <span class=\"attribute\">-o-transition</span>: margin-left <span class=\"number\">1s</span> ease-out;</div><div class=\"line\">           <span class=\"attribute\">transition</span>: margin-left <span class=\"number\">1s</span> ease-out;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>之后再对页面元素进行操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 我们的元素开始默认含有 \"has-transition\" 的class属性</span></div><div class=\"line\"><span class=\"keyword\">var</span> $targetElem = $(<span class=\"string\">'#targetElemId'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 移除默认的 \"has-transition\"</span></div><div class=\"line\">$targetElem.removeClass(<span class=\"string\">'has-transition'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 此处的属性改变没有动画效果</span></div><div class=\"line\">$targetElem.css(<span class=\"string\">'margin-left'</span>, <span class=\"number\">100</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 再加上原来的属性名</span></div><div class=\"line\">$targetElem.addClass(<span class=\"string\">'has-transition'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 这次改变有动画效果</span></div><div class=\"line\">$targetElem.css(<span class=\"string\">'margin-left'</span>, <span class=\"number\">50</span>);</div></pre></td></tr></table></figure>\n<p>但事实上这段代码并不会像注释描述的那样运作，每条语句的操作将被缓存，只有结果会在页面上显示，所以我们就需要手动进行一次强制回流：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 移除默认的 \"has-transition\"</span></div><div class=\"line\">$(<span class=\"keyword\">this</span>).removeClass(<span class=\"string\">'has-transition'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 此处的属性改变没有动画效果</span></div><div class=\"line\">$(<span class=\"keyword\">this</span>).css(<span class=\"string\">'margin-left'</span>, <span class=\"number\">100</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 触发强制回流，上述两条语句的效果会马上在页面中显示</span></div><div class=\"line\">$(<span class=\"keyword\">this</span>)[<span class=\"number\">0</span>].offsetHeight; <span class=\"comment\">// 只是举个例子，别的触发方法也可以</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 再加上原来的属性名</span></div><div class=\"line\">$(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">'has-transition'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 这次改变有动画效果</span></div><div class=\"line\">$(<span class=\"keyword\">this</span>).css(<span class=\"string\">'margin-left'</span>, <span class=\"number\">50</span>);</div></pre></td></tr></table></figure>\n<p>你可以在<a href=\"https://link.zhihu.com/?target=http%3A//output.jsbin.com/qutev/1/\" target=\"_blank\" rel=\"external\">JSBin</a>预览这个例子。</p>\n<h1 id=\"优化渲染效率的几条最佳实践\"><a href=\"#优化渲染效率的几条最佳实践\" class=\"headerlink\" title=\"优化渲染效率的几条最佳实践\"></a>优化渲染效率的几条最佳实践</h1><p>根据我查阅的一些资料，总结出以下几条优化建议：</p>\n<ul>\n<li>合法地书写HTML和CSS，不要忘了文档编码类型。样式文件应当在 <head> 标签中，脚本文件在 </head><body> 结束前。</body></li>\n<li>简化并优化你的CSS选择器（有些人可能CSS预处理器用习惯了从来不关注这一点）。将嵌套层减少到最小。CSS选择器根据其优先级具有不同的运行效率（从快到慢）：<br>ID选择器： <strong>#id</strong><br>类选择器： <strong>.class</strong><br>标签选择器： <strong>div</strong><br>相邻选择器： <strong>a + i</strong><br>子元素选择器： <strong>ul &gt; li</strong><br>通用选择器： *<br>属性选择器： <code>input[type=&quot;text&quot;]</code><br>伪类选择器： <code>a:hover</code></li>\n</ul>\n<p>浏览器中CSS选择器是从右到左进行匹配的<a href=\"https://link.zhihu.com/?target=http%3A//stackoverflow.com/questions/5797014/why-do-browsers-match-css-selectors-from-right-to-left\" target=\"_blank\" rel=\"external\">（为什么浏览器要从右到左匹配样式选择器）</a>，这也是为什么越短的选择器运行越快的原因（别提通用选择器，它会遍历所有元素）：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">div * &#123;...&#125; // ×</div><div class=\"line\">.list li &#123;...&#125; // ×</div><div class=\"line\">.list-item &#123;...&#125; // √</div><div class=\"line\">#list .list-item &#123;...&#125; // √</div></pre></td></tr></table></figure>\n<ul>\n<li>在你的脚本代码中，尽量减少DOM操作。缓存所有的内容，包括属性和对象（如果他们需要被复用的话）。尽量将元素缓存到本地之后再进行操作，最后再添加到DOM当中。</li>\n<li>如果你使用jQuery进行DOM操作的话，最好遵循<a href=\"https://link.zhihu.com/?target=http%3A//www.ruanyifeng.com/blog/2011/08/jquery_best_practices.html\" target=\"_blank\" rel=\"external\">jQuery最佳实践</a>。</li>\n<li>修改元素样式时，更改其class属性是性能最高的方法。你的选择器越有针对性越好（这同样也有助于分离页面样式和逻辑）。</li>\n<li>尽量只对 <strong>position</strong> 为 <strong>absolute/fixed</strong> 的元素设置动画。</li>\n<li>在页面滚动时禁用 <strong>:hover</strong> 样式效果：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.disable-hover</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">pointer-events</span>: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> body = <span class=\"built_in\">document</span>.body,</div><div class=\"line\">    timer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  clearTimeout(timer);</div><div class=\"line\">  <span class=\"keyword\">if</span>(!body.classList.contains(<span class=\"string\">'disable-hover'</span>)) &#123;</div><div class=\"line\">    body.classList.add(<span class=\"string\">'disable-hover'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    body.classList.remove(<span class=\"string\">'disable-hover'</span>)</div><div class=\"line\">  &#125;,<span class=\"number\">500</span>);</div><div class=\"line\">&#125;, <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>原文链接：What Every Frontend Developer Should Know About Webpage Rendering<br>作者：Alexander Skutin<br>译者：余博伦<br>转载请注明出处。</p>\n</blockquote>\n","categories":[],"tags":["web"]},{"title":"js模块化","url":"http://yoursite.com/2017/02/21/js模块化/","content":"<p>js模块化：AMD、CMD、CommonJS、ES6 Module</p>\n<a id=\"more\"></a>\n<h1 id=\"AMD-规范\"><a href=\"#AMD-规范\" class=\"headerlink\" title=\"AMD 规范\"></a>AMD 规范</h1><p>定义无依赖的模块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"attr\">add</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> x + y;</div><div class=\"line\">\t&#125; </div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>定义有依赖的模块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">define([<span class=\"string\">'jquery'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>)</span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">\t<span class=\"comment\">// ...</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t<span class=\"attr\">a</span>: a</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>定义数据对象模块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(&#123;</div><div class=\"line\">\t<span class=\"attr\">users</span>: [],</div><div class=\"line\">\t<span class=\"attr\">members</span>: []</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>具名模块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(<span class=\"string\">\"alpha\"</span>, [ <span class=\"string\">\"require\"</span>, <span class=\"string\">\"exports\"</span>, <span class=\"string\">\"beta\"</span> ], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> require, exports, beta </span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">export</span>.verb = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> beta.verb();</div><div class=\"line\">      <span class=\"comment\">// or:</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">require</span>(<span class=\"string\">\"beta\"</span>).verb();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>包装模块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>required.js 2.0以后支持CMD写法，不过官方推荐依赖前置</p>\n<h1 id=\"CMD-规范\"><a href=\"#CMD-规范\" class=\"headerlink\" title=\"CMD 规范\"></a>CMD 规范</h1><p>CMD是SeaJS 在推广过程中对模块定义的规范化产出</p>\n<ul>\n<li>对于依赖的模块AMD是提前执行，CMD是延迟执行。不过RequireJS从2.0开始，也改成可以延迟执行（根据写法不同，处理方式不通过）。</li>\n<li>CMD推崇依赖就近，AMD推崇依赖前置。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//依赖可以就近书写</span></div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>);</div><div class=\"line\">    a.test();</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">//软依赖</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (status) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> b = requie(<span class=\"string\">'./b'</span>);</div><div class=\"line\">        b.test();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"UMD\"><a href=\"#UMD\" class=\"headerlink\" title=\"UMD\"></a>UMD</h1><p>UMD是AMD和CommonJS的糅合</p>\n<p>AMD模块以浏览器第一的原则发展，异步加载模块。<br>CommonJS模块以服务器第一原则发展，选择同步加载，它的模块无需包装(unwrapped modules)。<br>这迫使人们又想出另一个更通用的模式UMD （Universal Module Definition）。希望解决跨平台的解决方案。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">window, factory</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> exports === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">module</span>.exports = factory();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span> &amp;&amp; define.amd) &#123;</div><div class=\"line\"></div><div class=\"line\">        define(factory);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">window</span>.eventUtil = factory();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)(<span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//module ...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"CommonJS-规范\"><a href=\"#CommonJS-规范\" class=\"headerlink\" title=\"CommonJS 规范\"></a>CommonJS 规范</h1><p>Node应用由模块组成，采用CommonJS模块规范。<a href=\"http://javascript.ruanyifeng.com/nodejs/module.html\" target=\"_blank\" rel=\"external\">详情</a></p>\n<h1 id=\"ES6-Module-ruanyf-ES6入门-Module\"><a href=\"#ES6-Module-ruanyf-ES6入门-Module\" class=\"headerlink\" title=\"ES6 Module (ruanyf ES6入门 Module)\"></a>ES6 Module (ruanyf ES6入门 Module)</h1><p>ES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// CommonJS模块</span></div><div class=\"line\"><span class=\"keyword\">let</span> &#123; stat, exists, readFile &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"keyword\">let</span> _fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> stat = _fs.stat;</div><div class=\"line\"><span class=\"keyword\">let</span> exists = _fs.exists;</div><div class=\"line\"><span class=\"keyword\">let</span> readfile = _fs.readfile;</div></pre></td></tr></table></figure>\n<p>上面代码的实质是整体加载<code>fs</code>模块（即加载fs的所有方法），生成一个对象（<code>_fs</code>），然后再从这个对象上面读取3个方法。这种加载称为“运行时加载”，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。</p>\n<p>ES6 模块不是对象，而是通过<code>export</code>命令显式指定输出的代码，再通过<code>import</code>命令输入。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ES6模块</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; stat, exists, readFile &#125; <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</div></pre></td></tr></table></figure>\n<p>上面代码的实质是从fs模块加载3个方法，其他方法不加载。这种加载称为“编译时加载”或者静态加载，即 ES6 可以在编译时就完成模块加载，效率要比 CommonJS 模块的加载方式高。当然，这也导致了没法引用 ES6 模块本身，因为它不是对象。<br>由于 ES6 模块是编译时加载，使得静态分析成为可能。有了它，就能进一步拓宽 JavaScript 的语法，比如引入宏（macro）和类型检验（type system）这些只能靠静态分析实现的功能。</p>\n<p>除了静态加载带来的各种好处，ES6 模块还有以下好处。</p>\n<ul>\n<li>不再需要UMD模块格式了，将来服务器和浏览器都会支持 ES6 模块格式。目前，通过各种工具库，其实已经做到了这一点。</li>\n<li>将来浏览器的新 API 就能用模块格式提供，不再必须做成全局变量或者navigator对象的属性。</li>\n<li>不再需要对象作为命名空间（比如Math对象），未来这些功能可以通过模块提供。</li>\n</ul>\n","categories":[],"tags":["javascript"]},{"title":"前端排序算法学习笔记","url":"http://yoursite.com/2017/01/20/前端算法学习笔记/","content":"<blockquote>\n<p>算法在于理解其原理，本篇记录备忘。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>日本程序员norahiko，写了一个排序算法的<a href=\"http://jsdo.it/norahiko/oxIy/fullscreen\" target=\"_blank\" rel=\"external\">动画演示</a>，非常有趣。</p>\n<!-- | 排序算法        | 平均时间复杂度   |  最好情况  |  最坏情况  |  空间复杂度  |  排序方式  |  稳定性  |\n| ---------------| -----:  | -----:  | -----:  | -----:  | -----:  | :----:  |\n| 冒泡排序        | O(n^2) | O(n) | O(n^2) | O(1) | In-place | 稳定 |\n| 选择排序        | O(n^2) | O(n^2) | O(n) | O(1) | In-place | 不稳定 |\n| 插入排序        | O(n^2) | O(n) | O(n) | O(1) | In-place | 稳定 |\n| 希尔排序        | O(n log n) | O(n) | O(n) | O(1) | In-place | 稳定 | -->\n<p><img src=\"./sort_table.png\" alt=\"\"></p>\n<h1 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h1><p>原理：<br>（1）比较相邻两个数，如果前者大于后者，就把两个数交换位置。<br>（2）对每一对相邻的元素做同样的工作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> len = arr.length,j;</div><div class=\"line\">    <span class=\"keyword\">var</span> temp;</div><div class=\"line\">    <span class=\"keyword\">while</span>(len &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>( j = <span class=\"number\">0</span>; j &lt; len - <span class=\"number\">1</span>; j++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(arr[j] &gt; arr[j + <span class=\"number\">1</span>])&#123;</div><div class=\"line\">                temp = arr[j];</div><div class=\"line\">                arr[j] = arr[j + <span class=\"number\">1</span>];</div><div class=\"line\">                arr[j + <span class=\"number\">1</span>] = temp;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        i--;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h1><p>原理：<br>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> min = arr[i];</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = i + <span class=\"number\">1</span>; j &lt; arr.length - <span class=\"number\">1</span>; j++)&#123;</div><div class=\"line\">            <span class=\"comment\">// 寻找最小值</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(min &gt; arr[j])&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> temp = min;</div><div class=\"line\">                min = arr[j];</div><div class=\"line\">                arr[j] = temp;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 放到数组最左边</span></div><div class=\"line\">        arr[i] = min;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"快排算法\"><a href=\"#快排算法\" class=\"headerlink\" title=\"快排算法\"></a>快排算法</h1><p>“快速排序”的思想很简单，整个排序过程只需要三步：<br>（1）在数据集之中，选择一个元素作为”基准”（pivot）。<br>（2）所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。<br>（3）对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</p>\n<p>举例来说，现在有个数据集合[85, 24, 63, 45, 17, 31, 96, 50]，怎么对其排序呢？<br>第一步，选择中间的元素45作为”基准”。（基准值可以任意选择，但是选择中间的值比较容易理解。）<br>[85, 24, 63, <strong>45</strong>, 17, 31, 96, 50]<br>第二步，按照顺序，将每个元素与”基准”进行比较，形成两个子集，一个”小于45”，另一个”大于等于45”。<br>[24, 17, 31], <strong>45</strong>, [85, 63, 96, 50]<br>第三步，对两个子集不断重复第一步和第二步，直到所有子集只剩下一个元素为止。<br>[24, <strong>17</strong>, 31], 45, [85, <strong>63</strong>, 96, 50]<br><strong>17</strong>, [24, 31], 45, [50], <strong>63</strong>, [85, 96]<br>17, [<strong>24</strong>, 31], 45, 50, 63, [<strong>85</strong>, 96]<br>[17, 24, 31, 45, 50, 63, 85, 96]</p>\n<p><strong>具体实现</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">63</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">63</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">43</span>];</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quicksort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (arr.length == <span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> [];</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">var</span> left = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">    <span class=\"keyword\">var</span> right = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">    <span class=\"comment\">// 基准值可取第一个，或者去中间值</span></div><div class=\"line\">    <span class=\"comment\">// var pivot = arr[0];</span></div><div class=\"line\">    <span class=\"keyword\">var</span> pivot = arr.splice(pivotIndex, <span class=\"number\">1</span>)[<span class=\"number\">0</span>];</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">    \t<span class=\"comment\">// 将每个元素与”基准”进行比较，所有大于\"基准\"的元素，都移到\"基准\"的右边</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &lt; pivot) &#123;</div><div class=\"line\">           left.push(arr[i]);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           right.push(arr[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\"> \t<span class=\"comment\">// 递归处理快速排序，并重新合并处理后的数组</span></div><div class=\"line\">    <span class=\"keyword\">return</span> quicksort(left).concat(pivot, quicksort(right));</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">console</span>.log(quicksort(a));</div></pre></td></tr></table></figure></p>\n<h1 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h1><p>原理：将无序数列中的元素插入到有序数列的对应位置，插入前通过比大小的方式找到其在有序数列中的对应位置。</p>\n<p>排序过程大概如下：<br>（1）从第一个元素开始，该元素可以认为已经被排序；<br>（2）取出下一个元素，在已经排序的元素序列中从后向前扫描；<br>（3）如果该元素（已排序）大于新元素，将该元素移到下一位置；<br>（4）重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；<br>（5）将新元素插入到该位置后；<br>（6）重复步骤2~5。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span> (<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 假设第0个元素是一个有序的数列，第1个以后的是无序的序列，</span></div><div class=\"line\">    <span class=\"comment\">// 所以从第1个元素开始将无序数列的元素插入到有序数列中</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++)</div><div class=\"line\">        <span class=\"keyword\">var</span> key = arr[i]; <span class=\"comment\">// 取出无序数列中的第i个作为被插入元素</span></div><div class=\"line\">        <span class=\"keyword\">var</span> j = i - <span class=\"number\">1</span>; <span class=\"comment\">// 记录有序数组最后一位下标</span></div><div class=\"line\">        arr[i] = arr[j]; <span class=\"comment\">// 有序数组扩大到i</span></div><div class=\"line\">        <span class=\"comment\">// 遍历有序数组,寻找需要插入的下标,并将有序数组往后移动</span></div><div class=\"line\">        <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; key &lt; arr[j]) &#123;</div><div class=\"line\">            arr[j + <span class=\"number\">1</span>] = arr[j];</div><div class=\"line\">            j--;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 插入</span></div><div class=\"line\">        arr[j + <span class=\"number\">1</span>] = key;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h1><p>原理：<br><strong>希尔排序的实质是分组插入排序，该方法又称缩小增量排序。</strong><br>该方法的基本思想是：<br>先将整个待排元素序列分割为若干个子序列（由相隔某个‘增量’的元素组成的）分别进行直接插入排序，然后依次缩减增量再进行排序，带这个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序。因为直接插入排序在元素基本有序的情况下（接近最好情况）效率是很高的，因此希尔排序在时间效率上有较大的提高。 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shellSort</span>(<span class=\"params\">array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> increment = array.length;</div><div class=\"line\">    <span class=\"keyword\">var</span> i;</div><div class=\"line\">    <span class=\"keyword\">var</span> temp; <span class=\"comment\">//暂存</span></div><div class=\"line\">    <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//设置增量</span></div><div class=\"line\">        increment = <span class=\"built_in\">Math</span>.floor(increment / <span class=\"number\">3</span>) + <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (i = increment ; i &lt; array.length; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(increment);</div><div class=\"line\">            <span class=\"keyword\">if</span> (array[i] &lt; array[i - increment]) &#123;</div><div class=\"line\">                temp = array[i];</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i - increment; j &gt;= <span class=\"number\">0</span> &amp;&amp; temp &lt; array[j]; j -= increment) &#123;</div><div class=\"line\">                    array[j + increment] = array[j];</div><div class=\"line\">                &#125;</div><div class=\"line\">                array[j + increment] = temp;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">while</span> (increment &gt; <span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> array;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h1><p>归并排序须知：</p>\n<p>作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：</p>\n<ul>\n<li>自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第2种方法）</li>\n<li>自下而上的迭代</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeSort</span>(<span class=\"params\">arr</span>) </span>&#123;  <span class=\"comment\">//采用自上而下的递归方法</span></div><div class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">    <span class=\"keyword\">if</span>(len &lt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> arr;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> middle = <span class=\"built_in\">Math</span>.floor(len / <span class=\"number\">2</span>),</div><div class=\"line\">        left = arr.slice(<span class=\"number\">0</span>, middle),</div><div class=\"line\">        right = arr.slice(middle);</div><div class=\"line\">    <span class=\"keyword\">return</span> merge(mergeSort(left), mergeSort(right));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge</span>(<span class=\"params\">left, right</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = [];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (left.length&gt;<span class=\"number\">0</span> &amp;&amp; right.length&gt;<span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (left[<span class=\"number\">0</span>] &lt;= right[<span class=\"number\">0</span>]) &#123;</div><div class=\"line\">            result.push(left.shift());</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            result.push(right.shift());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (left.length)</div><div class=\"line\">        result.push(left.shift());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (right.length)</div><div class=\"line\">        result.push(right.shift());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h1><p>堆排序须知：</p>\n<p>堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：</p>\n<p>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列<br>小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> len;    <span class=\"comment\">//因为声明的多个函数都需要数据长度，所以把len设置成为全局变量</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildMaxHeap</span>(<span class=\"params\">arr</span>) </span>&#123;   <span class=\"comment\">//建立大顶堆</span></div><div class=\"line\">    len = arr.length;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"built_in\">Math</span>.floor(len/<span class=\"number\">2</span>); i &amp;gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">        heapify(arr, i);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heapify</span>(<span class=\"params\">arr, i</span>) </span>&#123;     <span class=\"comment\">//堆调整</span></div><div class=\"line\">    <span class=\"keyword\">var</span> left = <span class=\"number\">2</span> * i + <span class=\"number\">1</span>,</div><div class=\"line\">        right = <span class=\"number\">2</span> * i + <span class=\"number\">2</span>,</div><div class=\"line\">        largest = i;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</div><div class=\"line\">        largest = left;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</div><div class=\"line\">        largest = right;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (largest != i) &#123;</div><div class=\"line\">        swap(arr, i, largest);</div><div class=\"line\">        heapify(arr, largest);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">arr, i, j</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> temp = arr[i];</div><div class=\"line\">    arr[i] = arr[j];</div><div class=\"line\">    arr[j] = temp;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heapSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    buildMaxHeap(arr);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = arr.length<span class=\"number\">-1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">        swap(arr, <span class=\"number\">0</span>, i);</div><div class=\"line\">        len--;</div><div class=\"line\">        heapify(arr, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"桶排序（Bucket-Sort）\"><a href=\"#桶排序（Bucket-Sort）\" class=\"headerlink\" title=\"桶排序（Bucket Sort）\"></a>桶排序（Bucket Sort）</h1><p>桶排序须知：</p>\n<p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。<br>为了使桶排序更加高效，我们需要做到这两点：</p>\n<p>在额外空间充足的情况下，尽量增大桶的数量<br>使用的映射函数能够将输入的N个数据均匀的分配到K个桶中<br>同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。</p>\n<p>什么时候最快（Best Cases）：</p>\n<p>当输入的数据可以均匀的分配到每一个桶中</p>\n<p>什么时候最慢（Worst Cases）：</p>\n<p>当输入的数据被分配到了同一个桶中</p>\n<p>桶排序JavaScript代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bucketSort</span>(<span class=\"params\">arr, bucketSize</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (arr.length === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> arr;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> i;</div><div class=\"line\">    <span class=\"keyword\">var</span> minValue = arr[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">var</span> maxValue = arr[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (arr[i] &lt; minValue) &#123;</div><div class=\"line\">          minValue = arr[i];                <span class=\"comment\">//输入数据的最小值</span></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[i] &gt; maxValue) &#123;</div><div class=\"line\">          maxValue = arr[i];                <span class=\"comment\">//输入数据的最大值</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//桶的初始化</span></div><div class=\"line\">    <span class=\"keyword\">var</span> DEFAULT_BUCKET_SIZE = <span class=\"number\">5</span>;            <span class=\"comment\">//设置桶的默认数量为5</span></div><div class=\"line\">    bucketSize = bucketSize || DEFAULT_BUCKET_SIZE;</div><div class=\"line\">    <span class=\"keyword\">var</span> bucketCount = <span class=\"built_in\">Math</span>.floor((maxValue - minValue) / bucketSize) + <span class=\"number\">1</span>;   </div><div class=\"line\">    <span class=\"keyword\">var</span> buckets = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(bucketCount);</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; buckets.length; i++) &#123;</div><div class=\"line\">        buckets[i] = [];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//利用映射函数将数据分配到各个桶中</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">        buckets[<span class=\"built_in\">Math</span>.floor((arr[i] - minValue) / bucketSize)].push(arr[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    arr.length = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; buckets.length; i++) &#123;</div><div class=\"line\">        insertionSort(buckets[i]);                      <span class=\"comment\">//对每个桶进行排序，这里使用了插入排序</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; buckets[i].length; j++) &#123;</div><div class=\"line\">            arr.push(buckets[i][j]);                      </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"基数排序（Radix-Sort）\"><a href=\"#基数排序（Radix-Sort）\" class=\"headerlink\" title=\"基数排序（Radix Sort）\"></a>基数排序（Radix Sort）</h1><p>基数排序须知：</p>\n<p>基数排序有两种方法：</p>\n<p>MSD 从高位开始进行排序<br>LSD 从低位开始进行排序</p>\n<p>基数排序 vs 计数排序 vs 桶排序</p>\n<p>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：<br>基数排序：根据键值的每位数字来分配桶<br>计数排序：每个桶只存储单一键值<br>桶排序：每个桶存储一定范围的数值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//LSD Radix Sort</span></div><div class=\"line\"><span class=\"keyword\">var</span> counter = [];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">radixSort</span>(<span class=\"params\">arr, maxDigit</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> mod = <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> dev = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; maxDigit; i++, dev *= <span class=\"number\">10</span>, mod *= <span class=\"number\">10</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr.length; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> bucket = <span class=\"built_in\">parseInt</span>((arr[j] % mod) / dev);</div><div class=\"line\">            <span class=\"keyword\">if</span>(counter[bucket]==<span class=\"literal\">null</span>) &#123;</div><div class=\"line\">                counter[bucket] = [];</div><div class=\"line\">            &#125;</div><div class=\"line\">            counter[bucket].push(arr[j]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">var</span> pos = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; counter.length; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> value = <span class=\"literal\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(counter[j]!=<span class=\"literal\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">while</span> ((value = counter[j].shift()) != <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">                      arr[pos++] = value;</div><div class=\"line\">                &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>参考：<a href=\"http://www.cnblogs.com/dushao/p/6004883.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/dushao/p/6004883.html</a></p>\n","categories":[],"tags":["前端","原创"]},{"title":"AlloyTeanCodeGuide","url":"http://yoursite.com/2017/01/18/AlloyTeanCodeGuide/","content":"<blockquote>\n<p><a href=\"https://alloyteam.github.io/CodeGuide/\" target=\"_blank\" rel=\"external\">AlloyTeam CodeGuide</a> 前端编码规范</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h1><h2 id=\"项目命名\"><a href=\"#项目命名\" class=\"headerlink\" title=\"项目命名\"></a>项目命名</h2><p>全部采用小写方式， 以下划线分隔。</p>\n<p>例：my_project_name</p>\n<h2 id=\"目录命名\"><a href=\"#目录命名\" class=\"headerlink\" title=\"目录命名\"></a>目录命名</h2><p>参照项目命名规则；</p>\n<p>有复数结构时，要采用复数命名法。</p>\n<p>例：scripts, styles, images, data_models</p>\n<h2 id=\"JS文件命名\"><a href=\"#JS文件命名\" class=\"headerlink\" title=\"JS文件命名\"></a>JS文件命名</h2><p>参照项目命名规则。</p>\n<p>例：account_model.js</p>\n<h2 id=\"CSS-SCSS文件命名\"><a href=\"#CSS-SCSS文件命名\" class=\"headerlink\" title=\"CSS, SCSS文件命名\"></a>CSS, SCSS文件命名</h2><p>参照项目命名规则。</p>\n<p>例：retina_sprites.scss</p>\n<h2 id=\"HTML文件命名\"><a href=\"#HTML文件命名\" class=\"headerlink\" title=\"HTML文件命名\"></a>HTML文件命名</h2><p>参照项目命名规则。</p>\n<p>例：error_report.html</p>\n<h1 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h1><h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><ul>\n<li>缩进使用soft tab（4个空格）；</li>\n<li>嵌套的节点应该缩进；</li>\n<li>在属性上，使用双引号，不要使用单引号；</li>\n<li>属性名全小写，用中划线做分隔符；</li>\n<li>不要在自动闭合标签结尾处使用斜线（HTML5 规范 指出他们是可选的）；</li>\n<li>不要忽略可选的关闭标签，例：</li> 和 。\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Page title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/company_logo.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Company\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hello-world\"</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"HTML5-doctype\"><a href=\"#HTML5-doctype\" class=\"headerlink\" title=\"HTML5 doctype\"></a>HTML5 doctype</h2><p>在页面开头使用这个简单地doctype来启用标准模式，使其在每个浏览器中尽可能一致的展现；</p>\n<p>虽然doctype不区分大小写，但是按照惯例，doctype大写 （<a href=\"http://stackoverflow.com/questions/15594877/is-there-any-benefits-to-use-uppercase-or-lowercase-letters-with-html5-tagname\" target=\"_blank\" rel=\"external\">关于html属性，大写还是小写</a>）。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">\t...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"lang属性\"><a href=\"#lang属性\" class=\"headerlink\" title=\"lang属性\"></a>lang属性</h2><p>根据HTML5规范：</p>\n<p><em>应在html标签上加上lang属性。这会给语音工具和翻译工具帮助，告诉它们应当怎么去发音和翻译。<br>更多关于 <code>lang</code> 属性的说明<a href=\"http://www.w3.org/html/wg/drafts/html/master/semantics.html#the-html-element\" target=\"_blank\" rel=\"external\">在这里</a>；</em></p>\n<p>在sitepoint上可以查到<a href=\"http://reference.sitepoint.com/html/lang-codes\" target=\"_blank\" rel=\"external\">语言列表</a>；</p>\n<p>但sitepoint只是给出了语言的大类，例如中文只给出了zh，但是没有区分香港，台湾，大陆。而微软给出了一份更加<a href=\"http://msdn.microsoft.com/en-us/library/ms533052(v=vs.85\" target=\"_blank\" rel=\"external\">详细的语言列表</a>.aspx)，其中细分了zh-cn, zh-hk, zh-tw。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en-us\"</span>&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"字符编码\"><a href=\"#字符编码\" class=\"headerlink\" title=\"字符编码\"></a>字符编码</h2><p>通过声明一个明确的字符编码，让浏览器轻松、快速的确定适合网页内容的渲染方式，通常指定为’UTF-8’。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"IE兼容模式\"><a href=\"#IE兼容模式\" class=\"headerlink\" title=\"IE兼容模式\"></a>IE兼容模式</h2><p>用 <code>&lt;meta&gt;</code> 标签可以指定页面应该用什么版本的IE来渲染；</p>\n<p>如果你想要了解更多，请点击<a href=\"\">这里</a>；</p>\n<p>不同doctype在不同浏览器下会触发不同的渲染模式（<a href=\"\">这篇文章</a>总结的很到位）。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=Edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"引入CSS-JS\"><a href=\"#引入CSS-JS\" class=\"headerlink\" title=\"引入CSS, JS\"></a>引入CSS, JS</h2><p>根据HTML5规范, 通常在引入CSS和JS时不需要指明 <code>type</code>，因为 <code>text/css</code> 和 <code>text/javascript</code> 分别是他们的默认值。</p>\n<p><strong>HTML5 规范链接</strong></p>\n<ul>\n<li><a href=\"http://www.w3.org/TR/2011/WD-html5-20110525/semantics.html#the-link-element\" target=\"_blank\" rel=\"external\">使用link</a></li>\n<li><a href=\"http://www.w3.org/TR/2011/WD-html5-20110525/semantics.html#the-style-element\" target=\"_blank\" rel=\"external\">使用style</a></li>\n<li><a href=\"http://www.w3.org/TR/2011/WD-html5-20110525/scripting-1.html#the-script-element\" target=\"_blank\" rel=\"external\">使用script</a></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- External CSS --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"code_guide.css\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- In-document CSS --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- External JS --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"code_guide.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- In-document JS --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"属性顺序\"><a href=\"#属性顺序\" class=\"headerlink\" title=\"属性顺序\"></a>属性顺序</h2><p>属性应该按照特定的顺序出现以保证易读性；</p>\n<ul>\n<li><code>class</code></li>\n<li><code>id</code></li>\n<li><code>name</code></li>\n<li><code>data-*</code></li>\n<li><code>src</code>, <code>for</code>, <code>type</code>, <code>href</code>, <code>value</code> , <code>max-length</code>, <code>max</code>, <code>min</code>, <code>pattern</code></li>\n<li><code>placeholder</code>, <code>title</code>, <code>alt</code></li>\n<li><code>aria-*</code>, <code>role</code></li>\n<li><code>required</code>, <code>readonly</code>, <code>disabled</code></li>\n</ul>\n<p>class是为高可复用组件设计的，所以应处在第一位；</p>\n<p>id更加具体且应该尽量少使用，所以将它放在第二位。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"...\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"...\"</span> <span class=\"attr\">data-modal</span>=<span class=\"string\">\"toggle\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>Example link<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"...\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"...\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"boolean属性\"><a href=\"#boolean属性\" class=\"headerlink\" title=\"boolean属性\"></a>boolean属性</h2><p>boolean属性指不需要声明取值的属性，XHTML需要每个属性声明取值，但是HTML5并不需要；</p>\n<p>更多内容可以参考 <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#boolean-attributes\" target=\"_blank\" rel=\"external\">WhatWG section on boolean attributes</a>：</p>\n<p><em>boolean属性的存在表示取值为true，不存在则表示取值为false。</em></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">disabled</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">checked</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">selected</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"JS生成标签\"><a href=\"#JS生成标签\" class=\"headerlink\" title=\"JS生成标签\"></a>JS生成标签</h2><p>在JS文件中生成标签让内容变得更难查找，更难编辑，性能更差。应该尽量避免这种情况的出现。</p>\n<h2 id=\"减少标签数量\"><a href=\"#减少标签数量\" class=\"headerlink\" title=\"减少标签数量\"></a>减少标签数量</h2><p>在编写HTML代码时，需要尽量避免多余的父节点；</p>\n<p>很多时候，需要通过迭代和重构来使HTML变得更少。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Not well --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"avatar\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"...\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Better --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"avatar\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"...\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"实用高于完美\"><a href=\"#实用高于完美\" class=\"headerlink\" title=\"实用高于完美\"></a>实用高于完美</h2><p>尽量遵循HTML标准和语义，但是不应该以浪费实用性作为代价；</p>\n<p>任何时候都要用尽量小的复杂度和尽量少的标签来解决问题。</p>\n<h1 id=\"CSS-SCSS\"><a href=\"#CSS-SCSS\" class=\"headerlink\" title=\"CSS, SCSS\"></a>CSS, SCSS</h1><h2 id=\"缩进\"><a href=\"#缩进\" class=\"headerlink\" title=\"缩进\"></a>缩进</h2><p>使用soft tab（4个空格）。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">10px</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"分号\"><a href=\"#分号\" class=\"headerlink\" title=\"分号\"></a>分号</h2><p>每个属性声明末尾都要加分号。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attribute\">background-color</span>: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"空格\"><a href=\"#空格\" class=\"headerlink\" title=\"空格\"></a>空格</h2><p>以下几种情况不需要空格：</p>\n<ul>\n<li>属性名后</li>\n<li>多个规则的分隔符’,’前</li>\n<li><code>!important</code> ‘!’后</li>\n<li>属性值中’(‘后和’)’前</li>\n<li>行末不要有多余的空格</li>\n</ul>\n<p>以下几种情况需要空格：</p>\n<ul>\n<li>属性值前</li>\n<li>选择器’&gt;’, ‘+’, ‘~’前后</li>\n<li>‘{‘前</li>\n<li><code>!important</code> ‘!’前</li>\n<li><code>@else</code> 前后</li>\n<li>属性值中的’,’后</li>\n<li>注释’/<em>‘后和’</em>/‘前</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* not good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span> :red! important;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,.<span class=\"number\">5</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: red <span class=\"meta\">!important</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: rgba(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, .<span class=\"number\">5</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* not good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> ,</div><div class=\"line\"><span class=\"selector-class\">.dialog</span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span>,</div><div class=\"line\"><span class=\"selector-class\">.dialog</span> &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* not good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span>&gt;<span class=\"selector-class\">.dialog</span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &gt; <span class=\"selector-class\">.dialog</span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* not good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* not good */</span></div><div class=\"line\">@<span class=\"keyword\">if</span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;@<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* good */</span></div><div class=\"line\">@<span class=\"keyword\">if</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125; @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"空行\"><a href=\"#空行\" class=\"headerlink\" title=\"空行\"></a>空行</h2><p>以下几种情况需要空行：</p>\n<ul>\n<li>文件最后保留一个空行</li>\n<li>‘}’后最好跟一个空行，包括scss中嵌套的规则</li>\n<li>属性之间需要适当的空行，具体见<a href=\"https://alloyteam.github.io/CodeGuide/#css-declaration-order\" target=\"_blank\" rel=\"external\">属性声明顺序</a></li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* not good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.dialog</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: red;</div><div class=\"line\">    &amp;:after &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.dialog</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: red;</div><div class=\"line\"></div><div class=\"line\">    &amp;:after &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"换行\"><a href=\"#换行\" class=\"headerlink\" title=\"换行\"></a>换行</h2><p>以下几种情况不需要换行：</p>\n<ul>\n<li>‘{‘前</li>\n</ul>\n<p>以下几种情况需要换行：</p>\n<ul>\n<li>‘{‘后和’}’前</li>\n<li>每个属性独占一行</li>\n<li>多个规则的分隔符’,’后</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* not good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span></div><div class=\"line\">&#123;<span class=\"attribute\">color</span>: red; <span class=\"attribute\">background-color</span>: black;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: red;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: black;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* not good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span>, <span class=\"selector-class\">.dialog</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span>,</div><div class=\"line\"><span class=\"selector-class\">.dialog</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>注释统一用’/<em> </em>/‘（scss中也不要用’//‘），具体参照右边的写法；</p>\n<p>缩进与下一行代码保持一致；</p>\n<p>可位于一个代码行的末尾，与代码间隔一个空格。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* Modal header */</span></div><div class=\"line\"><span class=\"selector-class\">.modal-header</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Modal header</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"selector-class\">.modal-header</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.modal-header</span> &#123;</div><div class=\"line\">    <span class=\"comment\">/* 50px */</span></div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attribute\">color</span>: red; <span class=\"comment\">/* color red */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"引号\"><a href=\"#引号\" class=\"headerlink\" title=\"引号\"></a>引号</h2><p>最外层统一使用双引号；</p>\n<p>url的内容要用引号；</p>\n<p>属性选择器中的属性值需要引号。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.element</span>:after &#123;</div><div class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"attribute\">background-image</span>: url(<span class=\"string\">\"logo.png\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-attr\">[data-type=\"single\"]</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h2><ul>\n<li>类名使用小写字母，以中划线分隔</li>\n<li>id采用驼峰式命名</li>\n<li>scss中的变量、函数、混合、placeholder采用驼峰式命名</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* class */</span></div><div class=\"line\"><span class=\"selector-class\">.element-content</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* id */</span></div><div class=\"line\"><span class=\"selector-id\">#myDialog</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 变量 */</span></div><div class=\"line\"><span class=\"variable\">$colorBlack</span>: <span class=\"number\">#000</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 函数 */</span></div><div class=\"line\">@function pxToRem(<span class=\"variable\">$px</span>) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 混合 */</span></div><div class=\"line\">@<span class=\"keyword\">mixin</span> centerBlock &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* placeholder */</span></div><div class=\"line\">%myDialog &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"属性声明顺序\"><a href=\"#属性声明顺序\" class=\"headerlink\" title=\"属性声明顺序\"></a>属性声明顺序</h2><p>相关的属性声明按右边的顺序做分组处理，组之间需要有一个空行。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div></pre></td><td class=\"code\"><pre><div class=\"line\">.declaration-order &#123;</div><div class=\"line\">    display: block;</div><div class=\"line\">    float: right;</div><div class=\"line\"></div><div class=\"line\">    position: absolute;</div><div class=\"line\">    top: 0;</div><div class=\"line\">    right: 0;</div><div class=\"line\">    bottom: 0;</div><div class=\"line\">    left: 0;</div><div class=\"line\">    z-index: 100;</div><div class=\"line\"></div><div class=\"line\">    border: 1px solid #e5e5e5;</div><div class=\"line\">    border-radius: 3px;</div><div class=\"line\">    width: 100px;</div><div class=\"line\">    height: 100px;</div><div class=\"line\"></div><div class=\"line\">    font: normal 13px \"Helvetica Neue\", sans-serif;</div><div class=\"line\">    line-height: 1.5;</div><div class=\"line\">    text-align: center;</div><div class=\"line\"></div><div class=\"line\">    color: #333;</div><div class=\"line\">    background-color: #f5f5f5;</div><div class=\"line\"></div><div class=\"line\">    opacity: 1;</div><div class=\"line\">&#125;</div><div class=\"line\">// 下面是推荐的属性的顺序</div><div class=\"line\">[</div><div class=\"line\">    [</div><div class=\"line\">        \"display\",</div><div class=\"line\">        \"visibility\",</div><div class=\"line\">        \"float\",</div><div class=\"line\">        \"clear\",</div><div class=\"line\">        \"overflow\",</div><div class=\"line\">        \"overflow-x\",</div><div class=\"line\">        \"overflow-y\",</div><div class=\"line\">        \"clip\",</div><div class=\"line\">        \"zoom\"</div><div class=\"line\">    ],</div><div class=\"line\">    [</div><div class=\"line\">        \"table-layout\",</div><div class=\"line\">        \"empty-cells\",</div><div class=\"line\">        \"caption-side\",</div><div class=\"line\">        \"border-spacing\",</div><div class=\"line\">        \"border-collapse\",</div><div class=\"line\">        \"list-style\",</div><div class=\"line\">        \"list-style-position\",</div><div class=\"line\">        \"list-style-type\",</div><div class=\"line\">        \"list-style-image\"</div><div class=\"line\">    ],</div><div class=\"line\">    [</div><div class=\"line\">        \"-webkit-box-orient\",</div><div class=\"line\">        \"-webkit-box-direction\",</div><div class=\"line\">        \"-webkit-box-decoration-break\",</div><div class=\"line\">        \"-webkit-box-pack\",</div><div class=\"line\">        \"-webkit-box-align\",</div><div class=\"line\">        \"-webkit-box-flex\"</div><div class=\"line\">    ],</div><div class=\"line\">    [</div><div class=\"line\">        \"position\",</div><div class=\"line\">        \"top\",</div><div class=\"line\">        \"right\",</div><div class=\"line\">        \"bottom\",</div><div class=\"line\">        \"left\",</div><div class=\"line\">        \"z-index\"</div><div class=\"line\">    ],</div><div class=\"line\">    [</div><div class=\"line\">        \"margin\",</div><div class=\"line\">        \"margin-top\",</div><div class=\"line\">        \"margin-right\",</div><div class=\"line\">        \"margin-bottom\",</div><div class=\"line\">        \"margin-left\",</div><div class=\"line\">        \"-webkit-box-sizing\",</div><div class=\"line\">        \"-moz-box-sizing\",</div><div class=\"line\">        \"box-sizing\",</div><div class=\"line\">        \"border\",</div><div class=\"line\">        \"border-width\",</div><div class=\"line\">        \"border-style\",</div><div class=\"line\">        \"border-color\",</div><div class=\"line\">        \"border-top\",</div><div class=\"line\">        \"border-top-width\",</div><div class=\"line\">        \"border-top-style\",</div><div class=\"line\">        \"border-top-color\",</div><div class=\"line\">        \"border-right\",</div><div class=\"line\">        \"border-right-width\",</div><div class=\"line\">        \"border-right-style\",</div><div class=\"line\">        \"border-right-color\",</div><div class=\"line\">        \"border-bottom\",</div><div class=\"line\">        \"border-bottom-width\",</div><div class=\"line\">        \"border-bottom-style\",</div><div class=\"line\">        \"border-bottom-color\",</div><div class=\"line\">        \"border-left\",</div><div class=\"line\">        \"border-left-width\",</div><div class=\"line\">        \"border-left-style\",</div><div class=\"line\">        \"border-left-color\",</div><div class=\"line\">        \"-webkit-border-radius\",</div><div class=\"line\">        \"-moz-border-radius\",</div><div class=\"line\">        \"border-radius\",</div><div class=\"line\">        \"-webkit-border-top-left-radius\",</div><div class=\"line\">        \"-moz-border-radius-topleft\",</div><div class=\"line\">        \"border-top-left-radius\",</div><div class=\"line\">        \"-webkit-border-top-right-radius\",</div><div class=\"line\">        \"-moz-border-radius-topright\",</div><div class=\"line\">        \"border-top-right-radius\",</div><div class=\"line\">        \"-webkit-border-bottom-right-radius\",</div><div class=\"line\">        \"-moz-border-radius-bottomright\",</div><div class=\"line\">        \"border-bottom-right-radius\",</div><div class=\"line\">        \"-webkit-border-bottom-left-radius\",</div><div class=\"line\">        \"-moz-border-radius-bottomleft\",</div><div class=\"line\">        \"border-bottom-left-radius\",</div><div class=\"line\">        \"-webkit-border-image\",</div><div class=\"line\">        \"-moz-border-image\",</div><div class=\"line\">        \"-o-border-image\",</div><div class=\"line\">        \"border-image\",</div><div class=\"line\">        \"-webkit-border-image-source\",</div><div class=\"line\">        \"-moz-border-image-source\",</div><div class=\"line\">        \"-o-border-image-source\",</div><div class=\"line\">        \"border-image-source\",</div><div class=\"line\">        \"-webkit-border-image-slice\",</div><div class=\"line\">        \"-moz-border-image-slice\",</div><div class=\"line\">        \"-o-border-image-slice\",</div><div class=\"line\">        \"border-image-slice\",</div><div class=\"line\">        \"-webkit-border-image-width\",</div><div class=\"line\">        \"-moz-border-image-width\",</div><div class=\"line\">        \"-o-border-image-width\",</div><div class=\"line\">        \"border-image-width\",</div><div class=\"line\">        \"-webkit-border-image-outset\",</div><div class=\"line\">        \"-moz-border-image-outset\",</div><div class=\"line\">        \"-o-border-image-outset\",</div><div class=\"line\">        \"border-image-outset\",</div><div class=\"line\">        \"-webkit-border-image-repeat\",</div><div class=\"line\">        \"-moz-border-image-repeat\",</div><div class=\"line\">        \"-o-border-image-repeat\",</div><div class=\"line\">        \"border-image-repeat\",</div><div class=\"line\">        \"padding\",</div><div class=\"line\">        \"padding-top\",</div><div class=\"line\">        \"padding-right\",</div><div class=\"line\">        \"padding-bottom\",</div><div class=\"line\">        \"padding-left\",</div><div class=\"line\">        \"width\",</div><div class=\"line\">        \"min-width\",</div><div class=\"line\">        \"max-width\",</div><div class=\"line\">        \"height\",</div><div class=\"line\">        \"min-height\",</div><div class=\"line\">        \"max-height\"</div><div class=\"line\">    ],</div><div class=\"line\">    [</div><div class=\"line\">        \"font\",</div><div class=\"line\">        \"font-family\",</div><div class=\"line\">        \"font-size\",</div><div class=\"line\">        \"font-weight\",</div><div class=\"line\">        \"font-style\",</div><div class=\"line\">        \"font-variant\",</div><div class=\"line\">        \"font-size-adjust\",</div><div class=\"line\">        \"font-stretch\",</div><div class=\"line\">        \"font-effect\",</div><div class=\"line\">        \"font-emphasize\",</div><div class=\"line\">        \"font-emphasize-position\",</div><div class=\"line\">        \"font-emphasize-style\",</div><div class=\"line\">        \"font-smooth\",</div><div class=\"line\">        \"line-height\",</div><div class=\"line\">        \"text-align\",</div><div class=\"line\">        \"-webkit-text-align-last\",</div><div class=\"line\">        \"-moz-text-align-last\",</div><div class=\"line\">        \"-ms-text-align-last\",</div><div class=\"line\">        \"text-align-last\",</div><div class=\"line\">        \"vertical-align\",</div><div class=\"line\">        \"white-space\",</div><div class=\"line\">        \"text-decoration\",</div><div class=\"line\">        \"text-emphasis\",</div><div class=\"line\">        \"text-emphasis-color\",</div><div class=\"line\">        \"text-emphasis-style\",</div><div class=\"line\">        \"text-emphasis-position\",</div><div class=\"line\">        \"text-indent\",</div><div class=\"line\">        \"-ms-text-justify\",</div><div class=\"line\">        \"text-justify\",</div><div class=\"line\">        \"letter-spacing\",</div><div class=\"line\">        \"word-spacing\",</div><div class=\"line\">        \"-ms-writing-mode\",</div><div class=\"line\">        \"text-outline\",</div><div class=\"line\">        \"text-transform\",</div><div class=\"line\">        \"text-wrap\",</div><div class=\"line\">        \"-ms-text-overflow\",</div><div class=\"line\">        \"text-overflow\",</div><div class=\"line\">        \"text-overflow-ellipsis\",</div><div class=\"line\">        \"text-overflow-mode\",</div><div class=\"line\">        \"-ms-word-wrap\",</div><div class=\"line\">        \"word-wrap\",</div><div class=\"line\">        \"-ms-word-break\",</div><div class=\"line\">        \"word-break\"</div><div class=\"line\">    ],</div><div class=\"line\">    [</div><div class=\"line\">        \"color\",</div><div class=\"line\">        \"background\",</div><div class=\"line\">        \"filter:progid:DXImageTransform.Microsoft.AlphaImageLoader\",</div><div class=\"line\">        \"background-color\",</div><div class=\"line\">        \"background-image\",</div><div class=\"line\">        \"background-repeat\",</div><div class=\"line\">        \"background-attachment\",</div><div class=\"line\">        \"background-position\",</div><div class=\"line\">        \"-ms-background-position-x\",</div><div class=\"line\">        \"background-position-x\",</div><div class=\"line\">        \"-ms-background-position-y\",</div><div class=\"line\">        \"background-position-y\",</div><div class=\"line\">        \"-webkit-background-clip\",</div><div class=\"line\">        \"-moz-background-clip\",</div><div class=\"line\">        \"background-clip\",</div><div class=\"line\">        \"background-origin\",</div><div class=\"line\">        \"-webkit-background-size\",</div><div class=\"line\">        \"-moz-background-size\",</div><div class=\"line\">        \"-o-background-size\",</div><div class=\"line\">        \"background-size\"</div><div class=\"line\">    ],</div><div class=\"line\">    [</div><div class=\"line\">        \"outline\",</div><div class=\"line\">        \"outline-width\",</div><div class=\"line\">        \"outline-style\",</div><div class=\"line\">        \"outline-color\",</div><div class=\"line\">        \"outline-offset\",</div><div class=\"line\">        \"opacity\",</div><div class=\"line\">        \"filter:progid:DXImageTransform.Microsoft.Alpha(Opacity\",</div><div class=\"line\">        \"-ms-filter:\\\\'progid:DXImageTransform.Microsoft.Alpha\",</div><div class=\"line\">        \"-ms-interpolation-mode\",</div><div class=\"line\">        \"-webkit-box-shadow\",</div><div class=\"line\">        \"-moz-box-shadow\",</div><div class=\"line\">        \"box-shadow\",</div><div class=\"line\">        \"filter:progid:DXImageTransform.Microsoft.gradient\",</div><div class=\"line\">        \"-ms-filter:\\\\'progid:DXImageTransform.Microsoft.gradient\",</div><div class=\"line\">        \"text-shadow\"</div><div class=\"line\">    ],</div><div class=\"line\">    [</div><div class=\"line\">        \"-webkit-transition\",</div><div class=\"line\">        \"-moz-transition\",</div><div class=\"line\">        \"-ms-transition\",</div><div class=\"line\">        \"-o-transition\",</div><div class=\"line\">        \"transition\",</div><div class=\"line\">        \"-webkit-transition-delay\",</div><div class=\"line\">        \"-moz-transition-delay\",</div><div class=\"line\">        \"-ms-transition-delay\",</div><div class=\"line\">        \"-o-transition-delay\",</div><div class=\"line\">        \"transition-delay\",</div><div class=\"line\">        \"-webkit-transition-timing-function\",</div><div class=\"line\">        \"-moz-transition-timing-function\",</div><div class=\"line\">        \"-ms-transition-timing-function\",</div><div class=\"line\">        \"-o-transition-timing-function\",</div><div class=\"line\">        \"transition-timing-function\",</div><div class=\"line\">        \"-webkit-transition-duration\",</div><div class=\"line\">        \"-moz-transition-duration\",</div><div class=\"line\">        \"-ms-transition-duration\",</div><div class=\"line\">        \"-o-transition-duration\",</div><div class=\"line\">        \"transition-duration\",</div><div class=\"line\">        \"-webkit-transition-property\",</div><div class=\"line\">        \"-moz-transition-property\",</div><div class=\"line\">        \"-ms-transition-property\",</div><div class=\"line\">        \"-o-transition-property\",</div><div class=\"line\">        \"transition-property\",</div><div class=\"line\">        \"-webkit-transform\",</div><div class=\"line\">        \"-moz-transform\",</div><div class=\"line\">        \"-ms-transform\",</div><div class=\"line\">        \"-o-transform\",</div><div class=\"line\">        \"transform\",</div><div class=\"line\">        \"-webkit-transform-origin\",</div><div class=\"line\">        \"-moz-transform-origin\",</div><div class=\"line\">        \"-ms-transform-origin\",</div><div class=\"line\">        \"-o-transform-origin\",</div><div class=\"line\">        \"transform-origin\",</div><div class=\"line\">        \"-webkit-animation\",</div><div class=\"line\">        \"-moz-animation\",</div><div class=\"line\">        \"-ms-animation\",</div><div class=\"line\">        \"-o-animation\",</div><div class=\"line\">        \"animation\",</div><div class=\"line\">        \"-webkit-animation-name\",</div><div class=\"line\">        \"-moz-animation-name\",</div><div class=\"line\">        \"-ms-animation-name\",</div><div class=\"line\">        \"-o-animation-name\",</div><div class=\"line\">        \"animation-name\",</div><div class=\"line\">        \"-webkit-animation-duration\",</div><div class=\"line\">        \"-moz-animation-duration\",</div><div class=\"line\">        \"-ms-animation-duration\",</div><div class=\"line\">        \"-o-animation-duration\",</div><div class=\"line\">        \"animation-duration\",</div><div class=\"line\">        \"-webkit-animation-play-state\",</div><div class=\"line\">        \"-moz-animation-play-state\",</div><div class=\"line\">        \"-ms-animation-play-state\",</div><div class=\"line\">        \"-o-animation-play-state\",</div><div class=\"line\">        \"animation-play-state\",</div><div class=\"line\">        \"-webkit-animation-timing-function\",</div><div class=\"line\">        \"-moz-animation-timing-function\",</div><div class=\"line\">        \"-ms-animation-timing-function\",</div><div class=\"line\">        \"-o-animation-timing-function\",</div><div class=\"line\">        \"animation-timing-function\",</div><div class=\"line\">        \"-webkit-animation-delay\",</div><div class=\"line\">        \"-moz-animation-delay\",</div><div class=\"line\">        \"-ms-animation-delay\",</div><div class=\"line\">        \"-o-animation-delay\",</div><div class=\"line\">        \"animation-delay\",</div><div class=\"line\">        \"-webkit-animation-iteration-count\",</div><div class=\"line\">        \"-moz-animation-iteration-count\",</div><div class=\"line\">        \"-ms-animation-iteration-count\",</div><div class=\"line\">        \"-o-animation-iteration-count\",</div><div class=\"line\">        \"animation-iteration-count\",</div><div class=\"line\">        \"-webkit-animation-direction\",</div><div class=\"line\">        \"-moz-animation-direction\",</div><div class=\"line\">        \"-ms-animation-direction\",</div><div class=\"line\">        \"-o-animation-direction\",</div><div class=\"line\">        \"animation-direction\"</div><div class=\"line\">    ],</div><div class=\"line\">    [</div><div class=\"line\">        \"content\",</div><div class=\"line\">        \"quotes\",</div><div class=\"line\">        \"counter-reset\",</div><div class=\"line\">        \"counter-increment\",</div><div class=\"line\">        \"resize\",</div><div class=\"line\">        \"cursor\",</div><div class=\"line\">        \"-webkit-user-select\",</div><div class=\"line\">        \"-moz-user-select\",</div><div class=\"line\">        \"-ms-user-select\",</div><div class=\"line\">        \"user-select\",</div><div class=\"line\">        \"nav-index\",</div><div class=\"line\">        \"nav-up\",</div><div class=\"line\">        \"nav-right\",</div><div class=\"line\">        \"nav-down\",</div><div class=\"line\">        \"nav-left\",</div><div class=\"line\">        \"-moz-tab-size\",</div><div class=\"line\">        \"-o-tab-size\",</div><div class=\"line\">        \"tab-size\",</div><div class=\"line\">        \"-webkit-hyphens\",</div><div class=\"line\">        \"-moz-hyphens\",</div><div class=\"line\">        \"hyphens\",</div><div class=\"line\">        \"pointer-events\"</div><div class=\"line\">    ]</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<h2 id=\"颜色\"><a href=\"#颜色\" class=\"headerlink\" title=\"颜色\"></a>颜色</h2><p>颜色16进制用小写字母；</p>\n<p>颜色16进制尽量用简写。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* not good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ABCDEF</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#001122</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#abcdef</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#012</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"属性简写\"><a href=\"#属性简写\" class=\"headerlink\" title=\"属性简写\"></a>属性简写</h2><p>属性简写需要你非常清楚属性值的正确顺序，而且在大多数情况下并不需要设置属性简写中包含的所有值，所以建议尽量分开声明会更加清晰；</p>\n<p><code>margin</code> 和 <code>padding</code> 相反，需要使用简写；</p>\n<p>常见的属性简写包括：</p>\n<ul>\n<li><code>font</code></li>\n<li><code>background</code></li>\n<li><code>transition</code></li>\n<li><code>animation</code></li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* not good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">transition</span>: opacity <span class=\"number\">1s</span> linear <span class=\"number\">2s</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">transition-delay</span>: <span class=\"number\">2s</span>;</div><div class=\"line\">    <span class=\"attribute\">transition-timing-function</span>: linear;</div><div class=\"line\">    <span class=\"attribute\">transition-duration</span>: <span class=\"number\">1s</span>;</div><div class=\"line\">    <span class=\"attribute\">transition-property</span>: opacity;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"媒体查询\"><a href=\"#媒体查询\" class=\"headerlink\" title=\"媒体查询\"></a>媒体查询</h2><p>尽量将媒体查询的规则靠近与他们相关的规则，不要将他们一起放到一个独立的样式文件中，或者丢在文档的最底部，这样做只会让大家以后更容易忘记他们。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.element-avatar</span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@<span class=\"keyword\">media</span> (min-width: 480px) &#123;</div><div class=\"line\">    <span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"selector-class\">.element-avatar</span> &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"SCSS相关\"><a href=\"#SCSS相关\" class=\"headerlink\" title=\"SCSS相关\"></a>SCSS相关</h2><p>提交的代码中不要有 <code>@debug</code>；</p>\n<p>声明顺序：</p>\n<ul>\n<li><code>@extend</code></li>\n<li>不包含 <code>@content</code> 的 <code>@include</code></li>\n<li>包含 <code>@content</code> 的 <code>@include</code></li>\n<li>自身属性</li>\n<li>嵌套规则</li>\n</ul>\n<p><code>@import</code> 引入的文件不需要开头的’_’和结尾的’.scss’；</p>\n<p>嵌套最多不能超过5层；</p>\n<p><code>@extend</code> 中使用placeholder选择器；</p>\n<p>去掉不必要的父级引用符号’&amp;’。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* not good */</span></div><div class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"_dialog.scss\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* good */</span></div><div class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"dialog\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* not good */</span></div><div class=\"line\"><span class=\"selector-class\">.fatal</span> &#123;</div><div class=\"line\">    @<span class=\"keyword\">extend</span> .error;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* good */</span></div><div class=\"line\"><span class=\"selector-class\">.fatal</span> &#123;</div><div class=\"line\">    @<span class=\"keyword\">extend</span> %error;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* not good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    &amp; &gt; <span class=\"selector-class\">.dialog</span> &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    &gt; <span class=\"selector-class\">.dialog</span> &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h2><p>不允许有空的规则；</p>\n<p>元素选择器用小写字母；</p>\n<p>去掉小数点前面的0；</p>\n<p>去掉数字中不必要的小数点和末尾的0；</p>\n<p>属性值’0’后面不要加单位；</p>\n<p>同个属性不同前缀的写法需要在垂直方向保持对齐，具体参照右边的写法；</p>\n<p>无前缀的标准属性应该写在有前缀的属性后面；</p>\n<p>不要在同个规则里出现重复的属性，如果重复的属性是连续的则没关系；</p>\n<p>不要在一个文件里出现两个相同的规则；</p>\n<p>用 <code>border: 0;</code> 代替 <code>border: none;</code>；</p>\n<p>选择器不要超过4层（在scss中如果超过4层应该考虑用嵌套的方式来写）；</p>\n<p>发布的代码中不要有 <code>@import</code>；</p>\n<p>尽量少用’*’选择器。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* not good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* not good */</span></div><div class=\"line\"><span class=\"selector-tag\">LI</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* good */</span></div><div class=\"line\"><span class=\"selector-tag\">li</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* not good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: rgba(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.5</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: rgba(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, .<span class=\"number\">5</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* not good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50.0px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* not good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* not good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</div><div class=\"line\">    -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</div><div class=\"line\">    -moz-<span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attribute\">background</span>: linear-gradient(to bottom, <span class=\"number\">#fff</span> <span class=\"number\">0</span>, <span class=\"number\">#eee</span> <span class=\"number\">100%</span>);</div><div class=\"line\">    <span class=\"attribute\">background</span>: -webkit-linear-gradient(top, <span class=\"number\">#fff</span> <span class=\"number\">0</span>, <span class=\"number\">#eee</span> <span class=\"number\">100%</span>);</div><div class=\"line\">    <span class=\"attribute\">background</span>: -moz-linear-gradient(top, <span class=\"number\">#fff</span> <span class=\"number\">0</span>, <span class=\"number\">#eee</span> <span class=\"number\">100%</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</div><div class=\"line\">       -moz-<span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</div><div class=\"line\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attribute\">background</span>: -webkit-linear-gradient(top, <span class=\"number\">#fff</span> <span class=\"number\">0</span>, <span class=\"number\">#eee</span> <span class=\"number\">100%</span>);</div><div class=\"line\">    <span class=\"attribute\">background</span>:    -moz-linear-gradient(top, <span class=\"number\">#fff</span> <span class=\"number\">0</span>, <span class=\"number\">#eee</span> <span class=\"number\">100%</span>);</div><div class=\"line\">    <span class=\"attribute\">background</span>:         linear-gradient(to bottom, <span class=\"number\">#fff</span> <span class=\"number\">0</span>, <span class=\"number\">#eee</span> <span class=\"number\">100%</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* not good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: rgb(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>: rgba(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, .<span class=\"number\">5</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* good */</span></div><div class=\"line\"><span class=\"selector-class\">.element</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: rgb(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"attribute\">color</span>: rgba(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, .<span class=\"number\">5</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h1><h2 id=\"缩进-1\"><a href=\"#缩进-1\" class=\"headerlink\" title=\"缩进\"></a>缩进</h2><p>使用soft tab（4个空格）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>,</div><div class=\"line\">    y = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (x &lt; y) &#123;</div><div class=\"line\">    x += <span class=\"number\">10</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    x += <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"单行长度\"><a href=\"#单行长度\" class=\"headerlink\" title=\"单行长度\"></a>单行长度</h2><p>不要超过80，但如果编辑器开启word wrap可以不考虑单行长度。</p>\n<h2 id=\"分号-1\"><a href=\"#分号-1\" class=\"headerlink\" title=\"分号\"></a>分号</h2><p>以下几种情况后需加分号：</p>\n<ul>\n<li>变量声明</li>\n<li>表达式</li>\n<li>return</li>\n<li>throw</li>\n<li>break</li>\n<li>continue</li>\n<li>do-while</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* var declaration */</span></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* expression statement */</span></div><div class=\"line\">x++;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* do-while */</span></div><div class=\"line\"><span class=\"keyword\">do</span> &#123;</div><div class=\"line\">    x++;</div><div class=\"line\">&#125; <span class=\"keyword\">while</span> (x &lt; <span class=\"number\">10</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"空格-1\"><a href=\"#空格-1\" class=\"headerlink\" title=\"空格\"></a>空格</h2><p>以下几种情况不需要空格：</p>\n<ul>\n<li>对象的属性名后</li>\n<li>前缀一元运算符后</li>\n<li>后缀一元运算符前</li>\n<li>函数调用括号前</li>\n<li>无论是函数声明还是函数表达式，’(‘前不要空格</li>\n<li>数组的’[‘后和’]’前</li>\n<li>对象的’{‘后和’}’前</li>\n<li>运算符’(‘后和’)’前</li>\n</ul>\n<p>以下几种情况需要空格：</p>\n<ul>\n<li>二元运算符前后</li>\n<li>三元运算符’?:’前后</li>\n<li>代码块’{‘前</li>\n<li>下列关键字前：else, while, catch, finally</li>\n<li>下列关键字后：if, else, for, while, do, switch, case, try, catch, finally, with, return, typeof</li>\n<li>单行注释’//‘后（若单行注释和代码同行，则’//‘前也需要），多行注释’*’后</li>\n<li>对象的属性值前</li>\n<li>for循环，分号后留有一个空格，前置条件如果有多个，逗号后留一个空格</li>\n<li>无论是函数声明还是函数表达式，’{‘前一定要有空格</li>\n<li>函数的参数之间</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;</div><div class=\"line\">    <span class=\"attr\">b</span> :<span class=\"number\">1</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;</div><div class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\">++ x;</div><div class=\"line\">y ++;</div><div class=\"line\">z = x?<span class=\"number\">1</span>:<span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\">++x;</div><div class=\"line\">y++;</div><div class=\"line\">z = x ? <span class=\"number\">1</span> : <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = [ <span class=\"number\">1</span>, <span class=\"number\">2</span> ];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = ( <span class=\"number\">1</span>+<span class=\"number\">2</span> )*<span class=\"number\">3</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = (<span class=\"number\">1</span> + <span class=\"number\">2</span>) * <span class=\"number\">3</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// no space before '(', one space before '&#123;', one space between function parameters</span></div><div class=\"line\"><span class=\"keyword\">var</span> doSomething = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, c</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do something</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// no space before '('</span></div><div class=\"line\">doSomething(item);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">6</span>;i++)&#123;</div><div class=\"line\">    x++;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</div><div class=\"line\">    x++;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"空行-1\"><a href=\"#空行-1\" class=\"headerlink\" title=\"空行\"></a>空行</h2><p>以下几种情况需要空行：</p>\n<ul>\n<li>变量声明后（当变量声明在代码块的最后一行时，则无需空行）</li>\n<li>注释前（当注释在代码块的第一行时，则无需空行）</li>\n<li>代码块后（在函数调用、数组、对象中则无需空行）</li>\n<li>文件最后保留一个空行</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// need blank line after variable declaration</span></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// not need blank line when variable declaration is last expression in the current block</span></div><div class=\"line\"><span class=\"keyword\">if</span> (x &gt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> y = x + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// need blank line before line comment</span></div><div class=\"line\">a++;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// not need blank line when comment is first line of block</span></div><div class=\"line\">    <span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// need blank line after blocks</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">continue</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">bar</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// not need blank line when in argument list, array, object</span></div><div class=\"line\">func(</div><div class=\"line\">    <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        a++;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"number\">3</span></div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> foo = [</div><div class=\"line\">    <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        a++;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"number\">3</span></div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">b</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        a++;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">c</span>: <span class=\"number\">3</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"换行-1\"><a href=\"#换行-1\" class=\"headerlink\" title=\"换行\"></a>换行</h2><p>换行的地方，行末必须有’,’或者运算符；</p>\n<p>以下几种情况不需要换行：</p>\n<ul>\n<li>下列关键字后：<code>else</code>, <code>catch</code>, <code>finally</code></li>\n<li>代码块’{‘前</li>\n</ul>\n<p>以下几种情况需要换行：</p>\n<ul>\n<li>代码块’{‘后和’}’前</li>\n<li>变量赋值后</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;</div><div class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">1</span></div><div class=\"line\">    , <span class=\"attr\">c</span>: <span class=\"number\">2</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">x = y</div><div class=\"line\">    ? <span class=\"number\">1</span> : <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;</div><div class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">c</span>: <span class=\"number\">2</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">x = y ? <span class=\"number\">1</span> : <span class=\"number\">2</span>;</div><div class=\"line\">x = y ?</div><div class=\"line\">    <span class=\"number\">1</span> : <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// no need line break with 'else', 'catch', 'finally'</span></div><div class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"keyword\">var</span> a, foo = <span class=\"number\">7</span>, b,</div><div class=\"line\">    c, bar = <span class=\"number\">8</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> a,</div><div class=\"line\">    foo = <span class=\"number\">7</span>,</div><div class=\"line\">    b, c, bar = <span class=\"number\">8</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"单行注释\"><a href=\"#单行注释\" class=\"headerlink\" title=\"单行注释\"></a>单行注释</h2><p>双斜线后，必须跟一个空格；</p>\n<p>缩进与下一行代码保持一致；</p>\n<p>可位于一个代码行的末尾，与代码间隔一个空格。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</div><div class=\"line\">    <span class=\"comment\">// if you made it here, then all security checks passed</span></div><div class=\"line\">    allowed();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> zhangsan = <span class=\"string\">'zhangsan'</span>; <span class=\"comment\">// one space after code</span></div></pre></td></tr></table></figure>\n<h2 id=\"多行注释\"><a href=\"#多行注释\" class=\"headerlink\" title=\"多行注释\"></a>多行注释</h2><p>最少三行, ‘*’后跟一个空格，具体参照右边的写法；</p>\n<p>建议在以下情况下使用：</p>\n<ul>\n<li>难于理解的代码段</li>\n<li>可能存在错误的代码段</li>\n<li>浏览器特殊的HACK代码</li>\n<li>业务逻辑强相关的代码</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * one space after '*'</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"文档注释\"><a href=\"#文档注释\" class=\"headerlink\" title=\"文档注释\"></a>文档注释</h2><p>各类标签<code>@param</code>, <code>@method</code>等请参考<a href=\"http://usejsdoc.org/\" target=\"_blank\" rel=\"external\">usejsdoc</a>和<a href=\"http://yuri4ever.github.io/jsdoc/\" target=\"_blank\" rel=\"external\">JSDoc Guide</a>；</p>\n<p>建议在以下情况下使用：</p>\n<ul>\n<li>所有常量</li>\n<li>所有函数</li>\n<li>所有类</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @func</div><div class=\"line\"> * @desc 一个带参数的函数</div><div class=\"line\"> * @param &#123;string&#125; a - 参数a</div><div class=\"line\"> * @param &#123;number&#125; b=1 - 参数b默认值为1</div><div class=\"line\"> * @param &#123;string&#125; c=1 - 参数c有两种支持的取值&lt;/br&gt;1—表示x&lt;/br&gt;2—表示xx</div><div class=\"line\"> * @param &#123;object&#125; d - 参数d为一个对象</div><div class=\"line\"> * @param &#123;string&#125; d.e - 参数d的e属性</div><div class=\"line\"> * @param &#123;string&#125; d.f - 参数d的f属性</div><div class=\"line\"> * @param &#123;object[]&#125; g - 参数g为一个对象数组</div><div class=\"line\"> * @param &#123;string&#125; g.h - 参数g数组中一项的h属性</div><div class=\"line\"> * @param &#123;string&#125; g.i - 参数g数组中一项的i属性</div><div class=\"line\"> * @param &#123;string&#125; [j] - 参数j是一个可选参数</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a, b, c, d, g, j</span>) </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"变量命名\"><a href=\"#变量命名\" class=\"headerlink\" title=\"变量命名\"></a>变量命名</h2><ul>\n<li>标准变量采用驼峰式命名（除了对象的属性外，主要是考虑到cgi返回的数据）</li>\n<li>‘ID’在变量名中全大写</li>\n<li>‘URL’在变量名中全大写</li>\n<li>‘Android’在变量名中大写第一个字母</li>\n<li>‘iOS’在变量名中小写第一个，大写后两个字母</li>\n<li>常量全大写，用下划线连接</li>\n<li>构造函数，大写第一个字母</li>\n<li>jquery对象必须以’$’开头命名</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> thisIsMyName;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> goodID;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> reportURL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> AndroidVersion;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> iOSVersion;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> MAX_COUNT = <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"keyword\">var</span> body = $(<span class=\"string\">'body'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> $body = $(<span class=\"string\">'body'</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h2><p>一个函数作用域中所有的变量声明尽量提到函数首部，用一个var声明，不允许出现两个连续的var声明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomethingWithItems</span>(<span class=\"params\">items</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// use one var</span></div><div class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"number\">10</span>,</div><div class=\"line\">        result = value + <span class=\"number\">10</span>,</div><div class=\"line\">        i,</div><div class=\"line\">        len;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, len = items.length; i &lt; len; i++) &#123;</div><div class=\"line\">        result += <span class=\"number\">10</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>无论是函数声明还是函数表达式，’(‘前不要空格，但’{‘前一定要有空格；</p>\n<p>函数调用括号前不需要空格；</p>\n<p>立即执行函数外必须包一层括号；</p>\n<p>不要给inline function命名；</p>\n<p>参数之间用’, ‘分隔，注意逗号后有一个空格。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// no space before '(', but one space before'&#123;'</span></div><div class=\"line\"><span class=\"keyword\">var</span> doSomething = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do something</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do something</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\">doSomething (item);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\">doSomething(item);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// requires parentheses around immediately invoked function expressions</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>].forEach(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>].forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// use ', ' between function parameters</span></div><div class=\"line\"><span class=\"keyword\">var</span> doSomething = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, c</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do something</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"数组、对象\"><a href=\"#数组、对象\" class=\"headerlink\" title=\"数组、对象\"></a>数组、对象</h2><p>对象属性名不需要加引号；</p>\n<p>对象以缩进的形式书写，不要写在一行；</p>\n<p>数组、对象最后不要有逗号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;</div><div class=\"line\">    <span class=\"string\">'b'</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">b</span>: <span class=\"number\">1</span>&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;</div><div class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">c</span>: <span class=\"number\">2</span>,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;</div><div class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">c</span>: <span class=\"number\">2</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"括号\"><a href=\"#括号\" class=\"headerlink\" title=\"括号\"></a>括号</h2><p>下列关键字后必须有大括号（即使代码块的内容只有一行）：<code>if</code>, <code>else</code>, <code>for</code>, <code>while</code>, <code>do</code>, <code>switch</code>, <code>try</code>, <code>catch</code>, <code>finally</code>, <code>with</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (condition)</div><div class=\"line\">    doSomething();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</div><div class=\"line\">    doSomething();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"null\"><a href=\"#null\" class=\"headerlink\" title=\"null\"></a>null</h2><p>适用场景：</p>\n<ul>\n<li>初始化一个将来可能被赋值为对象的变量</li>\n<li>与已经初始化的变量做比较</li>\n<li>作为一个参数为对象的函数的调用传参</li>\n<li>作为一个返回对象的函数的返回值</li>\n</ul>\n<p>不适用场景：</p>\n<ul>\n<li>不要用null来判断函数调用时有无传参</li>\n<li>不要与未初始化的变量做比较</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (b === <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// not mean b is not supply</span></div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (a === <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"literal\">null</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (a === <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"undefined\"><a href=\"#undefined\" class=\"headerlink\" title=\"undefined\"></a>undefined</h2><p>永远不要直接使用undefined进行变量判断；</p>\n<p>使用typeof和字符串’undefined’对变量进行判断。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (person === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> person === <span class=\"string\">'undefined'</span>) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"jshint\"><a href=\"#jshint\" class=\"headerlink\" title=\"jshint\"></a>jshint</h2><p>用’===’, ‘!==’代替’==’, ‘!=’；</p>\n<p>for-in里一定要有hasOwnProperty的判断；</p>\n<p>不要在内置对象的原型上添加方法，如Array, Date；</p>\n<p>不要在内层作用域的代码里声明了变量，之后却访问到了外层作用域的同名变量；</p>\n<p>变量不要先使用后声明；</p>\n<p>不要在一句代码中单单使用构造函数，记得将其赋值给某个变量；</p>\n<p>不要在同个作用域下声明同名变量；</p>\n<p>不要在一些不需要的地方加括号，例：delete(a.b)；</p>\n<p>不要使用未声明的变量（全局变量需要加到.jshintrc文件的globals属性里面）；</p>\n<p>不要声明了变量却不使用；</p>\n<p>不要在应该做比较的地方做赋值；</p>\n<p>debugger不要出现在提交的代码里；</p>\n<p>数组中不要存在空元素；</p>\n<p>不要在循环内部声明函数；</p>\n<p>不要像这样使用构造函数，例：<code>new function () { ... }, new Object</code>；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (a == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">    a++;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (a === <span class=\"number\">1</span>) &#123;</div><div class=\"line\">    a++;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> obj) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (obj.hasOwnProperty(key)) &#123;</div><div class=\"line\">        <span class=\"comment\">// be sure that obj[key] belongs to the object and was not inherited</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(obj[key]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.count = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> x = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    x += <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(x);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"keyword\">delete</span>(obj.attr);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">delete</span> obj.attr;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (a = <span class=\"number\">10</span>) &#123;</div><div class=\"line\">    a++;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, , , <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"keyword\">var</span> nums = [];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</div><div class=\"line\">        nums[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> i + j;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;(i));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"keyword\">var</span> singleton = <span class=\"keyword\">new</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> privateVar;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.publicMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        privateVar = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.publicMethod2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        privateVar = <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"杂项-1\"><a href=\"#杂项-1\" class=\"headerlink\" title=\"杂项\"></a>杂项</h2><p>不要混用tab和space；</p>\n<p>不要在一处使用多个tab或space；</p>\n<p>换行符统一用’LF’；</p>\n<p>对上下文this的引用只能使用’_this’, ‘that’, ‘self’其中一个来命名；</p>\n<p>行尾不要有空白字符；</p>\n<p>switch的falling through和no default的情况一定要有注释特别说明；</p>\n<p>不允许有空的代码块。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// not good</span></div><div class=\"line\"><span class=\"keyword\">var</span> a   = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// not good</span></div><div class=\"line\">    <span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// good</span></div><div class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// good</span></div><div class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// good</span></div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">switch</span> (condition) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">        ...</div><div class=\"line\">        break;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">        ...</div><div class=\"line\">    <span class=\"comment\">// why fall through</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">4</span></div><div class=\"line\">        ...</div><div class=\"line\">        break;</div><div class=\"line\">    <span class=\"comment\">// why no default</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// not good with empty block</span></div><div class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"编辑器配置和构建检查\"><a href=\"#编辑器配置和构建检查\" class=\"headerlink\" title=\"编辑器配置和构建检查\"></a>编辑器配置和构建检查</h1><h2 id=\"sublime3插件\"><a href=\"#sublime3插件\" class=\"headerlink\" title=\"sublime3插件\"></a>sublime3插件</h2><p>1.安装node包</p>\n<ul>\n<li>jscs <code>npm install jscs -g</code></li>\n<li>jshint <code>npm install jshint -g</code></li>\n<li>csscomb <code>npm install csscomb -g</code></li>\n<li>csslint <code>npm install csslint -g</code></li>\n</ul>\n<p>2.安装gem包</p>\n<ul>\n<li>scss-lint <code>gem install scss_lint</code></li>\n</ul>\n<ol>\n<li>安装sublime3 <a href=\"https://packagecontrol.io/installation#st3\" target=\"_blank\" rel=\"external\">Package Control</a></li>\n</ol>\n<ul>\n<li>按下 <code>ctrl+` </code></li>\n<li>复制粘贴以下代码 <code>import urllib.request,os,hashlib; h = &#39;eb2297e1a458f27d836c04bb0cbaf282&#39; + &#39;d0e7a3098092775ccb37ca9d6b2e4b7d&#39;; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &#39;http://packagecontrol.io/&#39; + pf.replace(&#39; &#39;, &#39;%20&#39;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&#39;Error validating download (got %s instead of %s), please try manual install&#39; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &#39;wb&#39; ).write(by)</code></li>\n</ul>\n<p>4.安装sublime3插件</p>\n<p>按下 <code>ctrl+shift+p</code>，输入’ip’（Install Package）<br>输入以下插件的名字，按顺序逐个进行安装：</p>\n<ul>\n<li>EditorConfig</li>\n<li>Sass</li>\n<li>SublimeLinter</li>\n<li>SublimeLinter-jscs</li>\n<li>SublimeLinter-jshint</li>\n<li>SublimeLinter-csslint</li>\n<li>SublimeLinter-contrib-scss-lint</li>\n<li>JSFormat</li>\n<li>CSScomb</li>\n</ul>\n<p>5.插件的配置文件</p>\n<p>将以下配置文件分别下载后放入项目根目录下：</p>\n<ul>\n<li>EditorConfig <a href=\"https://alloyteam.github.io/CodeGuide/.editorconfig\" target=\"_blank\" rel=\"external\">配置文件</a></li>\n<li>JSCS <a href=\"https://alloyteam.github.io/CodeGuide/.jscsrc\" target=\"_blank\" rel=\"external\">配置文件</a></li>\n<li><p>JSHint <a href=\"https://alloyteam.github.io/CodeGuide/.jshintrc\" target=\"_blank\" rel=\"external\">配置文件</a><br>注意：全局变量需要手动加到配置文件的globals属性里，例：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"globals\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"ImageHandle\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>CSSLint <a href=\"https://alloyteam.github.io/CodeGuide/.csslintrc\" target=\"_blank\" rel=\"external\">配置文件</a></p>\n</li>\n<li>SCSS-Lint <a href=\"https://alloyteam.github.io/CodeGuide/.scss-lint.yml\" target=\"_blank\" rel=\"external\">配置文件</a></li>\n</ul>\n<p>6.编辑器及插件设置</p>\n<ul>\n<li><code>sublime3</code> 自身</li>\n</ul>\n<p>Preferences-&gt;Setting-User，增加下面两个配置：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"translate_tabs_to_spaces\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">\"word_wrap\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>点击右下角的Spaces-&gt;Convert Indentation to Spaces可以将文件中的所有tab转换成空格</p>\n<ul>\n<li><code>JSFormat</code></li>\n</ul>\n<p>Preferences-&gt;Package Settings-&gt;JSFormat-&gt;Setting-User，下载<a href=\"https://alloyteam.github.io/CodeGuide/jsformat_setting_user.json\" target=\"_blank\" rel=\"external\">配置文件</a>覆盖</p>\n<p>配置好后格式化的默认快捷键是 <code>ctrl+alt+f</code></p>\n<ul>\n<li><code>SublimeLinter</code></li>\n</ul>\n<p>右键-&gt;SublimeLinter-&gt;Lint Mode，有4种检查模式，建议选择 <code>Load/save</code></p>\n<p>右键-&gt;SublimeLinter-&gt;Mark Style，建议选择 <code>Outline</code></p>\n<p>右键-&gt;SublimeLinter-&gt;Choose Gutter Theme，建议选择 <code>Blueberry-round</code></p>\n<p>右键-&gt;SublimeLinter-&gt;Open User Settings，将linter里面jscs的args改成 <code>[&quot;--verbose&quot;]</code>，将linter里面csslint的ignore改成 <code>&quot;box-model,adjoining-classes,box-sizing,compatible-vendor-prefixes,gradients,text-indent,fallback-colors,star-property-hack,underscore-property-hack,bulletproof-font-face,font-faces,import,regex-selectors,universal-selector,unqualified-attributes,overqualified-elements,duplicate-background-images,floats,font-sizes,ids,important,outline-none,qualified-headings,unique-headings&quot;</code></p>\n<p>当光标处于有错误的代码行时，详细的错误信息会显示在下面的状态栏中</p>\n<p>右键-&gt;SublimeLinter可以看到所有的快捷键，<code>其中 ctrl+k, a</code> 可以列出所有错误</p>\n<ul>\n<li><code>CSScomb</code></li>\n</ul>\n<p>Preferences-&gt;Package Settings-&gt;CSScomb-&gt;Setting-User，下载<a href=\"https://alloyteam.github.io/CodeGuide/csscomb_setting_user.json\" target=\"_blank\" rel=\"external\">配置文件</a>覆盖</p>\n<p>配置好后格式化的默认快捷键是 <code>ctrl+shift+c</code></p>\n<h2 id=\"grunt插件\"><a href=\"#grunt插件\" class=\"headerlink\" title=\"grunt插件\"></a>grunt插件</h2><p>1.在项目中安装grunt插件</p>\n<ul>\n<li>jscs <code>npm install grunt-jscs --save-dev</code></li>\n<li>jshint <code>npm install grunt-contrib-jshint --save-dev</code></li>\n<li>csslint <code>npm install grunt-contrib-csslint --save-dev</code></li>\n<li>scss-lint <code>npm install grunt-scss-lint --save-dev</code></li>\n</ul>\n<p>2.插件的配置文件</p>\n<ul>\n<li><p><code>JSCS</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    options: &#123;</div><div class=\"line\">        config: true,</div><div class=\"line\">        verbose: true</div><div class=\"line\">    &#125;,</div><div class=\"line\">    files: &#123;</div><div class=\"line\">        src: [...]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>JSHint</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    options: &#123;</div><div class=\"line\">        jshintrc: true</div><div class=\"line\">    &#125;,</div><div class=\"line\">    files: &#123;</div><div class=\"line\">        src: [...]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>CSSLint</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    options: &#123;</div><div class=\"line\">        csslintrc: '.csslintrc'</div><div class=\"line\">    &#125;,</div><div class=\"line\">    files: &#123;</div><div class=\"line\">        src: [...]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>SCSS-Lint</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    options: &#123;</div><div class=\"line\">        config: '.scss-lint.yml'</div><div class=\"line\">    &#125;,</div><div class=\"line\">    files: &#123;</div><div class=\"line\">        src: [...]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"前端工程化或者持续集成-CI-方式使用Linter工具\"><a href=\"#前端工程化或者持续集成-CI-方式使用Linter工具\" class=\"headerlink\" title=\"前端工程化或者持续集成(CI)方式使用Linter工具\"></a>前端工程化或者持续集成(CI)方式使用Linter工具</h2><h3 id=\"什么是JSLint和JSHint\"><a href=\"#什么是JSLint和JSHint\" class=\"headerlink\" title=\"什么是JSLint和JSHint?\"></a>什么是JSLint和JSHint?</h3><p>JSLint是一个静态代码分析工具，JSHint 是在 JSLint 代码基础上二次开发而来的。</p>\n<h3 id=\"JSLint-还是-JSHint-？\"><a href=\"#JSLint-还是-JSHint-？\" class=\"headerlink\" title=\"JSLint 还是 JSHint ？\"></a>JSLint 还是 JSHint ？</h3><p>联系</p>\n<ul>\n<li>一样的用途</li>\n<li>均拥有大量的用户</li>\n<li>相同的 JavaScript 代码检查和分析内核</li>\n<li>均已成功用于多个知名的 JavaScript 项目</li>\n</ul>\n<p>区别</p>\n<ul>\n<li>JSLint 对代码的合规要求极为严格</li>\n<li>JSHint 对代码的合规要求可以很宽松</li>\n<li>JSLint 可配置的选项很少</li>\n<li>JSHint 可配置的选项很多</li>\n</ul>\n<h3 id=\"如何使用？\"><a href=\"#如何使用？\" class=\"headerlink\" title=\"如何使用？\"></a>如何使用？</h3><p>1.通过主流编辑器，IDE</p>\n<p>通过主流编辑器，IDE都有了JSHint的插件。外还有很多基于JSHint的<a href=\"http://jshint.com/install/\" target=\"_blank\" rel=\"external\">酷炫小项目</a></p>\n<p>2.通过（工程化）前端构建工具基础</p>\n<p>前端构建工具Grunt、Gulp和Webpack等都有其对应插件<br>通过这种方式集成进去会方便美观很多。</p>\n<p>这里默认npm的相关知识你都知道，不清楚的还是先去了解一下。</p>\n<p><strong>和Gulp集成</strong></p>\n<p>首先，安装JSHint的Gulp插件：<br><code>npm install gulp-jshint --save-dev</code></p>\n<p>然后，编写运行JSHint的任务</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> jshint = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-jshint'</span>);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'hint'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.src(<span class=\"string\">'./app/*.js'</span>)</div><div class=\"line\">        .pipe(jshint())</div><div class=\"line\">        .pipe(jshint.reporter(<span class=\"string\">'default'</span>));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>然后，只需要运行<code>gulp hint</code>即可检查代码。<br>就是这么简单。</p>\n<p><strong>JSHint的自定义规则</strong></p>\n<p>通过在根目录创建文件<code>.jshintrc</code>，例如<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"sub\"</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">\"laxbreak\"</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">\"laxcomma\"</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">\"regexp\"</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">\"asi\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">\"browser\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">\"loopfunc\"</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">\"expr\"</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">\"node\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">\"es5\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">\"esnext\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">\"bitwise\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">\"curly\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">\"immed\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">\"latedef\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">  <span class=\"attr\">\"expr\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">\"eqeqeq\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">  <span class=\"attr\">\"eqnull\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">  <span class=\"attr\">\"newcap\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">\"noarg\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">\"undef\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">\"proto\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">\"strict\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">  <span class=\"attr\">\"smarttabs\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>具体的含义请参考<a href=\"http://jshint.com/docs/options/\" target=\"_blank\" rel=\"external\">文档</a>。你也可以在你的项目目录下添加一个.jshintrc文件，JSHint会在检测文件时从文件所在目录往上找，直到找到jshintrc文件为止。</p>\n<h3 id=\"ESLint\"><a href=\"#ESLint\" class=\"headerlink\" title=\"ESLint\"></a>ESLint</h3><p>JSHint 不支持 JSX 语法。所以有了 ESLint 。</p>\n<p>ESLint 主要有以下特点：</p>\n<ul>\n<li>默认规则包含所有 JSLint、JSHint 中存在的规则，易迁移；</li>\n<li>规则可配置性高：可设置「警告」、「错误」两个 error 等级，或者直接禁用；</li>\n<li>包含代码风格检测的规则（可以丢掉 JSCS 了）；</li>\n<li>支持插件扩展、自定义规则。</li>\n</ul>\n<p><strong><em>使用ESLint</em></strong></p>\n<p><strong>配置</strong></p>\n<p>可以通过以下三种方式配置 ESLint:</p>\n<ul>\n<li>使用 .eslintrc 文件（支持 JSON 和 YAML 两种语法）；</li>\n<li>在 package.json 中添加 eslintConfig 配置块；</li>\n<li>直接在代码文件中定义。</li>\n</ul>\n<p><code>.eslintrc</code> 文件示例：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"env\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"browser\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"globals\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"angular\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"rules\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"camelcase\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">\"curly\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">\"brace-style\"</span>: [<span class=\"number\">2</span>, <span class=\"string\">\"1tbs\"</span>],</div><div class=\"line\">    <span class=\"attr\">\"quotes\"</span>: [<span class=\"number\">2</span>, <span class=\"string\">\"single\"</span>],</div><div class=\"line\">    <span class=\"attr\">\"semi\"</span>: [<span class=\"number\">2</span>, <span class=\"string\">\"always\"</span>],</div><div class=\"line\">    <span class=\"attr\">\"space-in-brackets\"</span>: [<span class=\"number\">2</span>, <span class=\"string\">\"never\"</span>],</div><div class=\"line\">    <span class=\"attr\">\"space-infix-ops\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>.eslintrc</code> 放在项目根目录，则会应用到整个项目；如果子目录中也包含 <code>.eslintrc</code> 文件，则子目录会忽略根目录的配置文件，应用该目录中的配置文件。这样可以方便地对不同环境的代码应用不同的规则。</p>\n<p><code>package.json</code> 示例：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"mypackage\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.1\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"eslintConfig\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"env\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"browser\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">      <span class=\"attr\">\"node\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>文件内配置</strong></p>\n<p>代码文件内配置的规则会覆盖配置文件里的规则。</p>\n<p>禁用 ESLint：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* eslint-disable */</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">key</span>: <span class=\"string\">'value'</span>, &#125;; <span class=\"comment\">// I don't care about IE8  </span></div><div class=\"line\"><span class=\"comment\">/* eslint-enable */</span></div></pre></td></tr></table></figure></p>\n<p>禁用一条规则：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*eslint-disable no-alert */</span></div><div class=\"line\">alert(<span class=\"string\">'doing awful things'</span>);  </div><div class=\"line\"><span class=\"comment\">/* eslint-enable no-alert */</span></div></pre></td></tr></table></figure></p>\n<p>调整规则：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* eslint no-comma-dangle:1 */</span></div><div class=\"line\"><span class=\"comment\">// Make this just a warning, not an error</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">key</span>: <span class=\"string\">'value'</span>, &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>工作流集成、编辑器集成等</strong></p>\n<p>以 WebStorm 为例，只要全局安装 ESLint 或者在项目中依赖中添加 ESLint ，然后在设置里开启 ESLint 即可。其他编辑可以从 官方文档 中获得获得具体信息。</p>\n<p>具体可查看<a href=\"http://eslint.org/docs/user-guide/integrations\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<p>构建系统集成</p>\n<p>在 Gulp 中使用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);  </div><div class=\"line\"><span class=\"keyword\">var</span> eslint = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-eslint'</span>);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'lint'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'client/app/**/*.js'</span>)</div><div class=\"line\">    .pipe(eslint())</div><div class=\"line\">    .pipe(eslint.format());</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>其他构建工具参考官方文档</p>\n<p><strong>自定义规则</strong></p>\n<p>显然，ESLint 内置的规则不可能包罗所有需求。可以通过插件实现自定义规则，这是 ESLint 最有卖点的功能。在 NPM 上以 <a href=\"https://www.npmjs.com/browse/keyword/eslintplugin\" target=\"_blank\" rel=\"external\">eslintplugin</a> 为关键词，可以搜索到很多插件，包括 <a href=\"https://www.npmjs.com/package/eslint-plugin-react\" target=\"_blank\" rel=\"external\">eslint-plugin-react</a> 。如果有自行开发插件的需求，可以阅读 <a href=\"http://eslint.org/docs/developer-guide/working-with-plugins\" target=\"_blank\" rel=\"external\">ESLint 插件开发文档</a> 。</p>\n<p>以 <code>eslint-plugin-react</code> 为例，安装以后，需要在 ESLint 配置中开启插件，其中 <code>eslint-plugin-</code> 前缀可以省略：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"plugins\"</span>: [</div><div class=\"line\">      <span class=\"string\">\"react\"</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接下来开启 ESLint JSX 支持（ESLint 内置选项）：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"ecmaFeatures\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"jsx\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"关于auto-fix\"><a href=\"#关于auto-fix\" class=\"headerlink\" title=\"关于auto fix\"></a>关于auto fix</h3><p>有时我们希望一些简单的错误可以工具帮助我们自动修复。</p>\n<p>我们可以寻找一下方式，假如使用JSLint或JSHint,我们可以寻找一些编辑器插件。或者npm工具，如<a href=\"https://github.com/jshint/fixmyjs\" target=\"_blank\" rel=\"external\">fixmyjs</a> 、 <a href=\"https://github.com/kirjs/gulp-fixmyjs\" target=\"_blank\" rel=\"external\">gulp-fixmyjs</a>。</p>\n<p>假如使用 eslint ，其自带参数 <code>-- --fix</code> 可帮助自动修复部分错误。</p>\n","categories":[],"tags":["javascript","前端"]},{"title":"工作中的那点事","url":"http://yoursite.com/2017/01/13/开心一刻/","content":"<blockquote>\n<p>记录一些一些，自己看…</p>\n</blockquote>\n<a id=\"more\"></a>\n<!--\n# 别人部门\n\n：谁又把麦克风打开了...\n\n\n# 水宝宝提供\n\n![](./kxyk-kb-error.jpg)\n\n意思是输入法联想不一致了（黑人问号）\n\n# zz \n\n大哥，大哥\n![](./zwj-1.png)-->\n<h2 id=\"记一个hybrid框架分享交流\"><a href=\"#记一个hybrid框架分享交流\" class=\"headerlink\" title=\"记一个hybrid框架分享交流\"></a>记一个hybrid框架分享交流</h2><blockquote>\n<p>以下Q和B是同一公司，A是过来分享的人员。</p>\n</blockquote>\n<p>Q:这套东西买了多少钱？<br>B:没有啊，那个人只是过来分享这个框架的。</p>\n<p>Q:你们这个是转成原生的吗？类似codova那种吗？<br>A:不是，这只是一个hybrid.</p>\n<p>Q:那你这里面就只有一个webview嘛，什么内核？<br>A:就是原生的webview啊,封装了和native交互的协议接口。</p>\n<p>Q:那有没有封装那些摄像头啊，硬件层面的那些东西啊？<br>A:没有，我们不写业务层的东西，要用到就自己实现就行。</p>\n<p>Q:这些这么基础的都没有，那你这里面还做了什么？<br>A:没有啊，就是定义了一些交互的协议。</p>\n<p>Q:那代码有多少？<br>B:挺多的，大概200个java文件吧，不过挺多代码没用到的。<br>A:这个版本那个时候催我们催的很急，也没时间重构，你看到哪些没用到你们可以删掉。</p>\n<p>Q:那你现在帮我们删了它啊！<br>A:现在我要删也可以，但是删错了有问题还是你们改。其实我现在已经从那家公司离职了。</p>\n<p>Q:什么公司？<br>B:PA</p>\n<p>Q:这套东西是PA的！？<br>A:是BLN的。</p>\n<p>Q:BLN是什么公司？<br>A:是做社交的。</p>\n<p>Q:社交为什么要做这种东西？<br>A:我也不知道啊。</p>\n","categories":[],"tags":["随笔"]},{"title":"【译】13个最佳实践来保护您的Web应用程序","url":"http://yoursite.com/2017/01/10/13个最佳实践来保护您的Web应用程序/","content":"<blockquote>\n<p><a href=\"http://nodewebapps.com/2017/01/03/13-security-best-practices-for-your-web-application/\" target=\"_blank\" rel=\"external\">13 best practices to secure your web application</a></p>\n</blockquote>\n<p>每个人都同意Web应用程序的安全性非常重要，但很少认真对待。 以下是在部署下一个Web应用程序之前应该遵循的13步安全检查清单。</p>\n<a id=\"more\"></a>\n<p>我已经添加了一些npm模块的链接，在适当的时候，有助于解决这些问题。</p>\n<h1 id=\"使用SSL进行通信\"><a href=\"#使用SSL进行通信\" class=\"headerlink\" title=\"使用SSL进行通信\"></a>使用SSL进行通信</h1><p>如果你的web应用程序应该做一件事，就是这样。 确保与服务器的所有通信都通过SSL。 这确保用户和服务器之间的通信是加密的。<br>通常，如果您使用的是nginx或某些负载均衡器，SSL将在它到达您的应用程序之前被终止。 但是，如果您只是使用Express服务器，它仍然可以支持SSL。 查看此<a href=\"http://stackoverflow.com/questions/11804202/how-do-i-setup-a-ssl-certs-for-an-express-js-server\" target=\"_blank\" rel=\"external\">StackOverflow</a>响应，其中链接到有关如何在Express服务器上设置SSL的相关文档。<br>您可以从StartSSL <a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"external\">LetsEncrypt</a>免费获得SSL证书，因此没有理由没有SSL证书。 （<a href=\"https://www.reddit.com/r/node/comments/5ltgxc/13_security_best_practices_for_your_web/\" target=\"_blank\" rel=\"external\">ipgof的说明</a>，StartSSL证书已经开始不信任Mozilla）。</p>\n<h1 id=\"始终转义用户数据\"><a href=\"#始终转义用户数据\" class=\"headerlink\" title=\"始终转义用户数据\"></a>始终转义用户数据</h1><p>确保用户通过表单输入的数据被转义。 有不同的方法这样做。 一种常见的方法是使用像<a href=\"https://github.com/chriso/validator.js\" target=\"_blank\" rel=\"external\">Validator.js</a>这样的清理器，它确保您的表单提交正确的数据类型。<br>在服务器端，您不应该直接将数据输入原始数据库查询。 更多关于这一点下面。</p>\n<h1 id=\"对数据库查询使用准备的语句\"><a href=\"#对数据库查询使用准备的语句\" class=\"headerlink\" title=\"对数据库查询使用准备的语句\"></a>对数据库查询使用准备的语句</h1><p>创建数据库请求，直接将用户信息传递到语句中是灾难的。 相反，请考虑使用预<a href=\"https://en.wikipedia.org/wiki/Prepared_statement\" target=\"_blank\" rel=\"external\">准备语句</a>。<br>预准备语句是由应用程序创建并发送到数据库的模板。 某些值未指定。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> PRODUCT (<span class=\"keyword\">name</span>, price) <span class=\"keyword\">VALUES</span> (?, ?)</div></pre></td></tr></table></figure></p>\n<p>准备的语句对<a href=\"https://en.wikipedia.org/wiki/SQL_injection\" target=\"_blank\" rel=\"external\">SQL注入</a>具有弹性，因为稍后使用不同协议传输的参数值不需要正确转义。 如果原始语句模板不是从外部输入派生的，则不能发生SQL注入。<br>如果你使用一个ORM来访问数据库（Mongoose，Sequelize，Waterline等），ORM通常会通过使用预备语句来处理SQL注入。 检查你的ORM的文档，看看他们是否这样做。</p>\n<h1 id=\"从请求网址中删除敏感信息\"><a href=\"#从请求网址中删除敏感信息\" class=\"headerlink\" title=\"从请求网址中删除敏感信息\"></a>从请求网址中删除敏感信息</h1><p>在构建Web应用程序时，我们通常在向用户显示数据时遵循RESTful约定。 例如，您可能有一个用户个人资料页面，并且网址可能如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/view/users/:userId</div></pre></td></tr></table></figure>\n<p>在这种情况下，我们向最终用户公开显示userId。 虽然这可能是好的，也可能有理由隐藏这些ID。 同样，您可以设想公开网址披露敏感信息的情况。<br>没有办法检查这个程序，但你应该通过你的根定义，仔细检查你的路由和查询字符串不显示敏感信息。</p>\n<h1 id=\"只允许重定向到已列入白名单或硬编码的网址\"><a href=\"#只允许重定向到已列入白名单或硬编码的网址\" class=\"headerlink\" title=\"只允许重定向到已列入白名单或硬编码的网址\"></a>只允许重定向到已列入白名单或硬编码的网址</h1><p>没有基于用户输入重定向到某处的服务器端重定向。 相反，每个重定向应该是一个硬编码的URL。 这样可以轻松测试并确保重定向到达您期望的位置。</p>\n<h1 id=\"停用所有未使用的API路由\"><a href=\"#停用所有未使用的API路由\" class=\"headerlink\" title=\"停用所有未使用的API路由\"></a>停用所有未使用的API路由</h1><p>在将Web应用程序部署到生产环境之前，请确保正在使用所有API路由，并禁用任何未使用或未受保护的API路由。 如果您使用自动生成REST API端点（如Sails或Feathers）的库，这一点尤其重要。</p>\n<h1 id=\"CSRF令牌应存在于创建或更新数据的所有页面中\"><a href=\"#CSRF令牌应存在于创建或更新数据的所有页面中\" class=\"headerlink\" title=\"CSRF令牌应存在于创建或更新数据的所有页面中\"></a>CSRF令牌应存在于创建或更新数据的所有页面中</h1><p>跨站点请求伪造（CSRF）是一种强制用户在其当前登录的Web应用程序上执行不需要的操作的攻击。</p>\n<p>确保所有页面都具有CSRF保护，或者至少创建或更新数据的所有页面（调用非GET API端点的页面）。</p>\n<p>在Node.js中，您可以使用csurf模块，为Express应用程序提供CSRF中间件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie-parser'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> csrf = <span class=\"built_in\">require</span>(<span class=\"string\">'csurf'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// setup route middlewares </span></div><div class=\"line\"><span class=\"keyword\">var</span> csrfProtection = csrf(&#123; <span class=\"attr\">cookie</span>: <span class=\"literal\">true</span> &#125;)</div><div class=\"line\"><span class=\"keyword\">var</span> parseForm = bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">false</span> &#125;)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// create express app </span></div><div class=\"line\"><span class=\"keyword\">var</span> app = express()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// parse cookies </span></div><div class=\"line\"><span class=\"comment\">// we need this because \"cookie\" is true in csrfProtection </span></div><div class=\"line\">app.use(cookieParser())</div><div class=\"line\"> </div><div class=\"line\">app.get(<span class=\"string\">'/form'</span>, csrfProtection, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// pass the csrfToken to the view </span></div><div class=\"line\">  res.render(<span class=\"string\">'send'</span>, &#123; <span class=\"attr\">csrfToken</span>: req.csrfToken() &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"> </div><div class=\"line\">app.post(<span class=\"string\">'/process'</span>, parseForm, csrfProtection, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'data is being processed'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>在视图内（取决于您的模板语言;此处演示了handlebars样式），将<code>csrfToken</code>value设置为名为<code>_csrf</code>的隐藏输入字段的值：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/process\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"_csrf\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&#123;&#123;csrfToken&#125;&#125;\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如果你使用像Bedrock或Sails的MVC框架，CSRF保护通常内置。阅读项目文档以了解如何启用它。</p>\n<h1 id=\"提供注销或退出session过期的功能\"><a href=\"#提供注销或退出session过期的功能\" class=\"headerlink\" title=\"提供注销或退出session过期的功能\"></a>提供注销或退出session过期的功能</h1><p>简单，但经常被忽视。 确保用户能够注销您的网站并使任何会话过期。 人们可以从公共计算机使用您的Web应用程序。 如果您使用的用户身份验证系统，如PassportJS，这通常是微不足道的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/logout'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123; </div><div class=\"line\">  req.logout(); <span class=\"comment\">//provided by passport</span></div><div class=\"line\">  res.redirect(<span class=\"string\">'/'</span>); </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>重要的是，测试这个，以确保session和cookie正在如预期的被删除。</p>\n<h1 id=\"HTTP仅Cookie属性用于所有页面和链接\"><a href=\"#HTTP仅Cookie属性用于所有页面和链接\" class=\"headerlink\" title=\"HTTP仅Cookie属性用于所有页面和链接\"></a>HTTP仅Cookie属性用于所有页面和链接</h1><p>这是另一个与预防XSS不可逆性相关的问题。 使用HttpOnly标记标记Cookie将告诉浏览器该特定的Cookie只应由服务器访问。 恶意用户将无法从JavaScript访问Cookie。</p>\n<p>在Node应用程序中实现这应该很容易。 只需更新您的会话配置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(session(&#123;  </div><div class=\"line\">  <span class=\"attr\">secret</span>: <span class=\"string\">'My super session secret'</span>,  </div><div class=\"line\">  <span class=\"attr\">cookie</span>: &#123;  <span class=\"attr\">httpOnly</span>: <span class=\"literal\">true</span>,  <span class=\"attr\">secure</span>: <span class=\"literal\">true</span>  &#125; </div><div class=\"line\">&#125;));</div></pre></td></tr></table></figure>\n<p>有一个关于<a href=\"https://blog.codinghorror.com/protecting-your-cookies-httponly/\" target=\"_blank\" rel=\"external\">great article on Coding Horror</a>，更详细地讨论到HTTP-Only Cookies。 我建议读读它。</p>\n<h1 id=\"敏感HTML表单输入字段的AUTOCOMPLETE-off属性\"><a href=\"#敏感HTML表单输入字段的AUTOCOMPLETE-off属性\" class=\"headerlink\" title=\"敏感HTML表单输入字段的AUTOCOMPLETE = off属性\"></a>敏感HTML表单输入字段的AUTOCOMPLETE = off属性</h1><p>另一个简单，但仍被忽视的安全方面。 在HTML表单中，应确保所有敏感输入字段都具有HTML属性<code>autocomplete=off</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">\"off\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>这会阻止浏览器自动设置某些属性。 您不应该为每个输入元素设置此值，因为它会损害用户体验。 只是审慎和思考通过用例。</p>\n<h1 id=\"将X-Frame-Options设置为DENY，SAMEORIGIN或ALLOW-FROM\"><a href=\"#将X-Frame-Options设置为DENY，SAMEORIGIN或ALLOW-FROM\" class=\"headerlink\" title=\"将X-Frame-Options设置为DENY，SAMEORIGIN或ALLOW-FROM\"></a>将X-Frame-Options设置为DENY，SAMEORIGIN或ALLOW-FROM</h1><p>X-Frame-Options HTTP响应头可以用于指示是否应允许浏览器在<frame>或<iframe>中呈现页面。 网站可以使用此功能来避免Clickjacking攻击，确保其内容不会嵌入其他网站。 为包含HTML内容的所有响应设置X-Frame-Options标题。 可能的值为“DENY”，“SAMEORIGIN”或“ALLOW-FROM <url>”。</url></iframe></p>\n<p>一般来说，除非您有足够的理由允许通过iframe查看您的Web应用程序，最好设置X-Frame-Options：DENY。</p>\n<p>在节点应用程序中，您可以使用像<a href=\"https://www.npmjs.com/package/helmet\" target=\"_blank\" rel=\"external\">Helmet</a>这样的模块来执行此操作，该模块提供多个安全HTTP头，包括此修复程序。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> helmet = <span class=\"built_in\">require</span>(<span class=\"string\">'helmet'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> app = express()</div><div class=\"line\"> </div><div class=\"line\">app.use(helmet(&#123;</div><div class=\"line\">  <span class=\"attr\">frameguard</span>: &#123;<span class=\"attr\">action</span>: <span class=\"string\">'deny'</span>&#125;</div><div class=\"line\">&#125;))</div></pre></td></tr></table></figure>\n<h1 id=\"设置安全HTTP头\"><a href=\"#设置安全HTTP头\" class=\"headerlink\" title=\"设置安全HTTP头\"></a>设置安全HTTP头</h1><p>从上一点开始，还有一些其他HTTP头，你应该为你的应用程序设置。</p>\n<h1 id=\"防止强力和DDOS攻击\"><a href=\"#防止强力和DDOS攻击\" class=\"headerlink\" title=\"防止强力和DDOS攻击\"></a>防止强力和DDOS攻击</h1><p>为了防止您的网站遭到大量请求的攻击并随后崩溃，您应该以某种类型的速率限制为您的所有请求。</p>\n<p>如果您正在使用Express构建Node应用程序，则可以使用<a href=\"https://www.npmjs.com/package/express-rate-limit\" target=\"_blank\" rel=\"external\">express-rate-limit</a>中间件。 <a href=\"https://www.npmjs.com/package/ratelimiter\" target=\"_blank\" rel=\"external\">ratelimiter npm</a>模块也很好，但它有一个Redis依赖。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> RateLimit = <span class=\"built_in\">require</span>(<span class=\"string\">'express-rate-limit'</span>);</div><div class=\"line\"> </div><div class=\"line\">app.enable(<span class=\"string\">'trust proxy'</span>); <span class=\"comment\">// only if you're behind a reverse proxy (Heroku, Bluemix, AWS if you use an ELB, custom Nginx setup, etc) </span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> limiter = <span class=\"keyword\">new</span> RateLimit(&#123;</div><div class=\"line\">  <span class=\"attr\">windowMs</span>: <span class=\"number\">15</span>*<span class=\"number\">60</span>*<span class=\"number\">1000</span>, <span class=\"comment\">// 15 minutes </span></div><div class=\"line\">  max: <span class=\"number\">100</span>, <span class=\"comment\">// limit each IP to 100 requests per windowMs </span></div><div class=\"line\">  delayMs: <span class=\"number\">0</span> <span class=\"comment\">// disable delaying - full speed until the max limit is reached </span></div><div class=\"line\">&#125;);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//  apply to all requests </span></div><div class=\"line\">app.use(limiter);</div></pre></td></tr></table></figure>\n","categories":[],"tags":["web"]},{"title":"【译】MobX文档","url":"http://yoursite.com/2017/01/05/MobX文档/","content":"<blockquote>\n<p><a href=\"http://mobxjs.github.io/mobx/intro/overview.html\" target=\"_blank\" rel=\"external\">mobxjs intro</a>  英文文档。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"1-MobX介绍\"><a href=\"#1-MobX介绍\" class=\"headerlink\" title=\"1.MobX介绍\"></a>1.MobX介绍</h1><h2 id=\"1-1-MobX要点\"><a href=\"#1-1-MobX要点\" class=\"headerlink\" title=\"1.1 MobX要点\"></a>1.1 MobX要点</h2><p>到目前为止，这一切听起来有点花哨，但使用MobX实现响应时应用只需要以下三步：</p>\n<p><strong>1.定义你的观察者状态</strong></p>\n<p>在任何您喜欢的数据结构中存储状态：objects、arrary、classes。循环数据结构或者关联数据，都没关系。只要确保你想要实现响应观察的状态改变的变量使用MobX来实现观察者。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;observable&#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> appState = observable(&#123;</div><div class=\"line\">    <span class=\"attr\">timer</span>: <span class=\"number\">0</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>2.创建一个视图来响应你的状态改变</strong></p>\n<p>我们没有让<code>appState</code>观察任何东西；你现在可以创建一个任何在<code>appState</code>里面的数据改变而自动更新的视图。<br>通常来讲，任何方法都可以变成观察了数据的响应式视图，并且MobX可以应用在任何使用ES5的环境下。但是，这里有一个来自使用ES6的react组件的视图例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;observer&#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx-react'</span>;</div><div class=\"line\"></div><div class=\"line\">@observer</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimerView</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.onReset.bind(this)&#125;</span>&gt;</span></span></div><div class=\"line\">                Seconds passed: &#123;this.props.appState.timer&#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    onReset () &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.props.appState.resetTimer();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">React.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TimerView</span> <span class=\"attr\">appState</span>=<span class=\"string\">&#123;appState&#125;</span> /&gt;</span>, document.body);</span></div></pre></td></tr></table></figure>\n<p>（关于方法<code>resetTimer</code>的实现，我们下一步再说明）</p>\n<p><strong>3.修改状态</strong></p>\n<p>第三步就是修改状态。不同于其他的框架，MobX不会约束你怎么做。这里的最佳实践，但是要记住的是：MobX帮助你做一个简单的事情。<br>接下来的代码会在每秒修改你的数据，并且UI会在需要的时候自动修改。没有明确的关系中定义的控制器的功能，改变状态或视图，应该更新。对于MobX检测所有关系只需装饰你的状态和视图使用<code>observable</code>就够了。这里有两个改变状态的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">appState.resetTimer = action(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reset</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    appState.timer = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">setInterval(action(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tick</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    appState.timer += <span class=\"number\">1</span>;</div><div class=\"line\">&#125;), <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n<p><code>action</code>的使用仅仅在我们使用严格模式（默认是关闭）的MobX，但是可以帮助你更好的组织应用的结构和表示函数修改状态的意图。</p>\n<h2 id=\"1-2-概念与原则\"><a href=\"#1-2-概念与原则\" class=\"headerlink\" title=\"1.2 概念与原则\"></a>1.2 概念与原则</h2><p><strong>概念</strong></p>\n<hr>\n<p>mobx区分下列应用程序中的概念。你看到他们在以前的主旨，但让我们挖掘多一点细节。</p>\n<p>1、State(状态)</p>\n<p>State是驱动你应用的数据。通常有特定区域的状态如一个todo的items和一个当前选中的元素的视图状态。记住，状态就像持有值的电子表格单元格。</p>\n<p>2、Derivations(推导)</p>\n<p>任何可以从状态中得到的，没有任何进一步的相互作用的我们把它叫做Derivations(推导)。Derivations 存在很多情况：</p>\n<ul>\n<li>用户界面（UI）</li>\n<li>Drived data(导出的数据)，如todos。</li>\n<li>Backend integrations(后端集成)，就像将更改发送到服务器。 </li>\n</ul>\n<p>MobX区分两种Derivations:</p>\n<ul>\n<li>Computed values(计算值)。这个数据会被一个方法通过当前观察的状态进行计算输出。</li>\n<li>Reactions(响应)。响应会在状态修改的发生作用。这些都是必要的反应和反应编程之间的桥梁。或者更简单的说，他们最终需要实现I/O(输入/输出).</li>\n</ul>\n<p>用户一开始使用MobX就企图经常使用reactions。这里有个黄金法则是：如果你想创建一个基于当前状态的值，那么请使用<code>computed</code>。<br>回到试算表的类比，公式是计算值的推导.。但你作为一个用户能够在屏幕上看到一个reaction(反应)需要重画的GUI部分。</p>\n<p>3、Actions(动作)</p>\n<p>一个Action是改变State的地方。用户事件，后端数据推送，预定的事件等等。一个动作就像在电子表格单元格中输入新值的一个用户一样。<br>Actions可以明确的定义在你的MobX项目来帮助你更清晰地组织代码结构。如果你使用的是严格模式，MobX将会强制要求你只能在actions里面修改你的State。</p>\n<h3 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h3><p>mobx支持单向数据流，动作状态发生变化，从而更新所有受影响的看法。</p>\n<p>Action -&gt; State -&gt; Views</p>\n<p>所有Derivations都是根据状态修改来自动更新(automatically)和原子(atomically)的。因此，是不可能观察中间值的。<br>默认情况下，所有Derivations同步(synchronously)更新。这意味着，例如，Actions可以安全地检查一个计算值后，直接改变状态。<br>Computed values的是懒更新(updated lazily)的。任何不在激活使用的Computed values不会被更新，除非发生了它需要的副作用(I/O)操作。如果视图不再使用，将自动垃圾回收。<br>所有Computed values都应是纯的（pure），他们不应该改版状态State。</p>\n<h3 id=\"Illustration-例证\"><a href=\"#Illustration-例证\" class=\"headerlink\" title=\"Illustration(例证)\"></a>Illustration(例证)</h3><p>下面列出了上述概念和原则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;observable, autorun&#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> todoStore = observable(&#123;</div><div class=\"line\">    <span class=\"comment\">/* some observable state */</span></div><div class=\"line\">    todos: [],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* a derived value */</span></div><div class=\"line\">    get completedCount() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.todos.filter(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> todo.completed).length;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* a function that observes the state */</span></div><div class=\"line\">autorun(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Completed %d of %d items\"</span>,</div><div class=\"line\">        todoStore.completedCount,</div><div class=\"line\">        todoStore.todos.length</div><div class=\"line\">    );</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ..and some actions that modify the state */</span></div><div class=\"line\">todoStore.todos[<span class=\"number\">0</span>] = &#123;</div><div class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">\"Take a walk\"</span>,</div><div class=\"line\">    <span class=\"attr\">completed</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// -&gt; synchronously prints 'Completed 0 of 1 items'</span></div><div class=\"line\"></div><div class=\"line\">todoStore.todos[<span class=\"number\">0</span>].completed = <span class=\"literal\">true</span>;</div><div class=\"line\"><span class=\"comment\">// -&gt; synchronously prints 'Completed 1 of 1 items'</span></div></pre></td></tr></table></figure>\n<p><img src=\"https://mobxjs.github.io/mobx/getting-started-assets/overview.png\" alt=\"MobX\"></p>\n<p>In the <a href=\"https://mobxjs.github.io/mobx/getting-started.html\" target=\"_blank\" rel=\"external\">10 minute introduction to MobX and React</a> you can dive deeper into this example and build a user interface using React around it.</p>\n<h1 id=\"2-Api-概述\"><a href=\"#2-Api-概述\" class=\"headerlink\" title=\"2. Api 概述\"></a>2. Api 概述</h1><p><a href=\"http://mobxjs.github.io/mobx/refguide/api.html\" target=\"_blank\" rel=\"external\">MobX Api Reference</a></p>\n<h2 id=\"2-1-observable\"><a href=\"#2-1-observable\" class=\"headerlink\" title=\"2.1 observable\"></a>2.1 observable</h2><p>使用：</p>\n<ul>\n<li><code>observable(value)</code></li>\n<li><code>@observable classProperty = value</code></li>\n</ul>\n<p>Observabl的值可以是JS primitives, references, plain objects, class instances, arrays and maps。应用下列转换规则，但可以使用修饰符进行微调。看下面。</p>\n<ol>\n<li>如果value被包裹在修改器<code>asMap</code>里面：将会返回一个新的<a href=\"http://mobxjs.github.io/mobx/refguide/map.html\" target=\"_blank\" rel=\"external\">Observable Map</a>。Observable maps是非常有用的，如果你不想作出反应，只是修改一个特定的条目，但也增加或删除条目。</li>\n<li>如果value是一个数组(array)，将会返回一个新的<a href=\"http://mobxjs.github.io/mobx/refguide/array.html\" target=\"_blank\" rel=\"external\">Observable Array</a>。</li>\n<li>如果value是一个没有原型(prototype)的对象，它里面所有属性都将会变成observable。见<a href=\"http://mobxjs.github.io/mobx/refguide/object.html\" target=\"_blank\" rel=\"external\">Observable Object</a>。</li>\n<li>如果value是一个有原型(prototype)的对象，一个JavaScript原语或者function，将会返回一个<a href=\"http://mobxjs.github.io/mobx/refguide/boxed.html\" target=\"_blank\" rel=\"external\">Boxed Observable</a>，MobX不会让一个有prototype的对象自动observable，因为这是它的构造函数的责任。在构造函数使用<code>extendObservable</code>或者在它的类里面使用<code>@obervable</code>定义。</li>\n</ol>\n<p>这些规则看起来似乎很复杂，但你会注意到，在实践中他们非常直观的工作。 一些注意事项：</p>\n<ul>\n<li>要创建动态键控对象，请使用<code>asMap</code>修饰符！ 只有对象上的最初存在的属性将被使得可观察，虽然可以使用<code>extendObservable</code>添加新的属性。</li>\n<li>要使用@observable装饰器，请确保在转换器（babel或typescript）中启用装饰器。</li>\n<li>默认情况下，使数据结构可观察是感染性的; 这意味着observable可以自动应用于数据结构包含的任何值，或者将来包含在数据结构中。 此行为可以通过使用修饰符更改。</li>\n</ul>\n<p>一些例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> map = observable(asMap(&#123; <span class=\"attr\">key</span>: <span class=\"string\">\"value\"</span>&#125;));</div><div class=\"line\">map.set(<span class=\"string\">\"key\"</span>, <span class=\"string\">\"new value\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> list = observable([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]);</div><div class=\"line\">list[<span class=\"number\">2</span>] = <span class=\"number\">3</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> person = observable(&#123;</div><div class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">\"Clive Staples\"</span>,</div><div class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">\"Lewis\"</span></div><div class=\"line\">&#125;);</div><div class=\"line\">person.firstName = <span class=\"string\">\"C.S.\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> temperature = observable(<span class=\"number\">20</span>);</div><div class=\"line\">temperature.set(<span class=\"number\">25</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"2-2-observable\"><a href=\"#2-2-observable\" class=\"headerlink\" title=\"2.2 @observable\"></a>2.2 @observable</h2><p>可以在ES7或TypeScript类属性上使用的装饰器，以使它们可见。 @observable可以在实例字段和属性getters上使用。 这提供了对对象的那些部分变得可观察的细粒度控制。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;observable&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"mobx\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderLine</span> </span>&#123;</div><div class=\"line\">    @observable price:number = <span class=\"number\">0</span>;</div><div class=\"line\">    @observable amount:number = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(price) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.price = price;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @computed get total() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.price * <span class=\"keyword\">this</span>.amount;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果你的环境不支持装饰器或字段初始化器，<code>@observable key = value</code>是<code>extendObservable(this, { key : value })</code>的语法糖。<br>Enumerability(可枚举性)：属性装饰器与@observable是可枚举的，但定义在类原型而不是类实例。 换一种说法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> line = <span class=\"keyword\">new</span> OrderLine();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"price\"</span> <span class=\"keyword\">in</span> line); <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(line.hasOwnProperty(<span class=\"string\">\"price\"</span>)); <span class=\"comment\">// false, the price _property_ is defined on the class, although the value will be stored per instance.</span></div></pre></td></tr></table></figure></p>\n<p>装饰器<code>@obervable</code>可以和修饰符一起使用，如<code>asStructure</code>：<br><code>@observable position = asStructure({ x: 0, y: 0})</code></p>\n<p><strong>在你的转换器中启用装饰器</strong></p>\n<p>当使用TypeScript或Babel等待ES标准中的定义时，默认情况下不支持装饰器。</p>\n<ul>\n<li>For typescript, enable the –experimentalDecorators compiler flag or set the compiler option experimentalDecorators to true in tsconfig.json (Recommended)</li>\n<li>For babel5, make sure –stage 0 is passed to the Babel CLI</li>\n<li>For babel6, see the example configuration as suggested in this <a href=\"https://github.com/mobxjs/mobx/issues/105\" target=\"_blank\" rel=\"external\">issue</a></li>\n</ul>\n<h2 id=\"2-3-computed\"><a href=\"#2-3-computed\" class=\"headerlink\" title=\"2.3 @computed\"></a>2.3 @computed</h2><p>-</p>\n<p>可以在ES6或TypeScript派生类属性上使用的装饰器，以使它们变成可观察的。<br><code>@computed</code>只能用在实力属性的<code>get</code>方法上面。</p>\n<p>如果你有一个值可以从纯粹的方式从其他observables导出，使用<code>@computed</code>。</p>\n<p>不要混淆了<code>@computed</code>和<code>autorun</code>，它们都是响应式调用的表达式。如果你想响应产生一个可以被其他观察者使用的新值，那么使用<code>@computed</code>；如果你不想产生一个新的值，而是调用一些命令式的代码，如日志记录，网络请求等，那么请使用<code>autorun</code>。</p>\n<p>计算的属性可以在许多情况下被MobX优化，因为它们被假定为纯的。因此，当它们的输入参数没有修改，或者如果它们没有被一些其他计算值或自动运行观察到时，它们将不被调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;observable, computed&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"mobx\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderLine</span> </span>&#123;</div><div class=\"line\">    @observable price:number = <span class=\"number\">0</span>;</div><div class=\"line\">    @observable amount:number = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(price) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.price = price;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @computed get total() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.price * <span class=\"keyword\">this</span>.amount;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果你的环境不支持装饰器或字段初始化器，<code>@gomputed get funcName() {}</code>是<code>extendObservable(this, { funcName : func })</code>的语法糖。</p>\n<p><code>@computed</code>可以是参数化的。<code>@computed({asStructure: true})</code>确保derivation(推导)的结果在结构上进行比较，而不是与其预览值。这确保计算的观察者不重新评估是否返回结构上等于原始结构的新结构。这在使用点，矢量或颜色结构时非常有用。 它的行为与可见值的<code>asStructure</code>修饰符相同。</p>\n<p>@computed属性不可枚举。 它们也不能在继承链中被覆盖。</p>\n<p><strong>使用<code>observable</code>或者<code>extendObservable</code>创建computed values(计算值)</strong></p>\n<p>方法<code>obervable(object)</code>或者<code>extendObservable(target, properties)</code>也可以用来引入计算属性，作为使用装饰器的替代方法。对于这个ES5 getters可以使用，所以上面的例子也可以写成：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> orderLine = observable(&#123;</div><div class=\"line\">    <span class=\"attr\">price</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">amount</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    get total() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.price * <span class=\"keyword\">this</span>.amount</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>注意：在MobX 2.5.1中引入了对getter的支持。 MobX将自动将作为属性值传递的无参函数转换为observable / extendObservable为计算属性，但该形式将在下一个主版本中消失。</p>\n<p><strong>Setters for computed values</strong></p>\n<p>也可以为计算值定义setters。 请注意，这些setter不能用于直接更改计算属性的值，但它们可以用作derivation(派生)的“inverse”。 例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> box = observable(&#123;</div><div class=\"line\">    <span class=\"attr\">length</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    get squared() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length * <span class=\"keyword\">this</span>.length;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    set squared(value) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.length = <span class=\"built_in\">Math</span>.sqrt(value);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>或者这样同样可行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</div><div class=\"line\">    @observable length: <span class=\"number\">2</span>,</div><div class=\"line\">    @computed get squared() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length * <span class=\"keyword\">this</span>.length;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    set squared(value) &#123; <span class=\"comment\">//this is automatically an action, no annotation necessary</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.length = <span class=\"built_in\">Math</span>.sqrt(value);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Note: setters require MobX 2.5.1 or higher</p>\n<p><strong>computed(expression)</strong></p>\n<p><code>computed</code>同样可以像方法一样调用。就像<code>observable(primitive value)</code>，它将创建一个独立的observable。对返回的对象使用<code>.get()</code>以获取计算的当前值，或者使用<code>.observe(callback)</code>观察其更改。这种形式的计算不是经常使用，但在某些情况下，你需要在它周围传递一个“盒装(boxed)”的计算值可能证明是有用的。<br>例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;observable, computed&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"mobx\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> name = observable(<span class=\"string\">\"John\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> upperCaseName = computed(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span></div><div class=\"line\">    name.get().toUpperCase()</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> disposer = upperCaseName.observe(<span class=\"function\"><span class=\"params\">name</span> =&gt;</span> <span class=\"built_in\">console</span>.log(name));</div><div class=\"line\"></div><div class=\"line\">name.set(<span class=\"string\">\"Dave\"</span>);</div><div class=\"line\"><span class=\"comment\">// prints: 'DAVE'</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"2-4-Autorun\"><a href=\"#2-4-Autorun\" class=\"headerlink\" title=\"2.4 Autorun\"></a>2.4 Autorun</h2><p><code>mobx.autorun</code> 可以用在那些你想创建一个响应函数，本身永远不会有观察者。这通常是当你需要从响应式桥到命令式代码时，例如对于日志记录(logging)，持久性(persistence)或UI更新代码。使用<code>mobx.autorun</code>，所提供的函数将在其某个依赖关系发生更改时就会触发。相比之下，<code>computed(function)</code>创建的函数只重新评估它是否有观察者本身，否则它的值被认为是不相关的。作为经验法则：如果您有一个应该自动运行但不会产生新值的函数，请使用<code>autorun</code>。其他情况使用<code>computed</code>。Autorun(自动运行)涉及启动效应，而不是产生新的价值。 如果字符串作为第一个参数传递给autorun，它将被用作调试名称。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> numbers = observable([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]);</div><div class=\"line\"><span class=\"keyword\">var</span> sum = computed(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> numbers.reduce(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b, <span class=\"number\">0</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> disposer = autorun(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(sum.get()));</div><div class=\"line\"><span class=\"comment\">// prints '6'</span></div><div class=\"line\">numbers.push(<span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"comment\">// prints '10'</span></div><div class=\"line\"></div><div class=\"line\">disposer();</div><div class=\"line\">numbers.push(<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"comment\">// won't print anything, nor is `sum` re-evaluated</span></div></pre></td></tr></table></figure>\n<h2 id=\"2-5-observer\"><a href=\"#2-5-observer\" class=\"headerlink\" title=\"2.5 @observer\"></a>2.5 @observer</h2><p><code>observer</code>方法或者说装饰器可以用来使ReactJS的组件变成响应式的组件。它将组件的render函数包装在<code>mobx.autorun</code>中，以确保在组件渲染期间使用的任何数据在更改时强制重新渲染。它通过单独的<code>mobx-react</code>包提供。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;observer&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"mobx-react\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> timerData = observable(&#123;</div><div class=\"line\">    <span class=\"attr\">secondsPassed</span>: <span class=\"number\">0</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    timerData.secondsPassed++;</div><div class=\"line\">&#125;, <span class=\"number\">1000</span>);</div><div class=\"line\"></div><div class=\"line\">@observer <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Timer</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Seconds passed: &#123; this.props.timerData.secondsPassed &#125; <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span> )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">React.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Timer</span> <span class=\"attr\">timerData</span>=<span class=\"string\">&#123;timerData&#125;</span> /&gt;</span>, document.body);</span></div></pre></td></tr></table></figure>\n<p>提示：当<code>observer</code>需要与其他装饰器(decorators)或高阶组件(higher-order-components)组合时，请确保<code>observer</code>是最内层（首次应用的）装饰器; 否则它可能什么都不做。</p>\n<p>注意，使用<code>@observer</code>作为装饰器是可选的，<code>observer(class Timer ...{})</code>实现完全相同。</p>\n<p><strong>了解：解除引用组件中的值</strong></p>\n<p>MobX可以做很多，但它<code>不能使原始值可观察（虽然它可以将它们包装在一个对象中看到框的可观察值）。 所以不是可观察的值，而是对象的属性。 这意味着</code>@observer实际上反应了你取消引用一个值的事实。 所以在我们上面的例子中，如果Timer组件初始化如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">React.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Timer</span> <span class=\"attr\">timerData</span>=<span class=\"string\">&#123;timerData.secondsPassed&#125;</span> /&gt;</span>, document.body)</span></div></pre></td></tr></table></figure>\n<p>在这个片段中，只将当前值secondsPassed传递给Timer，它是不可变值0（所有原语在JS中都是不可变的）。这个数字在将来不会再改变，所以<code>Timer</code>永远不会更新。这是将来会改变的属性secondsPassed，所以我们需要在组件中访问它。 或者换句话说：值需要通过引用传递而不是值。</p>\n<p><strong>ES5 support</strong></p>\n<p>In ES5 environments, observer components can be simple declared using observer(React.createClass({ …. See also the <a href=\"https://mobx.js.org/best/syntax.html\" target=\"_blank\" rel=\"external\">syntax guide</a></p>\n<p><strong>Stateless function components（无状态函数组件）</strong></p>\n<p>上述定时器小部件也可以使用通过观察者传递的无状态函数组件编写：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123;observer&#125; from \"mobx-react\";</div><div class=\"line\"></div><div class=\"line\">const Timer = observer((&#123; timerData &#125;) =&gt;</div><div class=\"line\">    &lt;span&gt;Seconds passed: &#123; timerData.secondsPassed &#125; &lt;/span&gt;</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p><strong>Observable local component state</strong></p>\n<p>就像普通类一样，你可以使用<code>@observable</code>装饰器在组件上引入<code>@observable</code>。这意味着您可以在组件中具有本地状态，而不需要使用<code>React</code>的冗余和强制的<code>setState</code>机制来管理它，但是功能强大。反应状态将由<code>render</code>接收，但不会显式调用其他React生命周期方法，如<code>componentShouldUpdate</code>或<code>componentWillUpdate</code>。如果你需要那些，只需使用正常的基于React状态的API。</p>\n<p>上面的例子也可以写为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;observer&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"mobx-react\"</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;observable&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"mobx\"</span></div><div class=\"line\"></div><div class=\"line\">@observer <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Timer</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    @observable secondsPassed = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">    componentWillMount() &#123;</div><div class=\"line\">        setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.secondsPassed++</div><div class=\"line\">        &#125;, <span class=\"number\">1000</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Seconds passed: &#123; this.secondsPassed &#125; <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span> )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">React.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Timer</span> /&gt;</span>, document.body)</span></div></pre></td></tr></table></figure></p>\n<p>有关使用observable本地组件状态的更多优点，请参见<a href=\"https://medium.com/@mweststrate/3-reasons-why-i-stopped-using-react-setstate-ab73fc67a42e\" target=\"_blank\" rel=\"external\">3 reasons why I stopped using setState</a>。</p>\n<p><strong>Connect <code>observer</code> to stores</strong></p>\n<p><code>mobx-react</code>包还提供了<code>Provider</code>组件，可以用于使用React的上下文机制传递存储。 要连接到这些stores，请将stores名称数组传递给observer，这将使stores像props一样使用。使用装饰器(<code>@observer(&quot;store&quot;)</code>) class … 或者使用方法<code>observer([&quot;store&quot;], React.createClass({...}))</code>支持以上使用。<br>例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> colors = observable(&#123;</div><div class=\"line\">   <span class=\"attr\">foreground</span>: <span class=\"string\">'#000'</span>,</div><div class=\"line\">   <span class=\"attr\">background</span>: <span class=\"string\">'#fff'</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></div><div class=\"line\">  &lt;Provider colors=&#123;colors&#125;&gt;</div><div class=\"line\">     <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">app</span> <span class=\"attr\">stuff...</span> /&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Button = observer([<span class=\"string\">\"colors\"</span>], (&#123; colors, label, onClick &#125;) =&gt;</div><div class=\"line\">  &lt;button style=&#123;&#123;</div><div class=\"line\">      color: colors.foreground,</div><div class=\"line\">      backgroundColor: colors.background</div><div class=\"line\">    &#125;&#125;</div><div class=\"line\">    onClick=&#123;onClick&#125;</div><div class=\"line\">  &gt;&#123;label&#125;&lt;button&gt;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">// later..</div><div class=\"line\">colors.foreground = 'blue';</div><div class=\"line\">// all buttons updated</div></pre></td></tr></table></figure></p>\n<p>See for more information the <a href=\"https://github.com/mobxjs/mobx-react#provider-experimental\" target=\"_blank\" rel=\"external\">mobx-react docs</a>.</p>\n<p><strong>什么时候该使用<code>observer</code></strong></p>\n<p>简单的经验法则是：渲染可观察数据的所有组件。 如果不想将组件标记为观察器，例如为了减少通用组件包的依赖性，请确保只传递纯数据。<br>使用@observer，不需要为了渲染的目的将’智能’组件与’哑’组件区分开。 它仍然是一个很好的分离，在哪里处理事件，请求等。所有组件变得负责更新时，他们自己的依赖关系改变。 它的开销是可以忽略的，它确保每当你开始使用可观察的数据，组件将响应它。 有关更多详细信息，请参阅此<a href=\"https://www.reddit.com/r/reactjs/comments/4vnxg5/free_eggheadio_course_learn_mobx_react_in_30/d61oh0l\" target=\"_blank\" rel=\"external\">线程</a>。</p>\n<p><strong><code>observer</code> and <code>PureRenderMixin</code></strong></p>\n<p><code>observer</code>也防止了当组件的道具仅仅浅地改变时的重新渲染，这使得传递到组件中的数据是反应性的，这是很有意义的。 此行为类似于<a href=\"https://facebook.github.io/react/docs/pure-render-mixin.html\" target=\"_blank\" rel=\"external\">React PureRender mixin</a>，但状态更改始终处理。 如果组件提供自己的shouldComponentUpdate，那么它优先。 看到解释这个<a href=\"https://github.com/mobxjs/mobx/issues/101\" target=\"_blank\" rel=\"external\">github问题</a>。</p>\n<p><strong><code>componentWillReact</code> (生命周期钩子)</strong></p>\n<p>React组件通常在新堆栈上呈现，因此通常很难找出导致组件重新渲染的原因。 当使用mobx-react时，你可以定义一个新的生命周期钩子，<code>componentWillReact</code>（双关意图），当一个组件被调度重新渲染时，它将被触发，因为它观察到的数据已经改变。 这使得它很容易跟踪渲染回到导致渲染的操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;observer&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"mobx-react\"</span>;</div><div class=\"line\"></div><div class=\"line\">@observer <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoView</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    componentWillReact() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"I will re-render, since the todo has changed!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>this.props.todo.title<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><code>componentWillReact</code> 不带参数</li>\n<li><code>componentWillReact</code> 在初始渲染之前不会触发（使用<code>componentWillMount</code>代替）</li>\n<li><code>componentWillReact</code> 在接收到新的props或者在<code>setState</code>方法执行之后不会触发（使用<code>componentWillUpdate</code>代替）</li>\n</ul>\n<p><strong>优化组件</strong></p>\n<p>请参阅<a href=\"https://mobx.js.org/best/react-performance.html\" target=\"_blank\" rel=\"external\">相关部分</a>。</p>\n<p><strong>MobX-React-DevTools</strong></p>\n<p>结合使用@observer，您可以使用MobX-React-DevTools，它显示组件何时被重新渲染，您可以检查组件的数据依赖关系。 请参阅<a href=\"https://mobx.js.org/best/devtools.html\" target=\"_blank\" rel=\"external\">DevTools</a>部分。</p>\n<p><strong>observer components 的特性</strong></p>\n<ul>\n<li>Observer仅订阅在上次渲染期间主动使用的数据结构。 这意味着您不能低于订阅或超量订阅。 您甚至可以在渲染中使用仅在稍后时间可用的数据。 这是异步加载数据的理想选择。</li>\n<li>您不需要声明组件将使用什么数据。 相反，依赖性在运行时确定并以非常细粒度的方式跟踪。</li>\n<li>通常反应性组件没有或很少有状态，因为在与其他组件共享的对象中封装（查看）状态通常更方便。 但你仍然可以自由使用状态。</li>\n<li><code>@observer</code>以与<code>PureRenderMixin</code>相同的方式实现<code>shouldComponentUpdate</code>，这样children不会有没必要的重新渲染。</li>\n<li>Reactive components sideways load data; parent components won’t re-render unnecessarily even when child components will.</li>\n<li><code>@observer</code> 不依赖 <code>React</code> 的上下文系统.</li>\n</ul>\n<h2 id=\"2-6-action\"><a href=\"#2-6-action\" class=\"headerlink\" title=\"2.6 action\"></a>2.6 action</h2><p>使用</p>\n<ul>\n<li><code>action(fn)</code></li>\n<li><code>action(name, fn)</code></li>\n<li><code>@action classMethod</code></li>\n<li><code>@action(name) classMethod</code></li>\n<li><code>@action boundClassMethod = (args) =&gt; { body }</code></li>\n<li><code>@action(name) boundClassMethod = (args) =&gt; { body }</code></li>\n</ul>\n<p>任何应用都有Actions。Actions是修改状态的地方。使用MobX，您可以通过标记它们在您的代码中显式地显示您的actions。Actions帮助你更好的组织代码。建议将它们用于修改observables或具有副作用的任何函数。action还提供了与devtools组合使用的有用的调试信息。Using the <code>@action</code> decorator with <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-11.1.5\" target=\"_blank\" rel=\"external\">ES 5.1 setters</a> (i.e. @action set propertyName) is not supported, however setters of <a href=\"https://github.com/mobxjs/mobx/blob/gh-pages/docs/refguide/computed-decorator.md#setters-for-computed-values\" target=\"_blank\" rel=\"external\">computed properties are automatically actions</a>.</p>\n<p>注意：当启用严格模式(strict)时，使用操作是必需的，请参阅<a href=\"https://github.com/mobxjs/mobx/blob/gh-pages/docs/refguide/api.md#usestrict\" target=\"_blank\" rel=\"external\">useStrict</a>。</p>\n<p>有关<code>action</code>的详细介绍，请参阅<a href=\"https://medium.com/p/45cdc73c7c8d/\" target=\"_blank\" rel=\"external\">MobX 2.2 release notes</a>。</p>\n<p>Two example actions from the contact-list project:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">@action    createRandomContact() &#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.pendingRequestCount++;</div><div class=\"line\">       superagent</div><div class=\"line\">           .get(<span class=\"string\">'https://randomuser.me/api/'</span>)</div><div class=\"line\">           .set(<span class=\"string\">'Accept'</span>, <span class=\"string\">'application/json'</span>)</div><div class=\"line\">           .end(action(<span class=\"string\">\"createRandomContact-callback\"</span>, (error, results) =&gt; &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (error)</div><div class=\"line\">                   <span class=\"built_in\">console</span>.error(error);</div><div class=\"line\">               <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                   <span class=\"keyword\">const</span> data = <span class=\"built_in\">JSON</span>.parse(results.text).results[<span class=\"number\">0</span>];</div><div class=\"line\">                   <span class=\"keyword\">const</span> contact = <span class=\"keyword\">new</span> Contact(<span class=\"keyword\">this</span>, data.dob, data.name, data.login.username, data.picture)</div><div class=\"line\">                   contact.addTag(<span class=\"string\">'random-user'</span>);</div><div class=\"line\">                   <span class=\"keyword\">this</span>.contacts.push(contact);</div><div class=\"line\">                   <span class=\"keyword\">this</span>.pendingRequestCount--;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;));</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>async actions and runInAction.</strong></p>\n<p>action只影响当前运行的函数，而不影响当前函数调度（但未调用）的函数！ 这意味着如果你有一个<code>setTimeout</code>，promise.<code>then</code>或<code>async</code>构造，并且在该回调中一些更多的状态被改变，那些回调也应该包装在action中！ 这在上面用“createRandomContact-callback”动作来演示。<br>如果你使用<code>async / await</code>，这是一个有点棘手，因为你不能只是包装异步函数体在行动。 在这种情况下，<code>runInAction</code>可以派上用场，在你打算更新状态的地方包装。 （但不要在这些块中等待调用）。<br>例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@action <span class=\"comment\">/*optional*/</span> updateDocument = <span class=\"keyword\">async</span> () =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> fetchDataFromUrl();</div><div class=\"line\">    <span class=\"comment\">/* required in strict mode to be allowed to update state: */</span></div><div class=\"line\">    runInAction(<span class=\"string\">\"update state after fetching data\"</span>, () =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.data.replace(data);</div><div class=\"line\">        <span class=\"keyword\">this</span>.isSaving = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>The usage of <code>runInAction</code> is: <code>runInAction(name?, fn, scope?)</code>.</p>\n<p>If you use babel, this plugin could help you to handle your async actions: <a href=\"https://github.com/mobxjs/babel-plugin-mobx-deep-action\" target=\"_blank\" rel=\"external\">mobx-deep-action</a>.</p>\n","categories":[],"tags":["mobx","react","状态管理"]},{"title":"有趣的js库收集","url":"http://yoursite.com/2016/12/29/有趣的js库收集/","content":"<blockquote>\n<p>记录一些有趣的JavaScript Libraries</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h1><ul>\n<li><a href=\"http://www.webdesignerdepot.com/2016/11/12-javascript-libraries-to-watch-in-2017/\" target=\"_blank\" rel=\"external\">12 JavaScript libraries to watch in 2017</a></li>\n<li><a href=\"http://tutorialzine.com/2016/11/15-interesting-javascript-and-css-libraries-for-november-2016/\" target=\"_blank\" rel=\"external\">15 Interesting JavaScript and CSS Libraries for November 2016</a></li>\n<li><a href=\"http://mojs.io/\" target=\"_blank\" rel=\"external\">mo.js</a> mo.js is a JavaScript library devoted to motion for the web. It offers a declarative syntax motion and the creation of elements for animation. Even though mo.js is still in beta, there is already a host of amazing features to play with. <a href=\"https://css-tricks.com/introduction-mo-js/\" target=\"_blank\" rel=\"external\">introduction</a>.</li>\n<li><a href=\"https://github.com/zeit/next.js\" target=\"_blank\" rel=\"external\">Next.js</a>  is a minimalistic framework for server-rendered React applications</li>\n<li><p><a href=\"https://github.com/AlloyTeam/AlloyFinger\" target=\"_blank\" rel=\"external\">AlloyFinger</a> <a href=\"https://segmentfault.com/a/1190000007448808\" target=\"_blank\" rel=\"external\">介绍文章</a>首先介绍了AlloyFinger 和 hammerjs 的区别，然后介绍AlloyFinger 是如何通过touchstart touchmove touchend touchcancel 这4个事件 来实现 Tap点按、longTap长按、swipe划、pinch捏、rotate旋转等手势动作的判断。</p>\n</li>\n<li><p><a href=\"https://risingstars2016.js.org/?utm_source=javascriptweekly&amp;utm_medium=email#all\" target=\"_blank\" rel=\"external\">2016 JavaScript Rising Stars</a></p>\n</li>\n</ul>\n","categories":[],"tags":[]},{"title":"fis3使用小记","url":"http://yoursite.com/2016/12/26/fis3使用小记/","content":"<blockquote>\n<p>FIS3 是面向前端的工程构建工具。解决前端工程中性能优化、资源加载（异步、同步、按需、预加载、依赖管理、合并、内嵌）、模块化开发、自动化工具、开发规范、代码部署等问题。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"安装-（按照项目实际需要）\"><a href=\"#安装-（按照项目实际需要）\" class=\"headerlink\" title=\"安装 （按照项目实际需要）\"></a>安装 （按照项目实际需要）</h1><p>1.下载安装node<br>2.设置镜像 npm config set registry “<a href=\"http://registry.npm.taobao.org/\" target=\"_blank\" rel=\"external\">http://registry.npm.taobao.org/</a>“<br>3.安装fis3  npm install -g fis3<br>4.安装模块化组件 npm install -g fis3-hook-module<br>5.安装模块化依赖自动加载插件 npm install -g fis3-postpackager-loader<br>6.安装替换插件 npm install -g fis3-deploy-replace<br>7.安装相对路径插件 npm install -g fis3-hook-relative</p>\n<h1 id=\"模块化配置\"><a href=\"#模块化配置\" class=\"headerlink\" title=\"模块化配置\"></a>模块化配置</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">****************基础配置****************</div><div class=\"line\">&#123;</div><div class=\"line\">    mode: 模块化类型(AMD,CDM, CommandJs)</div><div class=\"line\">    baseUrl: 基础路径</div><div class=\"line\">    path: 配置别名或者路径</div><div class=\"line\">&#125;</div><div class=\"line\">*/</div><div class=\"line\">fis.hook(<span class=\"string\">'module'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">'commonJs'</span>,</div><div class=\"line\">    <span class=\"attr\">baseUrl</span>: <span class=\"string\">\"./modules/\"</span>,</div><div class=\"line\">    <span class=\"attr\">paths</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">api</span>: <span class=\"string\">\"common/api/\"</span>,</div><div class=\"line\">        <span class=\"attr\">base</span>: <span class=\"string\">\"common/base/\"</span>,</div><div class=\"line\">        ...</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//fis-conf.js</span></div><div class=\"line\"><span class=\"comment\">// 启用插件</span></div><div class=\"line\">fis.hook(<span class=\"string\">'relative'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/****************模块化设置***************/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*设置模块目录, 打包时自动包裹define*/</span></div><div class=\"line\">fis.match(<span class=\"string\">'/modules/**.js'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">isMod</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*设置发布时不产出的文件*/</span></div><div class=\"line\">fis.match(<span class=\"string\">'**.&#123;tmpl,txt,md&#125;'</span>, &#123;    </div><div class=\"line\">    <span class=\"attr\">release</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// fis.match('test.html', &#123;</span></div><div class=\"line\"><span class=\"comment\">//     release: false</span></div><div class=\"line\"><span class=\"comment\">// &#125;);</span></div><div class=\"line\"><span class=\"comment\">// fis.media(\"debug\").match('test.html', &#123;</span></div><div class=\"line\"><span class=\"comment\">//     release: true</span></div><div class=\"line\"><span class=\"comment\">// &#125;);</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*设置打包时自动处理模块化依赖关系*/</span></div><div class=\"line\">fis.match(<span class=\"string\">'::package'</span>, &#123;</div><div class=\"line\">    <span class=\"comment\">// npm install [-g] fis3-postpackager-loader</span></div><div class=\"line\">    <span class=\"comment\">// 分析 __RESOURCE_MAP__ 结构，来解决资源加载问题</span></div><div class=\"line\">    postpackager: fis.plugin(<span class=\"string\">'loader'</span>, &#123;</div><div class=\"line\">        <span class=\"attr\">resourceType</span>: <span class=\"string\">'commonJs'</span>,</div><div class=\"line\">        <span class=\"attr\">useInlineMap</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 资源映射表内嵌</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*设置零散资源自动打包*/</span></div><div class=\"line\">fis.match(<span class=\"string\">'::packager'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">postpackager</span>: fis.plugin(<span class=\"string\">'loader'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">allInOne</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/****************打包设置***************/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*指定文件添加md5戳*/</span></div><div class=\"line\">fis.match(<span class=\"string\">'*.&#123;js,css,png,jpg,gif&#125;'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">useHash</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*指定文件添加md5戳*/</span></div><div class=\"line\"><span class=\"comment\">// fis.match('/views/images/icon/*.*', &#123;</span></div><div class=\"line\"><span class=\"comment\">//   useHash: false</span></div><div class=\"line\"><span class=\"comment\">// &#125;);</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*设置js压缩插件*/</span></div><div class=\"line\">fis.match(<span class=\"string\">'*.js'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// fis-optimizer-uglify-js 插件进行压缩，已内置</span></div><div class=\"line\">  optimizer: fis.plugin(<span class=\"string\">'uglify-js'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">fis.media(<span class=\"string\">\"debug\"</span>).match(<span class=\"string\">'*.js'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// fis-optimizer-uglify-js 插件进行压缩，已内置</span></div><div class=\"line\">  optimizer: <span class=\"literal\">null</span></div><div class=\"line\">&#125;); </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*设置css压缩插件*/</span></div><div class=\"line\">fis.match(<span class=\"string\">'*.css'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// fis-optimizer-clean-css 插件进行压缩，已内置</span></div><div class=\"line\">  optimizer: fis.plugin(<span class=\"string\">'clean-css'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*设置png图片压缩插件*/</span></div><div class=\"line\">fis.match(<span class=\"string\">'*.png'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// fis-optimizer-png-compressor 插件进行压缩，已内置</span></div><div class=\"line\">  optimizer: fis.plugin(<span class=\"string\">'png-compressor'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/****************合并设置***************/</span></div><div class=\"line\"><span class=\"comment\">//用 $1, $2, $3 来代表响应的捕获分组。其中 $0 代表的是 match 到的整个字符串。</span></div><div class=\"line\"><span class=\"comment\">// (**.js) 让 a 目录下面的 js 发布到 b 目录下面，保留原始文件名。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*第三方组件合并处理*/</span></div><div class=\"line\"><span class=\"comment\">// fis.match('modules/libs/**.js', &#123;</span></div><div class=\"line\"><span class=\"comment\">//   packTo: 'modules/libs/libs.js'</span></div><div class=\"line\"><span class=\"comment\">// &#125;);</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*系统资源合并处理*/</span></div><div class=\"line\">fis.match(<span class=\"string\">'/libs/**.js'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">packTo</span>: <span class=\"string\">'/libs/mod.js'</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*公共组件合并处理*/</span></div><div class=\"line\">fis.match(<span class=\"string\">'modules/common/**.js'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">packTo</span>: <span class=\"string\">'modules/common/common.js'</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*样式合并处理*/</span></div><div class=\"line\">fis.match(<span class=\"string\">'views/css/**.css'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">packTo</span>: <span class=\"string\">'views/css/style.pack.css'</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">fis.match(<span class=\"string\">'modules/common/**.css'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">packTo</span>: <span class=\"string\">'views/css/common.pack.css'</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*图片输出处理*/</span></div><div class=\"line\">fis.match(<span class=\"string\">'views/**.&#123;png,jpg,gif&#125;'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">release</span>: <span class=\"string\">'$0'</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">fis.match(<span class=\"string\">'modules/**/(*.&#123;png,jpg,gif&#125;)'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">release</span>: <span class=\"string\">'/views/images/$1'</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*html输出到根目录下*/</span></div><div class=\"line\">fis.match(<span class=\"string\">'views/(**.html)'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">release</span>: <span class=\"string\">'$1'</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*首页输出到根目录下*/</span></div><div class=\"line\"><span class=\"comment\">// fis.match('views/pages/index.html', &#123;</span></div><div class=\"line\"><span class=\"comment\">//     release: 'index.html'</span></div><div class=\"line\"><span class=\"comment\">// &#125;);</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 让所有文件，都使用相对路径。</span></div><div class=\"line\">fis.match(<span class=\"string\">'**'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">relative</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h1><p>执行以下命令预览项目<br>打包<br><code>fis3 release</code><br>打开服务器<br><code>fis3 server open</code><br>启动服务器(不需要预览可不执行)<br><code>fis3 server start</code></p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>这里fis3希望解决的是模块化开发以及资源打包压缩自动化的问题。比起webpack、gulp、grunt等配置使用起来要再简单一点，一般简单前端项目构建可参考使用。</p>\n","categories":["原创"],"tags":["fis3"]},{"title":"前端优质期刊","url":"http://yoursite.com/2016/12/23/前端优质期刊/","content":"<blockquote>\n<p>前端相关优质期刊收集</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>众成翻译<br><a href=\"http://www.zcfy.cc/weekly\" target=\"_blank\" rel=\"external\">http://www.zcfy.cc/weekly</a></p>\n<p>FEX - FEX<br><a href=\"http://fex.baidu.com/weekly/\" target=\"_blank\" rel=\"external\">http://fex.baidu.com/weekly/</a></p>\n<p>湾区日报：关注创业与技术，每天推送5篇优质英文文章<br><a href=\"https://wanqu.co/\" target=\"_blank\" rel=\"external\">https://wanqu.co/</a></p>\n<p>奇舞周刊<br><a href=\"http://old.75team.com/weekly/\" target=\"_blank\" rel=\"external\">http://old.75team.com/weekly/</a></p>\n<p>Fullweb Weekly · The newsletter for fullstack developers<br><a href=\"http://fullweb.io/\" target=\"_blank\" rel=\"external\">http://fullweb.io/</a></p>\n<p>Mobile Web Weekly: A Free, Weekly Email Newsletter<br><a href=\"http://mobilewebweekly.co/\" target=\"_blank\" rel=\"external\">http://mobilewebweekly.co/</a></p>\n<p>FrontEnd Focus Archives<br><a href=\"http://frontendfocus.co/issues\" target=\"_blank\" rel=\"external\">http://frontendfocus.co/issues</a></p>\n<p>Node Weekly Archives<br><a href=\"http://nodeweekly.com/issues\" target=\"_blank\" rel=\"external\">http://nodeweekly.com/issues</a></p>\n<p>Archives | CSS Weekly<br><a href=\"http://css-weekly.com/archives/\" target=\"_blank\" rel=\"external\">http://css-weekly.com/archives/</a></p>\n<p>JavaScript Weekly Archives<br><a href=\"http://javascriptweekly.com/issues\" target=\"_blank\" rel=\"external\">http://javascriptweekly.com/issues</a></p>\n<p>Archive - Web Design Weekly<br><a href=\"https://web-design-weekly.com/archive/\" target=\"_blank\" rel=\"external\">https://web-design-weekly.com/archive/</a></p>\n<p>Frontend Weekly<br><a href=\"https://frontendweekly.tokyo/backnumbers/\" target=\"_blank\" rel=\"external\">https://frontendweekly.tokyo/backnumbers/</a></p>\n","categories":[],"tags":["技术博客"]},{"title":"webpack打包小记","url":"http://yoursite.com/2016/12/23/webpack打包小记/","content":"<blockquote>\n<p>记录下使用webpack遇到的问题与解决方案</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>最近看到一个<a href=\"https://github.com/webpack-china/awesome-webpack-cn\" target=\"_blank\" rel=\"external\">awesome-webpack-cn</a> 有很全的中文资料。<br><a href=\"https://doc.webpack-china.org/\" target=\"_blank\" rel=\"external\">webpack 中文文档</a></p>\n<h1 id=\"一、使用ES6模块import，打包出来项目体积偏大\"><a href=\"#一、使用ES6模块import，打包出来项目体积偏大\" class=\"headerlink\" title=\"一、使用ES6模块import，打包出来项目体积偏大\"></a>一、使用ES6模块import，打包出来项目体积偏大</h1><p>假如我们使用ES6模块引用，以我使用mint-ui为例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Toast, MessageBox, InfiniteScroll &#125; <span class=\"keyword\">from</span> <span class=\"string\">'mint-ui'</span></div></pre></td></tr></table></figure>\n<p>这时你只希望打包三个组件，可是webpack打包时候会把整个组件库都打包下来。所以，这个时候需要使用到一个babel插件<code>babel-plugin-component</code>，它可以帮助你使用require进行引用：</p>\n<p>把<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Button &#125; <span class=\"keyword\">from</span> <span class=\"string\">'components'</span></div></pre></td></tr></table></figure></p>\n<p>转成<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">require</span>(<span class=\"string\">'components/lib/button'</span>)</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'components/lib/button/style.css'</span>)</div></pre></td></tr></table></figure></p>\n<p>具体的资源引用是否正确，需要额外配置 <code>.babelrc or babel-loader</code> ， 具体文档点<a href=\"https://www.npmjs.com/package/babel-plugin-component\" target=\"_blank\" rel=\"external\">这里</a>。</p>\n<p>类似的lodash库也有许多模块，提供了分模块的插件 <code>babel-plugin-lodash</code>。</p>\n<p><a href=\"https://segmentfault.com/a/1190000007891318\" target=\"_blank\" rel=\"external\">webpack 构建性能优化策略小结</a></p>\n","categories":["原创"],"tags":["webpack"]},{"title":"【译】Six nifty ES6 tricks","url":"http://yoursite.com/2016/12/23/Six nifty ES6 tricks/","content":"<blockquote>\n<p>六个ES6特性技巧 </p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"1、通过参数默认值强制参数\"><a href=\"#1、通过参数默认值强制参数\" class=\"headerlink\" title=\"1、通过参数默认值强制参数\"></a>1、通过参数默认值强制参数</h1><p>ES6参数默认值是在你实际使用时候来求值的，所以需要你实际强制提供一个默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Called if a parameter is missing and</div><div class=\"line\"> * the default value is evaluated.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mandatory</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Missing parameter'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">mustBeProvided = mandatory(</span>)) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mustBeProvided;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>默认值方法 mandatory() 只会在没有设置参数调用时执行，所以输出结果是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; foo()</div><div class=\"line\">Error: Missing parameter</div><div class=\"line\">&gt; foo(123)</div><div class=\"line\">123</div></pre></td></tr></table></figure>\n<h1 id=\"2、通过-for-of-遍历一个数组的下标和元素\"><a href=\"#2、通过-for-of-遍历一个数组的下标和元素\" class=\"headerlink\" title=\"2、通过 for-of 遍历一个数组的下标和元素\"></a>2、通过 for-of 遍历一个数组的下标和元素</h1><p>我们通过 forEach() 去迭代遍历一个数组中的元素：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">elem, index</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'index = '</span>+index+<span class=\"string\">', elem = '</span>+elem);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// Output:</span></div><div class=\"line\"><span class=\"comment\">// index = 0, elem = a</span></div><div class=\"line\"><span class=\"comment\">// index = 1, elem = b</span></div><div class=\"line\"><span class=\"comment\">// index = 2, elem = c</span></div></pre></td></tr></table></figure>\n<p>ES6中的 for-of 是支持 ES6 迭代(提供 可迭代对象 和 迭代器)和解构功能，如果你把解构与新的阵列的方法entries()组合使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [index, elem] <span class=\"keyword\">of</span> arr.entries()) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`index = <span class=\"subst\">$&#123;index&#125;</span>, elem = <span class=\"subst\">$&#123;elem&#125;</span>`</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>arr.entries()</code> 返回一个对应的指标元素，解构[index, elem]提供我们直接访问每对解构值。</p>\n<h1 id=\"3、简单的模板提供字面量模板\"><a href=\"#3、简单的模板提供字面量模板\" class=\"headerlink\" title=\"3、简单的模板提供字面量模板\"></a>3、简单的模板提供字面量模板</h1><p>ES6字面量模板比起文本模板，更像是一个字符串字面量模板，但是你可以使用它们返回一个模板：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> tmpl = <span class=\"function\"><span class=\"params\">addrs</span> =&gt;</span> <span class=\"string\">`</span></div><div class=\"line\">       &lt;table&gt;</div><div class=\"line\">       <span class=\"subst\">$&#123;addrs.map(addr =&gt; <span class=\"string\">`</span></span></div><div class=\"line\">           &lt;tr&gt;&lt;td&gt;<span class=\"subst\">$&#123;addr.first&#125;</span>&lt;/td&gt;&lt;/tr&gt;</div><div class=\"line\">           &lt;tr&gt;&lt;td&gt;<span class=\"subst\">$&#123;addr.last&#125;</span>&lt;/td&gt;&lt;/tr&gt;</div><div class=\"line\">       `).join(<span class=\"string\">''</span>)&#125;</div><div class=\"line\">       &lt;/table&gt;</div><div class=\"line\">   `;</div></pre></td></tr></table></figure>\n<p>使用模板</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> data = [</div><div class=\"line\">    &#123; <span class=\"attr\">first</span>: <span class=\"string\">'&lt;Jane&gt;'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Bond'</span> &#125;,</div><div class=\"line\">    &#123; <span class=\"attr\">first</span>: <span class=\"string\">'Lars'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'&lt;Croft&gt;'</span> &#125;,</div><div class=\"line\">];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(tmpl(data));</div><div class=\"line\"><span class=\"comment\">// Output:</span></div><div class=\"line\"><span class=\"comment\">// &lt;table&gt;</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//     &lt;tr&gt;&lt;td&gt;&lt;Jane&gt;&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//     &lt;tr&gt;&lt;td&gt;Bond&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//     &lt;tr&gt;&lt;td&gt;Lars&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//     &lt;tr&gt;&lt;td&gt;&lt;Croft&gt;&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// &lt;/table&gt;</span></div></pre></td></tr></table></figure>\n","categories":[],"tags":["ES6"]},{"title":"【转】2017年你应该学习的编程语言、框架和工具","url":"http://yoursite.com/2016/12/23/2017年你应该学习的编程语言、框架和工具/","content":"<blockquote>\n<p>在过去的一年里，软件开发行业继续大踏步地向前迈进。回顾 2016 年，我们看到了更多新兴的流行语言、框架和工具，它们改变着我们的工作方式，让我们看到更多的可能。但在这个行业，紧随潮流是很难的。所以在每年年底，我们都会给你提供一些建议，它涉及什么是最重要的，以及你在未来一年中应该学习什么。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><img src=\"https://pic1.zhimg.com/v2-caf0cc7f241a39a239c10d32921e04f0_b.jpg\" alt=\"编程语言、框架和工具\"></p>\n<h1 id=\"大趋势\"><a href=\"#大趋势\" class=\"headerlink\" title=\"大趋势\"></a>大趋势</h1><h2 id=\"渐进式-Web-Apps\"><a href=\"#渐进式-Web-Apps\" class=\"headerlink\" title=\"渐进式 Web Apps\"></a>渐进式 Web Apps</h2><p>在 2016 年里，我们见证了 <a href=\"https://link.zhihu.com/?target=https%3A//developers.google.com/web/progressive-web-apps/\" target=\"_blank\" rel=\"external\">Progressive Web App</a> 概念的蓬勃兴起。它意味着 Web 应用程序可以离线工作，并能提供原生移动应用的体验。它们可以添加到你的智能设备的主屏幕上，甚至可以给你发送推送通知，从而弥补与原生移动应用程序的差距。我们认为，在 2017 年，渐进式 Web Apps 将变得更加重要，也值得我们去探究。在这里<a href=\"https://link.zhihu.com/?target=http%3A//tutorialzine.com/2016/09/everything-you-should-know-about-progressive-web-apps/\" target=\"_blank\" rel=\"external\">查看相关概述</a>。</p>\n<h2 id=\"聊天机器人\"><a href=\"#聊天机器人\" class=\"headerlink\" title=\"聊天机器人\"></a>聊天机器人</h2><p>从运行聊天机器人的平台到构建其的框架，现在每个人都在谈论它。而社区里也正忙于此活动。（<a href=\"https://link.zhihu.com/?target=http%3A//tutorialzine.com/2016/11/introduction-to-chatbots/\" target=\"_blank\" rel=\"external\">阅读我们的介绍</a>）机器人是一款新兴的移动应用程序，它让我们感到兴奋。如果你快点的话，还可以赶得上这波浪潮。然而一旦新鲜感消失，那么它只会承担一些无聊的角色，例如自动化的客服支持。但是，相信我们可以实现梦想。</p>\n<h2 id=\"前端框架的合并\"><a href=\"#前端框架的合并\" class=\"headerlink\" title=\"前端框架的合并\"></a>前端框架的合并</h2><p>在 JavaScript 社区，随着令人难以置信的框架和工具的混合，每周都会出现新的东西。直到最近，人们希望旧工具将被新工具所取代，但这不是 2016 年我们所想看到的。相反，我们看到了流行框架交换的想法，以及纳入新诞生框架中的创新元素。所以在 2017 年，你该选择哪个 JS 框架无关紧要，因为它们的功能大多是可以比较的。</p>\n<h2 id=\"云端\"><a href=\"#云端\" class=\"headerlink\" title=\"云端\"></a>云端</h2><p>就目前的形势看，众多的公司与开发者们都在积极地拥抱“云”。云是可根据不同的需求，并通过控制面板来完全配置的虚拟化计算机基础设施。目前三大云提供商为亚马逊 AWS、Google Cloud 和 微软 Azure. 由于它们的竞争价格一直在下跌，使得小公司和个人开发者也可以将云纳入其预算中，所以熟悉云工作流程将是 2017 年的一笔不错的投资。</p>\n<h2 id=\"机器学习\"><a href=\"#机器学习\" class=\"headerlink\" title=\"机器学习\"></a>机器学习</h2><p>机器学习（ML）在去年一年中呈现爆炸式的增长。三月份 <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/AlphaGo_versus_Lee_Sedol\" target=\"_blank\" rel=\"external\">AlphaGo 与李世石的精彩对决</a>，也让它成为了焦点。从原始数据中学习的智能计算机系统，正在改变我们与移动设备的交互方式。看样子，机器学习将在 2017 年成为更大的影响因素。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f5ce836cd2d01c50a54815c8f71636b6_b.jpg\" alt=\"编程语言\"></p>\n<h1 id=\"编程语言\"><a href=\"#编程语言\" class=\"headerlink\" title=\"编程语言\"></a>编程语言</h1><p><strong>JavaScript</strong> 继续迈着令人难以置信的创新步伐在前进。由于 Web 浏览器的快速发布计划，JS 的标准定为了每年更新。故“<a href=\"https://link.zhihu.com/?target=https%3A//github.com/tc39/proposals/blob/master/finished-proposals.md\" target=\"_blank\" rel=\"external\">ES2017</a>”预计将在 2017 年中期完成，它也将带来 JS 开发者梦寐以求的新特性——用于处理异步函数的аsync/аwait。同时要感谢 Babel ，因为你现在可以在每个浏览器中编写 ES2017 了。</p>\n<p><strong>TypeScript 2.1</strong> 于 2016 年年底<a href=\"https://link.zhihu.com/?target=https%3A//blogs.msdn.microsoft.com/typescript/2016/12/07/announcing-typescript-2-1/\" target=\"_blank\" rel=\"external\">发布</a>，它将为旧浏览器带来Async/Await异步解决方案，并改进了类型推断。TypeScript 是一种编译为纯 JavaScript 的静态类型语言。它增强了经典的 OOP 模型和可选的静态类型，使大代码库更易于维护。同时，它也是编写 Angular 2 应用程序的首选语言，我们建议你可以尝试下。 这是关于它的<a href=\"https://link.zhihu.com/?target=http%3A//tutorialzine.com/2016/07/learn-typescript-in-30-minutes/\" target=\"_blank\" rel=\"external\">快速入门指南</a>。</p>\n<p><strong>C#7.0</strong> 预计在 2017 年发布，作为一门优秀的编程语言，它也将得到更大的改进。当微软推出开源的 Visual Studio 代码编辑器和 .Net Core 时，这一举动让众人都感到惊讶万分。它们不仅可以在 Linux、Windows 和 macOS 操作系统中运行，而且你可以在 C＃ 中编写快速、高效的应用程序（<a href=\"https://link.zhihu.com/?target=https%3A//docs.microsoft.com/en-us/dotnet/articles/core/index\" target=\"_blank\" rel=\"external\">在这里阅读</a>更多）。同时，这两种工具也都形成了充满活力的社区。相信，它们将在 2017 年会给我们带来更多的惊喜。</p>\n<p><strong>Python 3.6</strong> 版本将于 12 月<a href=\"https://link.zhihu.com/?target=https%3A//docs.python.org/3.6/whatsnew/3.6.html\" target=\"_blank\" rel=\"external\">发布</a>。它正在巩固自身在开发人员、IT 专业人员和科学家在脚本语言选择中的地位。它适用于自动化、Web开发、机器学习和科学计算。虽然 Python 2.X 与 3.X 版本的割裂，对于社区来说是一个长达数年的斗争，但是就目前而言，你可以自信地选择 Python 3 并享受完整的库支持。而对于那些需要额外性能的朋友，建议你们看看 <a href=\"https://link.zhihu.com/?target=http%3A//pypy.org/\" target=\"_blank\" rel=\"external\">PyPy</a>，一个可启用 Python 运行时 JIT 的替代品。</p>\n<p><strong>Ruby 2.3</strong> 已在今年早些时候<a href=\"https://link.zhihu.com/?target=https%3A//www.ruby-lang.org/en/news/2015/12/25/ruby-2-3-0-released/\" target=\"_blank\" rel=\"external\">发布</a>了，并带来了一些性能上的改进。同时，Ruby 也是学习通用脚本语言的一个好选择，但是只有当它和 Rails 相配合的时候才能发挥出其最大的功效。伴随 Ruby 3×3 计划的宣布，也促使了即将到来的 Ruby 3 版本比当前版本的运行速度快 3 倍。而你也可以在更多的情景中，打开使用 Ruby 的大门。</p>\n<p><strong>PHP 7.1</strong> 版本已在 12 月<a href=\"https://link.zhihu.com/?target=http%3A//php.net/manual/en/migration71.php\" target=\"_blank\" rel=\"external\">发布</a>，并对该语言进行了小范围的增强。这个版本基于了去年 7.0 版本主要性能的改进，将 PHP 转变为构建 Web 应用程序的快速平台。如果你打算学习，我们推荐你看看 <a href=\"https://link.zhihu.com/?target=http%3A//www.phptherightway.com/\" target=\"_blank\" rel=\"external\">PHP 之道</a>中的最佳实践。</p>\n<p><strong>Java 9</strong> 预计在 2017 年发布，它将带来一些备受开发者们所欢迎的新功能，例如评估代码的 repl、HTTP 2.0 的支持以及一些新的 API . 对于有才能的 Java 开发人员和广泛使用该语言进行项目研发的人来说，他们对这些新特性是有强烈需求的。如果 Java 不是你的“菜”，这里还有一些基于 JVM 的编程语言，像 <a href=\"https://link.zhihu.com/?target=https%3A//kotlinlang.org/\" target=\"_blank\" rel=\"external\">Kotlin</a> 和 <a href=\"https://link.zhihu.com/?target=https%3A//www.scala-lang.org/\" target=\"_blank\" rel=\"external\">Scala</a>，你也可以了解下。</p>\n<p><strong>Swift 3</strong> 已经在今年早些时候发布了。简化 iOS 和 MacOS 上应用程序的开发，是苹果公司对现代编程语言的愿景。由于 Swift 是<a href=\"https://link.zhihu.com/?target=https%3A//github.com/apple/swift\" target=\"_blank\" rel=\"external\">开源</a>的，所以也涌现了大量的社区。Swift 4 计划于 2017 年发布，此版本将会改进语言并引入服务器 API，致力使其成为编写 Web 应用程序和后端的不错选择。</p>\n<p>如果你在寻找一些让你感到兴奋的东西，你可以尝试下 <a href=\"https://link.zhihu.com/?target=https%3A//crystal-lang.org/\" target=\"_blank\" rel=\"external\">Crystal</a> 和 <a href=\"https://link.zhihu.com/?target=http%3A//elixir-lang.org/\" target=\"_blank\" rel=\"external\">Elixir</a>。它们都拥有类似与 Ruby 的友好语法以及卓越的性能，或者你也可以看看类似于 <a href=\"https://link.zhihu.com/?target=https%3A//www.haskell.org/\" target=\"_blank\" rel=\"external\">Haskell</a> 或 <a href=\"https://link.zhihu.com/?target=https%3A//clojure.org/\" target=\"_blank\" rel=\"external\">Clojure</a> 这类函数式语言。另外两种快速编程语言，我们推荐给你 Rust 和 Go 语言。</p>\n<p>挑一个或多个学习： JS (ES2017)、TypeScript、C#、Python、Ruby、PHP7、Java/Kotlin/Scala.</p>\n<p><img src=\"https://pic1.zhimg.com/v2-778274be4bc1b1d3846349105228e358_b.jpg\" alt=\"前端\"></p>\n<h1 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h1><p>近期 Web 平台取得了两个重大的进展：<a href=\"https://link.zhihu.com/?target=http%3A//webassembly.org/\" target=\"_blank\" rel=\"external\">Web Assembly</a> 字节码技术和 <a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en/docs/Web/API/Service_Worker_API\" target=\"_blank\" rel=\"external\">Service Workers</a> 技术。它们打开了快速、高效的 Web 应用程序的大门，并且有效的弥补了编译本地应用上的差距。Service Workers 是针对渐进式 Web App 的启动技术，它为 Web 平台提供了通知上的支持，将来也会有更多的 API.</p>\n<p><strong>Angular.js 2</strong> 在今年也已经<a href=\"https://link.zhihu.com/?target=https%3A//angular.io/\" target=\"_blank\" rel=\"external\">发布</a>了。该框架由 Google 进行维护，受到了众多企业和大公司的青睐。它所具备众多的功能，也为从网络到桌面以及移动应用程序中编写任何东西成为了可能。而它的框架也是用 TypeScript 所编写的，这也是写应用程序推荐的编程语言。虽然学习它还需要阅读更多的内容，但我们认为在 2017 年学习 Angular 2 将是一个很不错的投资。</p>\n<p>在今年我们也看到了 <a href=\"https://link.zhihu.com/?target=https%3A//medium.com/the-vue-point/vue-2-0-is-here-ef1f26acf4b8\" target=\"_blank\" rel=\"external\">Vue.js2.0</a> 版本的发布，它借鉴了 Angular，React 和 Ember 中好的想法，并且比前两个框架更轻量、更快速。我们建议你今年要试一试，你可以从我们的 <a href=\"https://link.zhihu.com/?target=http%3A//tutorialzine.com/tag/vue-js/\" target=\"_blank\" rel=\"external\">Vue.js 教程</a>开始。</p>\n<p><strong><a href=\"https://link.zhihu.com/?target=http%3A//emberjs.com/\" target=\"_blank\" rel=\"external\">Ember</a></strong> 是 JavaScript 框架的另一个不错的选择。它支持数据双向绑定，并能够自动更新模板、组件以及服务器端渲染。与其他竞争者相比，使用它的好处是它更加成熟与稳定，而其框架的重大更改频率之低，社区重视向后的兼容性，也使得此框架成为开发较长生命周期的应用程序的不二之选。</p>\n<p>另外两个值得一提的框架是 <a href=\"https://link.zhihu.com/?target=http%3A//aurelia.io/\" target=\"_blank\" rel=\"external\">Aurelia</a> 和 <a href=\"https://link.zhihu.com/?target=https%3A//facebook.github.io/react/\" target=\"_blank\" rel=\"external\">React</a>。在过去的一年里 React 的生态系统变得越来越复杂，因此很难推荐给初学者。但经验丰富的开发者可以将库与 <a href=\"https://link.zhihu.com/?target=http%3A//graphql.org/\" target=\"_blank\" rel=\"external\">GraphQL</a>、<a href=\"https://link.zhihu.com/?target=https%3A//facebook.github.io/relay/\" target=\"_blank\" rel=\"external\">Relay</a>、<a href=\"https://link.zhihu.com/?target=http%3A//facebook.github.io/flux/\" target=\"_blank\" rel=\"external\">Flux</a> 和 <a href=\"https://link.zhihu.com/?target=http%3A//facebook.github.io/immutable-js/\" target=\"_blank\" rel=\"external\">Immutable.js</a> 组合成一个全面完整的全栈解决方案。</p>\n<p>没有提及 <strong><a href=\"https://link.zhihu.com/?target=http%3A//getbootstrap.com/\" target=\"_blank\" rel=\"external\">Bootstrap</a></strong> 的前端终归是不完整的。而 Bootstrap 4 目前也正处于 Alpha 阶段，预计在 2017 年发布。值得关注的变化是新的通用卡片组件和 Flexbox 网格（查看与<a href=\"https://link.zhihu.com/?target=http%3A//tutorialzine.com/2016/11/boostrap-4-regular-vs-flex-grid/\" target=\"_blank\" rel=\"external\">常规网格的对比</a>），这使得框架更加现代化，并且让用户使用它进行工作时更加得舒心。</p>\n<p><strong><a href=\"https://link.zhihu.com/?target=http%3A//sass-lang.com/\" target=\"_blank\" rel=\"external\">SASS</a></strong> 和 <strong><a href=\"https://link.zhihu.com/?target=http%3A//lesscss.org/\" target=\"_blank\" rel=\"external\">LESS</a></strong> 仍然是当前最流行的两种 CSS 预处理器。尽管 Vanilla CSS 已经实现了对变量的支持，但对 mixins、函数和代码组织上的支持，SASS 和 LESS 依然更胜一筹。如果您还没有了解它们，可以看看我们的 <a href=\"https://link.zhihu.com/?target=http%3A//tutorialzine.com/2016/01/learn-sass-in-15-minutes/\" target=\"_blank\" rel=\"external\">SASS</a> 和 <a href=\"https://link.zhihu.com/?target=http%3A//tutorialzine.com/2015/07/learn-less-in-10-minutes-or-less/\" target=\"_blank\" rel=\"external\">LESS</a> 快速入门指南。</p>\n<p>挑一个或多个学习：Angular 2、Vue.js、Ember、Bootstrap、LESS/SASS</p>\n<p><img src=\"https://pic4.zhimg.com/v2-f91b76d925c03027a1c533071c6d49eb_b.jpg\" alt=\"后端\"></p>\n<h1 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h1><p>后端有众多的选择，但所有的选择都取决于你对编程语言或特定性能需求的偏好上。Web 开发中的一个持续趋势是远离后端的业务逻辑，并将该层转换为由前端和移动应用程序使用的 API 上。但一个全栈的框架通常是能够更简单、快速的应用于开发，并且它仍然是 Web 应用程序最有效的选择。</p>\n<p><strong>Node.js</strong> 是在浏览器之外运行 JS 的主要方式。在今年，我们也看到了它发布了许多新的版本。除了提升了性能外，也添加了对整个 ES6 规范的覆盖。Node 具有构建快速 API、服务器、桌面应用程序甚至机器人的框架，同时它可以创建想象到的各种模块的庞大社区。这里有一些你可能想研究的框架：<a href=\"https://link.zhihu.com/?target=http%3A//expressjs.com/\" target=\"_blank\" rel=\"external\">Express</a>、<a href=\"https://link.zhihu.com/?target=https%3A//github.com/koajs/koa\" target=\"_blank\" rel=\"external\">Koa</a>、<a href=\"https://link.zhihu.com/?target=https%3A//github.com/zeit/next.js\" target=\"_blank\" rel=\"external\">Next</a>、<a href=\"https://link.zhihu.com/?target=http%3A//www.nodaljs.com/\" target=\"_blank\" rel=\"external\">Nodal</a>.</p>\n<p><strong>PHP</strong> 是一种拥有大量 Web 框架可供你选择的 Web 开发语言。由于其拥有出色的文档和功能，<a href=\"https://link.zhihu.com/?target=https%3A//laravel.com/\" target=\"_blank\" rel=\"external\">Laravel</a> 已建成了一个活跃的社区。Zend Framework 发布了<a href=\"https://link.zhihu.com/?target=https%3A//framework.zend.com/blog/2016-06-28-zend-framework-3.html\" target=\"_blank\" rel=\"external\">第 3 版</a>，这标志着面向业务框架的巨大升级。在今年，我们也看到了 <a href=\"https://link.zhihu.com/?target=https%3A//symfony.com/\" target=\"_blank\" rel=\"external\">Symfony</a> 发行了很多新的版本，使它成为了全栈解决方案中更好的选择。</p>\n<p>对于 <strong>Ruby</strong> 来说，Rails 框架是首选的。<a href=\"https://link.zhihu.com/?target=http%3A//weblog.rubyonrails.org/2016/6/30/Rails-5-0-final/\" target=\"_blank\" rel=\"external\">Rails 5.0</a> 版本已于今年发布，并为 Web Sockets、API 模型等方面提供了支持。对于小型应用程序而言，<a href=\"https://link.zhihu.com/?target=http%3A//www.sinatrarb.com/\" target=\"_blank\" rel=\"external\">Sinatra</a> 也是一个不错的选择，Sinatra 2.0版本预计在 2017 年发布。</p>\n<p><strong>Python</strong> 有着以 <a href=\"https://link.zhihu.com/?target=https%3A//www.djangoproject.com/\" target=\"_blank\" rel=\"external\">Django</a> 和 <a href=\"https://link.zhihu.com/?target=http%3A//flask.pocoo.org/\" target=\"_blank\" rel=\"external\">Flask</a> 为组合的全栈/迷你型框架。Django 1.10 已在今年 8 月<a href=\"https://link.zhihu.com/?target=https%3A//www.djangoproject.com/weblog/2016/aug/01/django-110-released/\" target=\"_blank\" rel=\"external\">发布</a>了，它为 Postgres 引入了全文搜索和一个重大修改的中间件层。</p>\n<p><strong>Java</strong> 的生态系统中，依旧有很多流行的 Web 框架可供你选择。<a href=\"https://link.zhihu.com/?target=https%3A//www.playframework.com/\" target=\"_blank\" rel=\"external\">Play</a> 和 <a href=\"https://link.zhihu.com/?target=http%3A//sparkjava.com/\" target=\"_blank\" rel=\"external\">Spark</a> 便是两个必备的选择，同时它们也可以与 Scala 一起使用。</p>\n<p>对于编程爱好者来说，你还可以选择 <a href=\"https://link.zhihu.com/?target=http%3A//www.phoenixframework.org/\" target=\"_blank\" rel=\"external\">Phoenix</a>，它是用 <strong>Elixir</strong> 编写的，它试图成为一个具有卓越的性能，并能完整替代 Rails 功能的框架。如果 Elixir 是你想在 2017 年学习的语言之一，不妨尝试下 Phoenix .</p>\n<p>学习其中之一：全栈后端框架、一个微框架</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4893f61aecc05d99e1a1e20ccef0a81d_b.jpg\" alt=\"数据库\"></p>\n<h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h1><p><strong>PostgreSQL</strong> 在今年已经发行了两个完整的版本——<a href=\"https://link.zhihu.com/?target=https%3A//wiki.postgresql.org/wiki/What%27s_new_in_PostgreSQL_9.5\" target=\"_blank\" rel=\"external\">9.5</a>和<a href=\"https://link.zhihu.com/?target=https%3A//www.postgresql.org/about/news/1703/\" target=\"_blank\" rel=\"external\">9.6</a>.它们带来了我们从 MySQL 就开始期盼的 UPSERT （aka ON DUPLICATE KEY UPDATE）功能，以及更好的全文搜索和速度改进功能，这多亏了并行查询，更高效的复制、聚合、索引和排序。Postgres 适用于大规模、TB 级规模的数据集以及繁忙的 Web Apps，这些优化都是很受欢迎的。</p>\n<p><strong><a href=\"https://link.zhihu.com/?target=http%3A//mysqlserverteam.com/the-mysql-8-0-0-milestone-release-is-available/\" target=\"_blank\" rel=\"external\">MySQL 8.0</a></strong> 将是数据库的下一个主要版本。预计在 2017 年发布，它将给系统带来更多的改进。MySQL 仍然是最受欢迎的数据库管理系统，整个行业都受益于这些新的版本。</p>\n<p>对于 <strong>NoSQL</strong> 的粉丝们，我们推荐 <a href=\"https://link.zhihu.com/?target=http%3A//couchdb.apache.org/\" target=\"_blank\" rel=\"external\">CouchDB</a>。它是一个快速、可扩展的 JSON 存储系统，同时公开了一个 REST-ful HTTP API.此数据库易于使用，同时性能卓越。与 CouchDB 对应的是 <a href=\"https://link.zhihu.com/?target=https%3A//pouchdb.com/\" target=\"_blank\" rel=\"external\">PouchDB</a> ，它可以完全在浏览器中工作，并且可以与 Couch 同步数据。所以你可以在离线应用程序上使用 PouchDB ，联网后它会自动同步数据。</p>\n<p><strong><a href=\"https://link.zhihu.com/?target=https%3A//redis.io/\" target=\"_blank\" rel=\"external\">Redis</a></strong> 是我们最喜欢的键-值存储型数据库。它体积小、快速并且有丰富的特性。作为 NoSQL 数据存储或进程消息和同步通道，你可以使用它作为智能分布式高速缓存系统的可替代方案。它提供了大量的数据结构可供选择，并且在即将到来的 4.0 版本中会有一个模块系统，并将改进复制功能。</p>\n<p>学习其中之一：Postgres、MySQL、CouchDB、Redis.</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2d49715d4e2627098e5add4668858bca_b.jpg\" alt=\"技术\"></p>\n<h1 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h1><p>随着大型公司数据中心的关闭，并调整其整体的基础设施到云上，我们可以看到云已经赢得了整个软件行业。目前三个主要的平台是 <a href=\"https://link.zhihu.com/?target=https%3A//aws.amazon.com/\" target=\"_blank\" rel=\"external\">AWS</a>, <a href=\"https://link.zhihu.com/?target=https%3A//cloud.google.com/\" target=\"_blank\" rel=\"external\">Google Cloud</a> 和 <a href=\"https://link.zhihu.com/?target=https%3A//azure.microsoft.com/\" target=\"_blank\" rel=\"external\">Azure</a>。这三大平台都有着强大的功能，同时不断地扩展其功能集，涉及虚拟机、数据库托管、机器学习服务等。由于价格的迅速下降，小公司和个人开发者也都可以接触到云。对于 2017 年，在云上部署一个业余项目将是一个很好的学习积累。</p>\n<p>人工智能是 2016 年的流行词。语音识别和图像分类只是该技术在面向用户应用程序的两个部分，人工智能设备的性能达到甚至超越了人类的水平。当下众多的创业公司也将 AI 和机器学习应用到其新的领域，同时许多相关的开源项目也已经发布，例如谷歌的 <a href=\"https://link.zhihu.com/?target=https%3A//www.tensorflow.org/\" target=\"_blank\" rel=\"external\">Tensor Flow</a> 和微软的 <a href=\"https://link.zhihu.com/?target=https%3A//www.microsoft.com/en-us/research/product/cognitive-toolkit/\" target=\"_blank\" rel=\"external\">Cognitive Toolkit</a>。机器学习是一个与数学非常相关的主题，对于刚刚开始的人，这里有全面的<a href=\"https://link.zhihu.com/?target=https%3A//www.udacity.com/course/deep-learning--ud730\" target=\"_blank\" rel=\"external\">在线课程</a>供你学习。</p>\n<p>虚拟现实（VR）和增强现实（AR）已经存在了一段时间，而最终该技术已经成熟到足以提供引人注目的体验。Facebook（<a href=\"https://link.zhihu.com/?target=https%3A//www.oculus.com/\" target=\"_blank\" rel=\"external\">Oculus Rift</a>），Google（<a href=\"https://link.zhihu.com/?target=https%3A//vr.google.com/daydream/\" target=\"_blank\" rel=\"external\">Daydream</a>）和 Microsoft（<a href=\"https://link.zhihu.com/?target=https%3A//developer.microsoft.com/en-us/windows/holographic\" target=\"_blank\" rel=\"external\">Windows Holographic</a>）都有欢迎第三方开发者加入的虚拟现实平台。然而 VR 穿戴设备依然面临着艰巨的挑战。例如如何消除穿戴者恶心的感觉，以及脱离了游戏圈，又如何创造令人信服的使用案例。</p>\n<p>挑一种学习：云部署、机器学习库、VR 开发</p>\n<blockquote>\n<p>英文原文：The Languages, Frameworks and Tools You Should Learn in 2017<br>作者：Martin Angelov<br>译者：IT程序狮<br>译文源自：<a href=\"https://zhuanlan.zhihu.com/p/24369470\" target=\"_blank\" rel=\"external\">https://zhuanlan.zhihu.com/p/24369470</a></p>\n</blockquote>\n","categories":[],"tags":["技术博客"]},{"title":"【转】vuex2.0源码分析","url":"http://yoursite.com/2016/12/23/vuex2.0源码分析/","content":"<blockquote>\n<p>原文：<a href=\"https://github.com/DDFE/vue-blog/issues/8\" target=\"_blank\" rel=\"external\">https://github.com/DDFE/vue-blog/issues/8</a></p>\n</blockquote>\n<p>当我们用 Vue.js 开发一个中到大型的单页应用时，经常会遇到如下问题：</p>\n<ul>\n<li>如何让多个 Vue 组件共享状态</li>\n<li>Vue 组件间如何通讯</li>\n</ul>\n<p>通常，在项目不是很复杂的时候，我们会利用全局事件总线 （global event bus）解决，但是随着复杂度的提升，这些代码将变的难以维护。因此，我们需要一种更加好用的解决方案，于是，Vuex 诞生了。</p>\n<p>本文并不是 Vuex 的科普文章，对于还不了解 Vuex 的同学，建议先移步 <a href=\"https://vuex.vuejs.org/en/index.html\" target=\"_blank\" rel=\"external\">Vuex 官方文档</a>；看英文文档吃力的同学，可以看 <a href=\"https://vuefe.cn/\" target=\"_blank\" rel=\"external\">Vuex 的中文文档</a>。</p>\n<a id=\"more\"></a>\n<h1 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h1><hr>\n<p>Vuex 的源码托管在 github，我们首先通过 git 把代码 clone 到本地，选一款适合自己的 IDE 打开源码，展开 src 目录，如下图所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">└── src</div><div class=\"line\">    ├── plugins</div><div class=\"line\">    │   ├── devtool.js</div><div class=\"line\">    │\t└── logger.js</div><div class=\"line\">    ├── helpers.js</div><div class=\"line\">    ├── index.js</div><div class=\"line\">    ├── mixin.js</div><div class=\"line\">    └── util.js</div></pre></td></tr></table></figure></p>\n<p>src 目录下的文件并不多，包含几个 js 文件和 plugins 目录， plugins 目录里面包含 2 个 Vuex 的内置插件，整个源码加起来不过 500-600 行，可谓非常轻巧的一个库。</p>\n<p>麻雀虽小，五脏俱全，我们先直观的感受一下源码的结构，接下来看一下其中的实现细节。</p>\n<h1 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h1><hr>\n<p>本文的源码分析过程不会是自上而下的给代码加注释，我更倾向于是从 Vuex 提供的 API 和我们的使用方法等维度去分析。Vuex 的源码是基于 es6 的语法编写的，对于不了解 es6 的同学，建议还是先学习一下 es6。</p>\n<h2 id=\"从入口开始\"><a href=\"#从入口开始\" class=\"headerlink\" title=\"从入口开始\"></a>从入口开始</h2><p>看源码一般是从入口开始，Vuex 源码的入口是 src/index.js，先来打开这个文件。</p>\n<p>我们首先看这个库的 export ，在 index.js 代码最后。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  Store,</div><div class=\"line\">  install,</div><div class=\"line\">  mapState,</div><div class=\"line\">  mapMutations,</div><div class=\"line\">  mapGetters,</div><div class=\"line\">  mapActions</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里可以一目了然地看到 Vuex 对外暴露的 API。其中, Store 是 Vuex 提供的状态存储类，通常我们使用 Vuex 就是通过创建 Store 的实例，稍后我们会详细介绍。接着是 install 方法，这个方法通常是我们编写第三方 Vue 插件的“套路”，先来看一下“套路”代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">install</span> (<span class=\"params\">_Vue</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (Vue) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.error(</div><div class=\"line\">      <span class=\"string\">'[vuex] already installed. Vue.use(Vuex) should be called only once.'</span></div><div class=\"line\">    )</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  Vue = _Vue</div><div class=\"line\">  applyMixin(Vue)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// auto install in dist mode</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span> &amp;&amp; <span class=\"built_in\">window</span>.Vue) &#123;</div><div class=\"line\">  install(<span class=\"built_in\">window</span>.Vue)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们实现了一个 install 方法，这个方法当我们全局引用 Vue ，也就是 window 上有 Vue 对象的时候，会手动调用 install 方法，并传入 Vue 的引用；当 Vue 通过 npm 安装到项目中的时候，我们在代码中引入第三方 Vue 插件通常会编写如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\">...</div><div class=\"line\">Vue.use(Vuex)</div></pre></td></tr></table></figure>\n<p>当我们执行 Vue.use(Vuex) 这句代码的时候，实际上就是调用了 install 的方法并传入 Vue 的引用。install 方法顾名思义，现在让我们来看看它的实现。它接受了一个参数 _Vue，函数体首先判断 Vue ，这个变量的定义在 index.js 文件的开头部分：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> Vue <span class=\"comment\">// bind on install</span></div></pre></td></tr></table></figure>\n<p>对 Vue 的判断主要是保证 install 方法只执行一次，这里把 install 方法的参数 _Vue 对象赋值给 Vue 变量，这样我们就可以在 index.js 文件的其它地方使用 Vue 这个变量了。install 方法的最后调用了 applyMixin 方法，我们顺便来看一下这个方法的实现，在 src/mixin.js 文件里定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> version = <span class=\"built_in\">Number</span>(Vue.version.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>])</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (version &gt;= <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> usesInit = Vue.config._lifecycleHooks.indexOf(<span class=\"string\">'init'</span>) &gt; <span class=\"number\">-1</span></div><div class=\"line\">    Vue.mixin(usesInit ? &#123; <span class=\"attr\">init</span>: vuexInit &#125; : &#123; <span class=\"attr\">beforeCreate</span>: vuexInit &#125;)</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// override init and inject vuex init procedure</span></div><div class=\"line\">    <span class=\"comment\">// for 1.x backwards compatibility.</span></div><div class=\"line\">    <span class=\"keyword\">const</span> _init = Vue.prototype._init</div><div class=\"line\">    Vue.prototype._init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options = &#123;&#125;</span>) </span>&#123;</div><div class=\"line\">      options.init = options.init</div><div class=\"line\">        ? [vuexInit].concat(options.init)</div><div class=\"line\">        : vuexInit</div><div class=\"line\">      _init.call(<span class=\"keyword\">this</span>, options)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * Vuex init hook, injected into each instances init hooks list.</div><div class=\"line\">   */</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">vuexInit</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> options = <span class=\"keyword\">this</span>.$options</div><div class=\"line\">    <span class=\"comment\">// store injection</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (options.store) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.$store = options.store</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (options.parent &amp;&amp; options.parent.$store) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.$store = options.parent.$store</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这段代码的作用就是在 Vue 的生命周期中的初始化（1.0 版本是 init，2.0 版本是 beforeCreated）钩子前插入一段 Vuex 初始化代码。这里做的事情很简单——给 Vue 的实例注入一个 $store 的属性，这也就是为什么我们在 Vue 的组件中可以通过 this.$store.xxx 访问到 Vuex 的各种数据和状态。</p>\n<h2 id=\"认识-Store-构造函数\"><a href=\"#认识-Store-构造函数\" class=\"headerlink\" title=\"认识 Store 构造函数\"></a>认识 Store 构造函数</h2><p>我们在使用 Vuex 的时候，通常会实例化 Store 类，然后传入一个对象，包括我们定义好的 actions、getters、mutations、state等，甚至当我们有多个子模块的时候，我们可以添加一个 modules 对象。那么实例化的时候，到底做了哪些事情呢？带着这个疑问，让我们回到 index.js 文件，重点看一下 Store 类的定义。Store 类定义的代码略长，我不会一下就贴上所有代码，我们来拆解分析它，首先看一下构造函数的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Store</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span> (options = &#123;&#125;) &#123;</div><div class=\"line\">    assert(Vue, <span class=\"string\">`must call Vue.use(Vuex) before creating a store instance.`</span>)</div><div class=\"line\">    assert(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Promise</span> !== <span class=\"string\">'undefined'</span>, <span class=\"string\">`vuex requires a Promise polyfill in this browser.`</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">      state = &#123;&#125;,</div><div class=\"line\">      plugins = [],</div><div class=\"line\">      strict = <span class=\"literal\">false</span></div><div class=\"line\">    &#125; = options</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// store internal state</span></div><div class=\"line\">    <span class=\"keyword\">this</span>._options = options</div><div class=\"line\">    <span class=\"keyword\">this</span>._committing = <span class=\"literal\">false</span></div><div class=\"line\">    <span class=\"keyword\">this</span>._actions = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>._mutations = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>._wrappedGetters = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>._runtimeModules = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>._subscribers = []</div><div class=\"line\">    <span class=\"keyword\">this</span>._watcherVM = <span class=\"keyword\">new</span> Vue()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// bind commit and dispatch to self</span></div><div class=\"line\">    <span class=\"keyword\">const</span> store = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">const</span> &#123; dispatch, commit &#125; = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.dispatch = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boundDispatch</span> (<span class=\"params\">type, payload</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> dispatch.call(store, type, payload)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">this</span>.commit = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boundCommit</span> (<span class=\"params\">type, payload, options</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> commit.call(store, type, payload, options)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// strict mode</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.strict = strict</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// init root module.</span></div><div class=\"line\">    <span class=\"comment\">// this also recursively registers all sub-modules</span></div><div class=\"line\">    <span class=\"comment\">// and collects all module getters inside this._wrappedGetters</span></div><div class=\"line\">    installModule(<span class=\"keyword\">this</span>, state, [], options)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// initialize the store vm, which is responsible for the reactivity</span></div><div class=\"line\">    <span class=\"comment\">// (also registers _wrappedGetters as computed properties)</span></div><div class=\"line\">    resetStoreVM(<span class=\"keyword\">this</span>, state)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// apply plugins</span></div><div class=\"line\">    plugins.concat(devtoolPlugin).forEach(<span class=\"function\"><span class=\"params\">plugin</span> =&gt;</span> plugin(<span class=\"keyword\">this</span>))</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>构造函数的一开始就用了“断言函数”，来判断是否满足一些条件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">assert(Vue, <span class=\"string\">`must call Vue.use(Vuex) before creating a store instance.`</span>)</div></pre></td></tr></table></figure>\n<p>这行代码的目的是确保 Vue 的存在，也就是在我们实例化 Store 之前，必须要保证之前的 install 方法已经执行了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">assert(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Promise</span> !== <span class=\"string\">'undefined'</span>, <span class=\"string\">`vuex requires a Promise polyfill in this browser.`</span>)</div></pre></td></tr></table></figure>\n<p>这行代码的目的是为了确保 Promsie 可以使用的，因为 Vuex 的源码是依赖 Promise 的。Promise 是 es6 提供新的 API，由于现在的浏览器并不是都支持 es6 语法的，所以通常我们会用 babel 编译我们的代码，如果想使用 Promise 这个 特性，我们需要在 package.json 中添加对 babel-polyfill 的依赖并在代码的入口加上 <code>import &#39;babel-polyfill&#39;</code> 这段代码。</p>\n<p>再来看看 assert 这个函数，它并不是浏览器原生支持的，它的实现在 src/util.js 里，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assert</span> (<span class=\"params\">condition, msg</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!condition) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`[vuex] <span class=\"subst\">$&#123;msg&#125;</span>`</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>非常简单，对 condition 判断，如果不不为真，则抛出异常。这个函数虽然简单，但这种编程方式值得我们学习。</p>\n<p>再来看构造函数接下来的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123;</div><div class=\"line\">  state = &#123;&#125;,</div><div class=\"line\">  plugins = [],</div><div class=\"line\">  strict = <span class=\"literal\">false</span></div><div class=\"line\">&#125; = options</div></pre></td></tr></table></figure>\n<p>这里就是利用 es6 的结构赋值拿到 options 里的 state，plugins 和 strict。state 表示 rootState，plugins 表示应用的插件、strict 表示是否开启严格模式。</p>\n<p>接着往下看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// store internal state</span></div><div class=\"line\"><span class=\"keyword\">this</span>._options = options</div><div class=\"line\"><span class=\"keyword\">this</span>._committing = <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"keyword\">this</span>._actions = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</div><div class=\"line\"><span class=\"keyword\">this</span>._mutations = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</div><div class=\"line\"><span class=\"keyword\">this</span>._wrappedGetters = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</div><div class=\"line\"><span class=\"keyword\">this</span>._runtimeModules = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</div><div class=\"line\"><span class=\"keyword\">this</span>._subscribers = []</div><div class=\"line\"><span class=\"keyword\">this</span>._watcherVM = <span class=\"keyword\">new</span> Vue()</div></pre></td></tr></table></figure>\n<p>这里主要是创建一些内部的属性：<br>this._options 存储参数 options。<br>this._committing 标志一个提交状态，作用是保证对 Vuex 中 state 的修改只能在 mutation 的回调函数中，而不能在外部随意修改 state。<br>this._actions 用来存储用户定义的所有的 actions。<br>this._mutations 用来存储用户定义所有的 mutatins。<br>this._wrappedGetters 用来存储用户定义的所有 getters 。<br>this._runtimeModules 用来存储所有的运行时的 modules。<br>this._subscribers 用来存储所有对 mutation 变化的订阅者。<br>this._watcherVM 是一个 Vue 对象的实例，主要是利用 Vue 实例方法 $watch 来观测变化的。</p>\n<p>继续往下看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bind commit and dispatch to self</span></div><div class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">this</span></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; dispatch, commit &#125; = <span class=\"keyword\">this</span></div><div class=\"line\"><span class=\"keyword\">this</span>.dispatch = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boundDispatch</span> (<span class=\"params\">type, payload</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> dispatch.call(store, type, payload)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">this</span>.commit = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boundCommit</span> (<span class=\"params\">type, payload, options</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> commit.call(store, type, payload, options)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// strict mode</span></div><div class=\"line\"><span class=\"keyword\">this</span>.strict = strict</div></pre></td></tr></table></figure>\n<p>这里的代码也不难理解，把 Store 类的 dispatch 和 commit 的方法的 this 指针指向当前 store 的实例上，dispatch 和 commit 的实现我们稍后会分析。this.strict 表示是否开启严格模式，在严格模式下会观测所有的 state 的变化，建议在开发环境时开启严格模式，线上环境要关闭严格模式，否则会有一定的性能开销。</p>\n<h2 id=\"Vuex-的初始化核心\"><a href=\"#Vuex-的初始化核心\" class=\"headerlink\" title=\"Vuex 的初始化核心\"></a>Vuex 的初始化核心</h2><h3 id=\"installModule\"><a href=\"#installModule\" class=\"headerlink\" title=\"installModule\"></a>installModule</h3><p>我们接着往下看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// init root module.</span></div><div class=\"line\"><span class=\"comment\">// this also recursively registers all sub-modules</span></div><div class=\"line\"><span class=\"comment\">// and collects all module getters inside this._wrappedGetters</span></div><div class=\"line\">installModule(<span class=\"keyword\">this</span>, state, [], options)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// initialize the store vm, which is responsible for the reactivity</span></div><div class=\"line\"><span class=\"comment\">// (also registers _wrappedGetters as computed properties)</span></div><div class=\"line\">resetStoreVM(<span class=\"keyword\">this</span>, state)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// apply plugins</span></div><div class=\"line\">plugins.concat(devtoolPlugin).forEach(<span class=\"function\"><span class=\"params\">plugin</span> =&gt;</span> plugin(<span class=\"keyword\">this</span>))</div></pre></td></tr></table></figure>\n<p>这段代码是 Vuex 的初始化的核心，其中，installModule 方法是把我们通过 options 传入的各种属性模块注册和安装；resetStoreVM 方法是初始化 store._vm，观测 state 和 getters 的变化；最后是应用传入的插件。</p>\n<p>下面，我们先来看一下 installModule 的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">installModule</span> (<span class=\"params\">store, rootState, path, module, hot</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> isRoot = !path.length</div><div class=\"line\">  <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">    state,</div><div class=\"line\">    actions,</div><div class=\"line\">    mutations,</div><div class=\"line\">    getters,</div><div class=\"line\">    modules</div><div class=\"line\">  &#125; = <span class=\"built_in\">module</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// set state</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (!isRoot &amp;&amp; !hot) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> parentState = getNestedState(rootState, path.slice(<span class=\"number\">0</span>, <span class=\"number\">-1</span>))</div><div class=\"line\">    <span class=\"keyword\">const</span> moduleName = path[path.length - <span class=\"number\">1</span>]</div><div class=\"line\">    store._withCommit(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      Vue.set(parentState, moduleName, state || &#123;&#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (mutations) &#123;</div><div class=\"line\">    <span class=\"built_in\">Object</span>.keys(mutations).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</div><div class=\"line\">      registerMutation(store, key, mutations[key], path)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (actions) &#123;</div><div class=\"line\">    <span class=\"built_in\">Object</span>.keys(actions).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</div><div class=\"line\">      registerAction(store, key, actions[key], path)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (getters) &#123;</div><div class=\"line\">    wrapGetters(store, getters, path)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (modules) &#123;</div><div class=\"line\">    <span class=\"built_in\">Object</span>.keys(modules).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</div><div class=\"line\">      installModule(store, rootState, path.concat(key), modules[key], hot)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>installModule 函数可接收5个参数，store、rootState、path、module、hot，store 表示当前 Store 实例，rootState 表示根 state，path 表示当前嵌套模块的路径数组，module 表示当前安装的模块，hot 当动态改变 modules 或者热更新的时候为 true。</p>\n<p>先来看这部分代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> isRoot = !path.length</div><div class=\"line\"> <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">   state,</div><div class=\"line\">   actions,</div><div class=\"line\">   mutations,</div><div class=\"line\">   getters,</div><div class=\"line\">   modules</div><div class=\"line\"> &#125; = <span class=\"built_in\">module</span></div></pre></td></tr></table></figure>\n<p>代码首先通过 path 数组的长度判断是否为根。我们在构造函数调用的时候是 installModule(this, state, [], options)，所以这里 isRoot 为 true。module 为传入的 options，我们拿到了 module 下的 state、actions、mutations、getters 以及嵌套的 modules。</p>\n<p>接着看下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// set state</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!isRoot &amp;&amp; !hot) &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> parentState = getNestedState(rootState, path.slice(<span class=\"number\">0</span>, <span class=\"number\">-1</span>))</div><div class=\"line\">  <span class=\"keyword\">const</span> moduleName = path[path.length - <span class=\"number\">1</span>]</div><div class=\"line\">  store._withCommit(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    Vue.set(parentState, moduleName, state || &#123;&#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里判断当不为根且非热更新的情况，然后设置级联状态，这里乍一看不好理解，我们先放一放，稍后来回顾。</p>\n<p>再往下看代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (mutations) &#123;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.keys(mutations).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</div><div class=\"line\">    registerMutation(store, key, mutations[key], path)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (actions) &#123;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.keys(actions).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</div><div class=\"line\">    registerAction(store, key, actions[key], path)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (getters) &#123;</div><div class=\"line\">  wrapGetters(store, getters, path)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里分别是对 mutations、actions、getters 进行注册，如果我们实例化 Store 的时候通过 options 传入这些对象，那么会分别进行注册，我稍后再去介绍注册的具体实现。那么到这，如果 Vuex 没有 module ，这个 installModule 方法可以说已经做完了。但是 Vuex 巧妙了设计了 module 这个概念，因为 Vuex 本身是单一状态树，应用的所有状态都包含在一个大对象内，随着我们应用规模的不断增长，这个 Store 变得非常臃肿。为了解决这个问题，Vuex 允许我们把 store 分 module（模块）。每一个模块包含各自的 state、mutations、actions 和 getters，甚至是嵌套模块。所以，接下来还有一行代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (modules) &#123;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.keys(modules).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</div><div class=\"line\">    installModule(store, rootState, path.concat(key), modules[key], hot)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里通过遍历 modules，递归调用 installModule 去安装子模块。这里传入了 store、rootState、path.concat(key)、和 modules[key]，和刚才不同的是，path 不为空，module 对应为子模块，那么我们回到刚才那段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// set state</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!isRoot &amp;&amp; !hot) &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> parentState = getNestedState(rootState, path.slice(<span class=\"number\">0</span>, <span class=\"number\">-1</span>))</div><div class=\"line\">  <span class=\"keyword\">const</span> moduleName = path[path.length - <span class=\"number\">1</span>]</div><div class=\"line\">  store._withCommit(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    Vue.set(parentState, moduleName, state || &#123;&#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当递归初始化子模块的时候，isRoot 为 false，注意这里有个方法getNestedState(rootState, path)，来看一下 getNestedState 函数的定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNestedState</span> (<span class=\"params\">state, path</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> path.length</div><div class=\"line\">    ? path.reduce(<span class=\"function\">(<span class=\"params\">state, key</span>) =&gt;</span> state[key], state)</div><div class=\"line\">    : state</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个方法很简单，就是根据 path 查找 state 上的嵌套 state。在这里就是传入 rootState 和 path，计算出当前模块的父模块的 state，由于模块的 path 是根据模块的名称 concat 连接的，所以 path 的最后一个元素就是当前模块的模块名，最后调用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">store._withCommit(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  Vue.set(parentState, moduleName, state || &#123;&#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>把当前模块的 state 添加到 parentState 中。<br>这里注意一下我们用了 store._withCommit 方法，来看一下这个方法的定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">_withCommit (fn) &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> committing = <span class=\"keyword\">this</span>._committing</div><div class=\"line\">  <span class=\"keyword\">this</span>._committing = <span class=\"literal\">true</span></div><div class=\"line\">  fn()</div><div class=\"line\">  <span class=\"keyword\">this</span>._committing = committing</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于我们是在修改 state，Vuex 中所有对 state 的修改都会用 _withCommit函数包装，保证在同步修改 state 的过程中 this._committing 的值始终为true。这样当我们观测 state 的变化时，如果 this._committing 的值不为 true，则能检查到这个状态修改是有问题的。</p>\n<p>看到这里，有些同学可能会有点困惑，举个例子来直观感受一下，以 Vuex 源码中的 example/shopping-cart 为例，打开 store/index.js，有这么一段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</div><div class=\"line\">  actions,</div><div class=\"line\">  getters,</div><div class=\"line\">  <span class=\"attr\">modules</span>: &#123;</div><div class=\"line\">    cart,</div><div class=\"line\">    products</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">strict</span>: debug,</div><div class=\"line\">  <span class=\"attr\">plugins</span>: debug ? [createLogger()] : []</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这里有两个子 module，cart 和 products，我们打开 store/modules/cart.js，看一下 cart 模块中的 state 定义，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> state = &#123;</div><div class=\"line\">  <span class=\"attr\">added</span>: [],</div><div class=\"line\">  <span class=\"attr\">checkoutStatus</span>: <span class=\"literal\">null</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们运行这个项目，打开浏览器，利用 Vue 的调试工具来看一下 Vuex 中的状态，如下图所示：</p>\n<p><img src=\"https://camo.githubusercontent.com/2bd2ed9ea9f74792db15c5980666275330ab64a2/687474703a2f2f7374617469632e67616c696c656f2e7869616f6a756b656a692e636f6d2f7374617469632f746d732f736869656c642f767565782d746573742e706e67\" alt=\"vuex-state\"></p>\n<p>可以看到，在 rootState 下，分别有 cart 和 products 2个属性，key 根据模块名称而来，value 就是在每个模块文件中定义的 state，这就把模块 state 挂载到 rootState 上了。</p>\n<p>我们了解完嵌套模块 state 是怎么一回事后，我们回过头来看一下 installModule 过程中的其它 3 个重要方法：registerMutation、registerAction 和 wrapGetters。顾名思义，这 3 个方法分别处理 mutations、actions 和 getters。我们先来看一下 registerMutation 的定义：</p>\n<h3 id=\"registerMutation\"><a href=\"#registerMutation\" class=\"headerlink\" title=\"registerMutation\"></a>registerMutation</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerMutation</span> (<span class=\"params\">store, type, handler, path = []</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> entry = store._mutations[type] || (store._mutations[type] = [])</div><div class=\"line\">  entry.push(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrappedMutationHandler</span> (<span class=\"params\">payload</span>) </span>&#123;</div><div class=\"line\">    handler(getNestedState(store.state, path), payload)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>registerMutation 是对 store 的 mutation 的初始化，它接受 4 个参数，store为当前 Store 实例，type为 mutation 的 key，handler 为 mutation 执行的回调函数，path 为当前模块的路径。mutation 的作用就是同步修改当前模块的 state ，函数首先通过 type 拿到对应的 mutation 对象数组， 然后把一个 mutation 的包装函数 push 到这个数组中，这个函数接收一个参数 payload，这个就是我们在定义 mutation 的时候接收的额外参数。这个函数执行的时候会调用 mutation 的回调函数，并通过 getNestedState(store.state, path) 方法得到当前模块的 state，和 playload 一起作为回调函数的参数。举个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">mutations: &#123;</div><div class=\"line\">  increment (state, n) &#123;</div><div class=\"line\">    state.count += n</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里我们定义了一个 mutation，通过刚才的 registerMutation 方法，我们注册了这个 mutation，这里的 state 对应的就是当前模块的 state，n 就是额外参数 payload，接下来我们会从源码分析的角度来介绍这个 mutation 的回调是何时被调用的，参数是如何传递的。</p>\n<p>我们有必要知道 mutation 的回调函数的调用时机，在 Vuex 中，mutation 的调用是通过 store 实例的 API 接口 commit 来调用的，来看一下 commit 函数的定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">commit (type, payload, options) &#123;</div><div class=\"line\">  <span class=\"comment\">// check object-style commit</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (isObject(type) &amp;&amp; type.type) &#123;</div><div class=\"line\">    options = payload</div><div class=\"line\">    payload = type</div><div class=\"line\">    type = type.type</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">const</span> mutation = &#123; type, payload &#125;</div><div class=\"line\">  <span class=\"keyword\">const</span> entry = <span class=\"keyword\">this</span>._mutations[type]</div><div class=\"line\">  <span class=\"keyword\">if</span> (!entry) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">`[vuex] unknown mutation type: <span class=\"subst\">$&#123;type&#125;</span>`</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">this</span>._withCommit(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    entry.forEach(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">commitIterator</span> (<span class=\"params\">handler</span>) </span>&#123;</div><div class=\"line\">      handler(payload)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">if</span> (!options || !options.silent) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._subscribers.forEach(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> sub(mutation, <span class=\"keyword\">this</span>.state))</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>commit 支持 3 个参数，type 表示 mutation 的类型，payload 表示额外的参数，options 表示一些配置，比如 silent 等，稍后会用到。commit 函数首先对 type 的类型做了判断，处理了 type 为 object 的情况，接着根据 type 去查找对应的 mutation，如果找不到，则输出一条错误信息，否则遍历这个 type 对应的 mutation 对象数组，执行 handler(payload) 方法，这个方法就是之前定义的 wrappedMutationHandler(handler)，执行它就相当于执行了 registerMutation 注册的回调函数，并把当前模块的 state 和 额外参数 payload 作为参数传入。注意这里我们依然使用了 <code>this._withCommit</code> 的方法提交 mutation。commit 函数的最后，判断如果不是静默模式，则遍历 <code>this._subscribers</code>，调用回调函数，并把 mutation 和当前的根 state 作为参数传入。那么这个 <code>this._subscribers</code> 是什么呢？原来 Vuex 的 Store 实例提供了 subscribe API 接口，它的作用是订阅（注册监听） store 的 mutation。先来看一下它的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">subscribe (fn) &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> subs = <span class=\"keyword\">this</span>._subscribers</div><div class=\"line\">  <span class=\"keyword\">if</span> (subs.indexOf(fn) &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    subs.push(fn)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> i = subs.indexOf(fn)</div><div class=\"line\">    <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">      subs.splice(i, <span class=\"number\">1</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>subscribe 方法很简单，他接受的参数是一个回调函数，会把这个回调函数保存到 this._subscribers 上，并返回一个函数，当我们调用这个返回的函数，就可以解除当前函数对 store 的 mutation 的监听。其实，Vuex 的内置 logger 插件就是基于 subscribe 接口实现对 store 的 muation的监听，稍后我们会详细介绍这个插件。</p>\n<h3 id=\"registerAction\"><a href=\"#registerAction\" class=\"headerlink\" title=\"registerAction\"></a>registerAction</h3><p>在了解完 registerMutation，我们再来看一下 registerAction 的定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerAction</span> (<span class=\"params\">store, type, handler, path = []</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">const</span> entry = store._actions[type] || (store._actions[type] = [])</div><div class=\"line\">  <span class=\"keyword\">const</span> &#123; dispatch, commit &#125; = store</div><div class=\"line\">  entry.push(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrappedActionHandler</span> (<span class=\"params\">payload, cb</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> res = handler(&#123;</div><div class=\"line\">      dispatch,</div><div class=\"line\">      commit,</div><div class=\"line\">      <span class=\"attr\">getters</span>: store.getters,</div><div class=\"line\">      <span class=\"attr\">state</span>: getNestedState(store.state, path),</div><div class=\"line\">      <span class=\"attr\">rootState</span>: store.state</div><div class=\"line\">    &#125;, payload, cb)</div><div class=\"line\">    <span class=\"keyword\">if</span> (!isPromise(res)) &#123;</div><div class=\"line\">      res = <span class=\"built_in\">Promise</span>.resolve(res)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (store._devtoolHook) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> res.catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</div><div class=\"line\">        store._devtoolHook.emit(<span class=\"string\">'vuex:error'</span>, err)</div><div class=\"line\">        <span class=\"keyword\">throw</span> err</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> res</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>registerAction 是对 store 的 action 的初始化，它和 registerMutation 的参数一致，和 mutation 不同一点，mutation 是同步修改当前模块的 state，而 action 是可以异步去修改 state，这里不要误会，在 action 的回调中并不会直接修改 state ，仍然是通过提交一个 mutation 去修改 state（在 Vuex 中，mutation 是修改 state 的唯一途径）。那我们就来看看 action 是如何做到这一点的。</p>\n<p>函数首先也是通过 type 拿到对应 action 的对象数组，然后把一个 action 的包装函数 push 到这个数组中，这个函数接收 2 个参数，payload 表示额外参数 ，cb 表示回调函数（实际上我们并没有使用它）。这个函数执行的时候会调用 action 的回调函数，传入一个 context 对象，这个对象包括了 store 的 commit 和 dispatch 方法、getter、当前模块的 state 和 rootState 等等。接着对这个函数的返回值做判断，如果不是一个 Promise 对象，则调用 <code>Promise.resolve（res）</code> 给res 包装成了一个 Promise 对象。这里也就解释了为何 Vuex 的源码依赖 Promise，这里对 Promise 的判断也和简单，参考代码 src/util.js，对 isPromise 的判断如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPromise</span> (<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> val &amp;&amp; <span class=\"keyword\">typeof</span> val.then === <span class=\"string\">'function'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其实就是简单的检查对象的 then 方法，如果包含说明就是一个 Promise 对象。</p>\n<p>接着判断 store._devtoolHook，这个只有当用到 Vuex devtools 开启的时候，我们才能捕获 promise 的过程中的 。 action 的包装函数最后返回 res ，它就是一个地地道道的 Promise 对象。来看个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">actions: &#123;</div><div class=\"line\">  checkout (&#123; commit, state &#125;, payload) &#123;</div><div class=\"line\">    <span class=\"comment\">// 把当前购物车的商品备份起来</span></div><div class=\"line\">    <span class=\"keyword\">const</span> savedCartItems = [...state.cart.added]</div><div class=\"line\">    <span class=\"comment\">// 发送结帐请求，并愉快地清空购物车</span></div><div class=\"line\">    commit(types.CHECKOUT_REQUEST)</div><div class=\"line\">    <span class=\"comment\">// 购物 API 接收一个成功回调和一个失败回调</span></div><div class=\"line\">    shop.buyProducts(</div><div class=\"line\">      products,</div><div class=\"line\">      <span class=\"comment\">// 成功操作</span></div><div class=\"line\">      () =&gt; commit(types.CHECKOUT_SUCCESS),</div><div class=\"line\">      <span class=\"comment\">// 失败操作</span></div><div class=\"line\">      () =&gt; commit(types.CHECKOUT_FAILURE, savedCartItems)</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里我们定义了一个 action，通过刚才的 registerAction 方法，我们注册了这个 action，这里的 commit 就是 store 的 API 接口，可以通过它在 action 里提交一个 mutation。state 对应的就是当前模块的 state，我们在这个 action 里即可以同步提交 mutation，也可以异步提交。接下来我们会从源码分析的角度来介绍这个 action 的回调是何时被调用的，参数是如何传递的。</p>\n<p>我们有必要知道 action 的回调函数的调用时机，在 Vuex 中，action 的调用是通过 store 实例的 API 接口 dispatch 来调用的，来看一下 dispatch 函数的定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch (type, payload) &#123;</div><div class=\"line\"> <span class=\"comment\">// check object-style dispatch</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (isObject(type) &amp;&amp; type.type) &#123;</div><div class=\"line\">    payload = type</div><div class=\"line\">    type = type.type</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">const</span> entry = <span class=\"keyword\">this</span>._actions[type]</div><div class=\"line\">  <span class=\"keyword\">if</span> (!entry) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">`[vuex] unknown action type: <span class=\"subst\">$&#123;type&#125;</span>`</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> entry.length &gt; <span class=\"number\">1</span></div><div class=\"line\">    ? <span class=\"built_in\">Promise</span>.all(entry.map(<span class=\"function\"><span class=\"params\">handler</span> =&gt;</span> handler(payload)))</div><div class=\"line\">    : entry[<span class=\"number\">0</span>](payload)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>dispatch 支持2个参数，type 表示 action 的类型，payload 表示额外的参数。前面几行代码和 commit 接口非常类似，都是找到对应 type 下的 action 对象数组，唯一和 commit 不同的地方是最后部分，它对 action 的对象数组长度做判断，如果长度为 1 则直接调用 entry<a href=\"payload\">0</a>， 这个方法就是之前定义的 wrappedActionHandler(payload, cb)，执行它就相当于执行了 registerAction 注册的回调函数，并把当前模块的 context 和 额外参数 payload 作为参数传入。所以我们在 action 的回调函数里，可以拿到当前模块的上下文包括 store 的 commit 和 dispatch 方法、getter、当前模块的 state 和 rootState，可见 action 是非常灵活的。</p>\n<h3 id=\"wrapGetters\"><a href=\"#wrapGetters\" class=\"headerlink\" title=\"wrapGetters\"></a>wrapGetters</h3><p>了解完 registerAction 后，我们来看看 wrapGetters的定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrapGetters</span> (<span class=\"params\">store, moduleGetters, modulePath</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.keys(moduleGetters).forEach(<span class=\"function\"><span class=\"params\">getterKey</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> rawGetter = moduleGetters[getterKey]</div><div class=\"line\">    <span class=\"keyword\">if</span> (store._wrappedGetters[getterKey]) &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">`[vuex] duplicate getter key: <span class=\"subst\">$&#123;getterKey&#125;</span>`</span>)</div><div class=\"line\">      <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    store._wrappedGetters[getterKey] = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrappedGetter</span> (<span class=\"params\">store</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> rawGetter(</div><div class=\"line\">        getNestedState(store.state, modulePath), <span class=\"comment\">// local state</span></div><div class=\"line\">        store.getters, <span class=\"comment\">// getters</span></div><div class=\"line\">        store.state <span class=\"comment\">// root state</span></div><div class=\"line\">      )</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>wrapGetters 是对 store 的 getters 初始化，它接受 3个 参数， store 表示当前 Store 实例，moduleGetters 表示当前模块下的所有 getters, modulePath 对应模块的路径。细心的同学会发现，和刚才的 registerMutation 以及 registerAction 不同，这里对 getters 的循环遍历是放在了函数体内，并且 getters 和它们的一个区别是不允许 getter 的 key 有重复。</p>\n<p>这个函数做的事情就是遍历 moduleGetters，把每一个 getter 包装成一个方法，添加到 store._wrappedGetters 对象中，注意 getter 的 key 是不允许重复的。在这个包装的方法里，会执行 getter 的回调函数，并把当前模块的 state，store 的 getters 和 store 的 rootState 作为它参数。来看一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> cartProducts = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> state.cart.added.map(<span class=\"function\">(<span class=\"params\">&#123; id, quantity &#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> product = state.products.all.find(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.id === id)</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: product.title,</div><div class=\"line\">      <span class=\"attr\">price</span>: product.price,</div><div class=\"line\">      quantity</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里我们定义了一个 getter，通过刚才的 wrapGetters 方法，我们把这个 getter 添加到 store._wrappedGetters 对象里，这和回调函数的参数 state 对应的就是当前模块的 state，接下来我们从源码的角度分析这个函数是如何被调用，参数是如何传递的。</p>\n<p>我们有必要知道 getter 的回调函数的调用时机，在 Vuex 中，我们知道当我们在组件中通过 this.$store.getters.xxxgetters 可以访问到对应的 getter 的回调函数，那么我们需要把对应 getter 的包装函数的执行结果绑定到 <figure class=\"highlight plain\"><figcaption><span>上。这部分的逻辑就在 resetStoreVM 函数里。我们在 Store 的构造函数中，在执行完 installModule 方法后，就会执行 resetStoreVM 方法。来看一下它的定义：</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### resetStoreVM</div><div class=\"line\"></div><div class=\"line\">```javascript</div><div class=\"line\">function resetStoreVM (store, state) &#123;</div><div class=\"line\">  const oldVm = store._vm</div><div class=\"line\"></div><div class=\"line\">  // bind store public getters</div><div class=\"line\">  store.getters = &#123;&#125;</div><div class=\"line\">  const wrappedGetters = store._wrappedGetters</div><div class=\"line\">  const computed = &#123;&#125;</div><div class=\"line\">  Object.keys(wrappedGetters).forEach(key =&gt; &#123;</div><div class=\"line\">    const fn = wrappedGetters[key]</div><div class=\"line\">    // use computed to leverage its lazy-caching mechanism</div><div class=\"line\">    computed[key] = () =&gt; fn(store)</div><div class=\"line\">    Object.defineProperty(store.getters, key, &#123;</div><div class=\"line\">      get: () =&gt; store._vm[key]</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  // use a Vue instance to store the state tree</div><div class=\"line\">  // suppress warnings just in case the user has added</div><div class=\"line\">  // some funky global mixins</div><div class=\"line\">  const silent = Vue.config.silent</div><div class=\"line\">  Vue.config.silent = true</div><div class=\"line\">  store._vm = new Vue(&#123;</div><div class=\"line\">    data: &#123; state &#125;,</div><div class=\"line\">    computed</div><div class=\"line\">  &#125;)</div><div class=\"line\">  Vue.config.silent = silent</div><div class=\"line\"></div><div class=\"line\">  // enable strict mode for new vm</div><div class=\"line\">  if (store.strict) &#123;</div><div class=\"line\">    enableStrictMode(store)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  if (oldVm) &#123;</div><div class=\"line\">    // dispatch changes in all subscribed watchers</div><div class=\"line\">    // to force getter re-evaluation.</div><div class=\"line\">    store._withCommit(() =&gt; &#123;</div><div class=\"line\">      oldVm.state = null</div><div class=\"line\">    &#125;)</div><div class=\"line\">    Vue.nextTick(() =&gt; oldVm.$destroy())</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个方法主要是重置一个私有的 _vm 对象，它是一个 Vue 的实例。这个 _vm 对象会保留我们的 state 树，以及用计算属性的方式存储了 store 的 getters。来具体看看它的实现过程。我们把这个函数拆成几个部分来分析：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> oldVm = store._vm</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// bind store public getters</span></div><div class=\"line\">  store.getters = &#123;&#125;</div><div class=\"line\">  <span class=\"keyword\">const</span> wrappedGetters = store._wrappedGetters</div><div class=\"line\">  <span class=\"keyword\">const</span> computed = &#123;&#125;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.keys(wrappedGetters).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> fn = wrappedGetters[key]</div><div class=\"line\">    <span class=\"comment\">// use computed to leverage its lazy-caching mechanism</span></div><div class=\"line\">    computed[key] = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> fn(store)</div><div class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(store.getters, key, &#123;</div><div class=\"line\">      <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> store._vm[key]</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<p>这部分留了现有的 store._vm 对象，接着遍历 store._wrappedGetters 对象，在遍历过程中，依次拿到每个 getter 的包装函数，并把这个包装函数执行的结果用 computed 临时变量保存。接着用 es5 的 Object.defineProperty 方法为 store.getters 定义了 get 方法，也就是当我们在组件中调用this.$store.getters.xxxgetters 这个方法的时候，会访问 store._vm[xxxgetters]。我们接着往下看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// use a Vue instance to store the state tree</span></div><div class=\"line\"><span class=\"comment\">// suppress warnings just in case the user has added</span></div><div class=\"line\"> <span class=\"comment\">// some funky global mixins</span></div><div class=\"line\"> <span class=\"keyword\">const</span> silent = Vue.config.silent</div><div class=\"line\"> Vue.config.silent = <span class=\"literal\">true</span></div><div class=\"line\"> store._vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">   <span class=\"attr\">data</span>: &#123; state &#125;,</div><div class=\"line\">   computed</div><div class=\"line\"> &#125;)</div><div class=\"line\"> Vue.config.silent = silent</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// enable strict mode for new vm</span></div><div class=\"line\"> <span class=\"keyword\">if</span> (store.strict) &#123;</div><div class=\"line\">   enableStrictMode(store)</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>这部分的代码首先先拿全局 Vue.config.silent 的配置，然后临时把这个配置设成 true，接着实例化一个 Vue 的实例，把 store 的状态树 state 作为 data 传入，把我们刚才的临时变量 computed 作为计算属性传入。然后再把之前的 silent 配置重置。设置 silent 为 true 的目的是为了取消这个 _vm 的所有日志和警告。把 computed 对象作为 _vm 的 computed 属性，这样就完成了 getters 的注册。因为当我们在组件中访问 <code>this.$store.getters.xxxgetters</code> 的时候，就相当于访问 <code>store._vm[xxxgetters]</code>，也就是在访问 computed[xxxgetters]，这样就访问到了 xxxgetters 对应的回调函数了。这段代码最后判断 strict 属性决定是否开启严格模式，我们来看看严格模式都干了什么：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enableStrictMode</span> (<span class=\"params\">store</span>) </span>&#123;</div><div class=\"line\">  store._vm.$watch(<span class=\"string\">'state'</span>, () =&gt; &#123;</div><div class=\"line\">    assert(store._committing, <span class=\"string\">`Do not mutate vuex store state outside mutation handlers.`</span>)</div><div class=\"line\">  &#125;, &#123; <span class=\"attr\">deep</span>: <span class=\"literal\">true</span>, <span class=\"attr\">sync</span>: <span class=\"literal\">true</span> &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>严格模式做的事情很简单，监测 store._vm.state 的变化，看看 state 的变化是否通过执行 mutation 的回调函数改变，如果是外部直接修改 state，那么 <code>store._committing</code> 的值为 false，这样就抛出一条错误。再次强调一下，Vuex 中对 state 的修改只能在 mutation 的回调函数里。</p>\n<p>回到 resetStoreVM 函数，我们来看一下最后一部分：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (oldVm) &#123;</div><div class=\"line\">  <span class=\"comment\">// dispatch changes in all subscribed watchers</span></div><div class=\"line\">  <span class=\"comment\">// to force getter re-evaluation.</span></div><div class=\"line\">  store._withCommit(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    oldVm.state = <span class=\"literal\">null</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">  Vue.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> oldVm.$destroy())</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里的逻辑很简单，由于这个函数每次都会创建新的 Vue 实例并赋值到 store._vm 上，那么旧的 _vm 对象的状态设置为 null，并调用 $destroy 方法销毁这个旧的 _vm 对象。</p>\n<p>那么到这里，Vuex 的初始化基本告一段落了，初始化核心就是 installModule 和<br>resetStoreVM 函数。通过对 mutations 、actions 和 getters 的注册，我们了解到 state 的是按模块划分的，按模块的嵌套形成一颗状态树。而 actions、mutations 和 getters 的全局的，其中 actions 和 mutations 的 key 允许重复，但 getters 的 key 是不允许重复的。官方推荐我们给这些全局的对象在定义的时候加一个名称空间来避免命名冲突。<br>从源码的角度介绍完 Vuex 的初始化的玩法，我们再从 Vuex 提供的 API 方向来分析其中的源码，看看这些 API 是如何实现的。</p>\n<h2 id=\"Vuex-API-分析\"><a href=\"#Vuex-API-分析\" class=\"headerlink\" title=\"Vuex API 分析\"></a>Vuex API 分析</h2><p>Vuex 常见的 API 如 dispatch、commit 、subscribe �我们前面已经介绍过了，这里就不再赘述了，下面介绍的一些 Store 的 API，虽然不常用，�但是了解一下也不错。�</p>\n<h3 id=\"watch-getter-cb-options\"><a href=\"#watch-getter-cb-options\" class=\"headerlink\" title=\"watch(getter, cb, options)\"></a>watch(getter, cb, options)</h3><p>watch 作用是响应式的监测一个 getter 方法的返回值，当值改变时调用回调。getter 接收 store 的 state 作为唯一参数。来看一下它的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">watch (getter, cb, options) &#123;</div><div class=\"line\">    assert(<span class=\"keyword\">typeof</span> getter === <span class=\"string\">'function'</span>, <span class=\"string\">`store.watch only accepts a function.`</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._watcherVM.$watch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> getter(<span class=\"keyword\">this</span>.state), cb, options)</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>函数首先断言 watch 的 getter 必须是一个方法，接着利用了内部一个 Vue 的实例对象 <code>this._watcherVM</code> 的 $watch 方法，观测 getter 方法返回值的变化，如果有变化则调用 cb 函数，回调函数的参数为新值和旧值。watch 方法返回的是一个方法，调用它则取消观测。</p>\n<h3 id=\"registerModule-path-module\"><a href=\"#registerModule-path-module\" class=\"headerlink\" title=\"registerModule(path, module)\"></a>registerModule(path, module)</h3><p>registerModule 的作用是注册一个动态模块，有的时候当我们异步加载一些业务的时候，可以通过这个 API 接口去动态注册模块，来看一下它的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">registerModule (path, <span class=\"built_in\">module</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> path === <span class=\"string\">'string'</span>) path = [path]</div><div class=\"line\">    assert(<span class=\"built_in\">Array</span>.isArray(path), <span class=\"string\">`module path must be a string or an Array.`</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>._runtimeModules[path.join(<span class=\"string\">'.'</span>)] = <span class=\"built_in\">module</span></div><div class=\"line\">    installModule(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.state, path, <span class=\"built_in\">module</span>)</div><div class=\"line\">    <span class=\"comment\">// reset store to update getters...</span></div><div class=\"line\">    resetStoreVM(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.state)</div></pre></td></tr></table></figure>\n<p>函数首先对 path 判断，如果 path 是一个 string 则把 path 转换成一个 Array。接着把 module 对象缓存到 this._runtimeModules 这个对象里，path 用点连接作为该对象的 key。接着和初始化 Store 的逻辑一样，调用 installModule 和 resetStoreVm 方法安装一遍动态注入的 module。</p>\n<h3 id=\"unregisterModule-path\"><a href=\"#unregisterModule-path\" class=\"headerlink\" title=\"unregisterModule(path)\"></a>unregisterModule(path)</h3><p>和 registerModule 方法相对的就是 unregisterModule 方法，它的作用是注销一个动态模块，来看一下它的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">unregisterModule (path) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> path === <span class=\"string\">'string'</span>) path = [path]</div><div class=\"line\">    assert(<span class=\"built_in\">Array</span>.isArray(path), <span class=\"string\">`module path must be a string or an Array.`</span>)</div><div class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>._runtimeModules[path.join(<span class=\"string\">'.'</span>)]</div><div class=\"line\">    <span class=\"keyword\">this</span>._withCommit(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> parentState = getNestedState(<span class=\"keyword\">this</span>.state, path.slice(<span class=\"number\">0</span>, <span class=\"number\">-1</span>))</div><div class=\"line\">      Vue.delete(parentState, path[path.length - <span class=\"number\">1</span>])</div><div class=\"line\">    &#125;)</div><div class=\"line\">    resetStore(<span class=\"keyword\">this</span>)</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>函数首先还是对 path 的类型做了判断，这部分逻辑和注册是一样的。接着从 this._runtimeModules 里删掉以 path 点连接的 key 对应的模块。接着通过 <code>this._withCommit</code> 方法把当前模块的 state 对象从父 state 上删除。最后调用 resetStore(this) 方法，来看一下这个方法的定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resetStore</span> (<span class=\"params\">store</span>) </span>&#123;</div><div class=\"line\">  store._actions = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</div><div class=\"line\">  store._mutations = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</div><div class=\"line\">  store._wrappedGetters = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</div><div class=\"line\">  <span class=\"keyword\">const</span> state = store.state</div><div class=\"line\">  <span class=\"comment\">// init root module</span></div><div class=\"line\">  installModule(store, state, [], store._options, <span class=\"literal\">true</span>)</div><div class=\"line\">  <span class=\"comment\">// init all runtime modules</span></div><div class=\"line\">  <span class=\"built_in\">Object</span>.keys(store._runtimeModules).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</div><div class=\"line\">    installModule(store, state, key.split(<span class=\"string\">'.'</span>), store._runtimeModules[key], <span class=\"literal\">true</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"comment\">// reset vm</span></div><div class=\"line\">  resetStoreVM(store, state)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个方法作用就是重置 store 对象，重置 store 的 _actions、_mutations、_wrappedGetters 等等属性。然后再次调用 installModules 去重新安装一遍 Module 对应的这些属性，注意这里我们的最后一个参数 hot 为true，表示它是一次热更新。这样在 installModule 这个方法体类，如下这段逻辑就不会执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">installModule</span> (<span class=\"params\">store, rootState, path, module, hot</span>) </span>&#123;</div><div class=\"line\">  ... </div><div class=\"line\">  <span class=\"comment\">// set state</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (!isRoot &amp;&amp; !hot) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> parentState = getNestedState(rootState, path.slice(<span class=\"number\">0</span>, <span class=\"number\">-1</span>))</div><div class=\"line\">    <span class=\"keyword\">const</span> moduleName = path[path.length - <span class=\"number\">1</span>]</div><div class=\"line\">    store._withCommit(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      Vue.set(parentState, moduleName, state || &#123;&#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于 hot 始终为 true，这里我们就不会重新对状态树做设置，我们的 state 保持不变。因为我们已经明确的删除了对应 path 下的 state 了，要做的事情只不过就是重新注册一遍 muations、actions 以及 getters。</p>\n<p>回调 resetStore 方法，接下来遍历 this._runtimeModules 模块，重新安装所有剩余的 runtime Moudles。最后还是调用 resetStoreVM 方法去重置 Store 的 _vm 对象。</p>\n<h3 id=\"hotUpdate-newOptions\"><a href=\"#hotUpdate-newOptions\" class=\"headerlink\" title=\"hotUpdate(newOptions)\"></a>hotUpdate(newOptions)</h3><p>hotUpdate 的作用是热加载新的 action 和 mutation。 来看一下它的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hotUpdate (newOptions) &#123;</div><div class=\"line\">  updateModule(<span class=\"keyword\">this</span>._options, newOptions)</div><div class=\"line\">  resetStore(<span class=\"keyword\">this</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>函数首先调用 updateModule 方法去更新状态，其中当前 Store 的 opition 配置和要更新的 newOptions 会作为参数。来看一下这个函数的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateModule</span> (<span class=\"params\">targetModule, newModule</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (newModule.actions) &#123;</div><div class=\"line\">    targetModule.actions = newModule.actions</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (newModule.mutations) &#123;</div><div class=\"line\">    targetModule.mutations = newModule.mutations</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (newModule.getters) &#123;</div><div class=\"line\">    targetModule.getters = newModule.getters</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (newModule.modules) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> newModule.modules) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!(targetModule.modules &amp;&amp; targetModule.modules[key])) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.warn(</div><div class=\"line\">          <span class=\"string\">`[vuex] trying to add a new module '<span class=\"subst\">$&#123;key&#125;</span>' on hot reloading, `</span> +</div><div class=\"line\">          <span class=\"string\">'manual reload is needed'</span></div><div class=\"line\">        )</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      updateModule(targetModule.modules[key], newModule.modules[key])</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>首先我们对 newOptions 对象的 actions、mutations 以及 getters 做了判断，如果有这些属性的话则替换 targetModule（当前 Store 的 options）对应的属性。最后判断如果 newOptions 包含 modules 这个 key，则遍历这个 modules 对象，如果 modules 对应的 key 不在之前的 modules 中，则报一条警告，因为这是添加一个新的 module ，需要手动重新加载。如果 key 在之前的 modules，则递归调用 updateModule，热更新子模块。</p>\n<p>调用完 updateModule 后，回到 hotUpdate 函数，接着调用 resetStore 方法重新设置 store，刚刚我们已经介绍过了。</p>\n<h3 id=\"replaceState\"><a href=\"#replaceState\" class=\"headerlink\" title=\"replaceState\"></a>replaceState</h3><p>replaceState的作用是替换整个 rootState，一般在用于调试，来看一下它的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">replaceState (state) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._withCommit(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>._vm.state = state</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>函数非常简单，就是调用 this._withCommit 方法修改 Store 的 rootState，之所以提供这个 API 是由于在我们是不能在 muations 的回调函数外部去改变 state。</p>\n<p>到此为止，API 部分介绍完了，其实整个 Vuex 源码下的 src/index.js 文件里的代码基本都过了一遍。</p>\n<p>##辅助函数</p>\n<p>Vuex 除了提供我们 Store 对象外，还对外提供了一系列的辅助函数，方便我们在代码中使用 Vuex，提供了操作 store 的各种属性的一系列语法糖，下面我们来一起看一下：</p>\n<h3 id=\"mapState\"><a href=\"#mapState\" class=\"headerlink\" title=\"mapState\"></a>mapState</h3><p>mapState 工具函数会将 store 中的 state 映射到局部计算属性中。为了更好理解它的实现，先来看一下它的使用示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// vuex 提供了独立的构建工具函数 Vuex.mapState</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  computed: mapState(&#123;</div><div class=\"line\">    <span class=\"comment\">// 箭头函数可以让代码非常简洁</span></div><div class=\"line\">    count: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count,</div><div class=\"line\">    <span class=\"comment\">// 传入字符串 'count' 等同于 `state =&gt; state.count`</span></div><div class=\"line\">    countAlias: <span class=\"string\">'count'</span>,</div><div class=\"line\">    <span class=\"comment\">// 想访问局部状态，就必须借助于一个普通函数，函数中使用 `this` 获取局部状态</span></div><div class=\"line\">    countPlusLocalState (state) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> state.count + <span class=\"keyword\">this</span>.localCount</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当计算属性名称和状态子树名称对应相同时，我们可以向 mapState 工具函数传入一个字符串数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">computed: mapState([</div><div class=\"line\">  <span class=\"comment\">// 映射 this.count 到 this.$store.state.count</span></div><div class=\"line\">  <span class=\"string\">'count'</span></div></pre></td></tr></table></figure>\n<p>通过例子我们可以直观的看到，mapState 函数可以接受一个对象，也可以接收一个数组，那它底层到底干了什么事呢，我们一起来看一下源码这个函数的定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapState</span> (<span class=\"params\">states</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> res = &#123;&#125;</div><div class=\"line\">  normalizeMap(states).forEach(<span class=\"function\">(<span class=\"params\">&#123; key, val &#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">    res[key] = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mappedState</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> val === <span class=\"string\">'function'</span></div><div class=\"line\">        ? val.call(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.$store.state, <span class=\"keyword\">this</span>.$store.getters)</div><div class=\"line\">        : <span class=\"keyword\">this</span>.$store.state[val]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">return</span> res</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>函数首先对传入的参数调用 normalizeMap 方法，我们来看一下这个函数的定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">normalizeMap</span> (<span class=\"params\">map</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(map)</div><div class=\"line\">    ? map.map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> (&#123; key, <span class=\"attr\">val</span>: key &#125;))</div><div class=\"line\">    : <span class=\"built_in\">Object</span>.keys(map).map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> (&#123; key, <span class=\"attr\">val</span>: map[key] &#125;))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个方法判断参数 map 是否为数组，如果是数组，则调用数组的 map 方法，把数组的每个元素转换成一个 <code>{key, val: key}</code>的对象；否则传入的 map 就是一个对象（从 mapState 的使用场景来看，传入的参数不是数组就是对象），我们调用 <code>Object.keys</code> 方法遍历这个 map 对象的 key，把数组的每个 key 都转换成一个 <code>{key, val: key}</code>的对象。最后我们把这个对象数组作为 normalizeMap 的返回值。</p>\n<p>回到 mapState 函数，在调用了 normalizeMap 函数后，把传入的 states 转换成由 {key, val} 对象构成的数组，接着调用 forEach 方法遍历这个数组，构造一个新的对象，这个新对象每个元素都返回一个新的函数 mappedState，函数对 val 的类型判断，如果 val 是一个函数，则直接调用这个 val 函数，把当前 store 上的 state 和 getters 作为参数，返回值作为 mappedState 的返回值；否则直接把 <code>this.$store.state[val]</code> 作为 mappedState 的返回值。</p>\n<p>那么为何 mapState 函数的返回值是这样一个对象呢，因为 mapState 的作用是把全局的 state 和 getters 映射到当前组件的 computed 计算属性中，我们知道在 Vue 中 每个计算属性都是一个函数。</p>\n<p>为了更加直观地说明，回到刚才的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  computed: mapState(&#123;</div><div class=\"line\">    <span class=\"comment\">// 箭头函数可以让代码非常简洁</span></div><div class=\"line\">    count: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count,</div><div class=\"line\">    <span class=\"comment\">// 传入字符串 'count' 等同于 `state =&gt; state.count`</span></div><div class=\"line\">    countAlias: <span class=\"string\">'count'</span>,</div><div class=\"line\">    <span class=\"comment\">// 想访问局部状态，就必须借助于一个普通函数，函数中使用 `this` 获取局部状态</span></div><div class=\"line\">    countPlusLocalState (state) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> state.count + <span class=\"keyword\">this</span>.localCount</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>经过 mapState 函数调用后的结果，如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  computed: &#123;</div><div class=\"line\">    count() &#123;</div><div class=\"line\">\t  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.count</div><div class=\"line\">    &#125;,</div><div class=\"line\">    countAlias() &#123;</div><div class=\"line\">\t  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state[<span class=\"string\">'count'</span>]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    countPlusLocalState() &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.count + <span class=\"keyword\">this</span>.localCount</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们再看一下 mapState 参数为数组的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">computed: mapState([</div><div class=\"line\">  <span class=\"comment\">// 映射 this.count 到 this.$store.state.count</span></div><div class=\"line\">  <span class=\"string\">'count'</span></div><div class=\"line\">])</div></pre></td></tr></table></figure>\n<p>经过 mapState 函数调用后的结果，如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">computed: &#123;</div><div class=\"line\">  count() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state[<span class=\"string\">'count'</span>]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"mapGetters\"><a href=\"#mapGetters\" class=\"headerlink\" title=\"mapGetters\"></a>mapGetters</h3><p>mapGetters 工具函数会将 store 中的 getter 映射到局部计算属性中。它的功能和 mapState 非常类似，我们来直接看它的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapGetters</span> (<span class=\"params\">getters</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> res = &#123;&#125;</div><div class=\"line\">  normalizeMap(getters).forEach(<span class=\"function\">(<span class=\"params\">&#123; key, val &#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">    res[key] = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mappedGetter</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!(val <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.$store.getters)) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.error(<span class=\"string\">`[vuex] unknown getter: <span class=\"subst\">$&#123;val&#125;</span>`</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.getters[val]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">return</span> res</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>mapGetters 的实现也和 mapState 很类似，不同的是它的 val 不能是函数，只能是一个字符串，而且会检查 <code>val in this.$store.getters</code> 的值，如果为 false 会输出一条错误日志。为了更直观地理解，我们来看一个简单的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  computed: &#123;</div><div class=\"line\">    <span class=\"comment\">// 使用对象扩展操作符把 getter 混入到 computed 中</span></div><div class=\"line\">    ...mapGetters([</div><div class=\"line\">      <span class=\"string\">'doneTodosCount'</span>,</div><div class=\"line\">      <span class=\"string\">'anotherGetter'</span>,</div><div class=\"line\">      <span class=\"comment\">// ...</span></div><div class=\"line\">    ])</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>经过 mapGetters 函数调用后的结果，如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  computed: &#123;</div><div class=\"line\">    doneTodosCount() &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.getters[<span class=\"string\">'doneTodosCount'</span>]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    anotherGetter() &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.getters[<span class=\"string\">'anotherGetter'</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>再看一个参数 mapGetters 参数是对象的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">computed: mapGetters(&#123;</div><div class=\"line\">  <span class=\"comment\">// 映射 this.doneCount 到 store.getters.doneTodosCount</span></div><div class=\"line\">  doneCount: <span class=\"string\">'doneTodosCount'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>经过 mapGetters 函数调用后的结果，如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">computed: &#123;</div><div class=\"line\">  doneCount() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.getters[<span class=\"string\">'doneTodosCount'</span>]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"mapActions\"><a href=\"#mapActions\" class=\"headerlink\" title=\"mapActions\"></a>mapActions</h3><p>mapActions 工具函数会将 store 中的 dispatch 方法映射到组件的 methods 中。和 mapState、mapGetters 也类似，只不过它映射的地方不是计算属性，而是组件的 methods 对象上。我们来直接看它的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapActions</span> (<span class=\"params\">actions</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> res = &#123;&#125;</div><div class=\"line\">  normalizeMap(actions).forEach(<span class=\"function\">(<span class=\"params\">&#123; key, val &#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">    res[key] = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mappedAction</span> (<span class=\"params\">...args</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.dispatch.apply(<span class=\"keyword\">this</span>.$store, [val].concat(args))</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">return</span> res</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看到，函数的实现套路和 mapState、mapGetters 差不多，甚至更简单一些， 实际上就是做了一层函数包装。为了更直观地理解，我们来看一个简单的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    ...mapActions([</div><div class=\"line\">      <span class=\"string\">'increment'</span> <span class=\"comment\">// 映射 this.increment() 到 this.$store.dispatch('increment')</span></div><div class=\"line\">    ]),</div><div class=\"line\">    ...mapActions(&#123;</div><div class=\"line\">      <span class=\"attr\">add</span>: <span class=\"string\">'increment'</span> <span class=\"comment\">// 映射 this.add() to this.$store.dispatch('increment')</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>经过 mapActions 函数调用后的结果，如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    increment(...args) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.dispatch.apply(<span class=\"keyword\">this</span>.$store, [<span class=\"string\">'increment'</span>].concat(args))</div><div class=\"line\">\t&#125;</div><div class=\"line\">    add(...args) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.dispatch.apply(<span class=\"keyword\">this</span>.$store, [<span class=\"string\">'increment'</span>].concat(args))</div><div class=\"line\">\t&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"mapMutations\"><a href=\"#mapMutations\" class=\"headerlink\" title=\"mapMutations\"></a>mapMutations</h3><p>mapMutations 工具函数会将 store 中的 commit 方法映射到组件的 methods 中。和 mapActions 的功能几乎一样，我们来直接看它的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapMutations</span> (<span class=\"params\">mutations</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> res = &#123;&#125;</div><div class=\"line\">  normalizeMap(mutations).forEach(<span class=\"function\">(<span class=\"params\">&#123; key, val &#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">    res[key] = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mappedMutation</span> (<span class=\"params\">...args</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.commit.apply(<span class=\"keyword\">this</span>.$store, [val].concat(args))</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">return</span> res</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>函数的实现几乎也和 mapActions 一样，唯一差别就是映射的是 store 的 commit 方法。为了更直观地理解，我们来看一个简单的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    ...mapMutations([</div><div class=\"line\">      <span class=\"string\">'increment'</span> <span class=\"comment\">// 映射 this.increment() 到 this.$store.commit('increment')</span></div><div class=\"line\">    ]),</div><div class=\"line\">    ...mapMutations(&#123;</div><div class=\"line\">      <span class=\"attr\">add</span>: <span class=\"string\">'increment'</span> <span class=\"comment\">// 映射 this.add() 到 this.$store.commit('increment')</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>经过 mapMutations 函数调用后的结果，如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    increment(...args) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.commit.apply(<span class=\"keyword\">this</span>.$store, [<span class=\"string\">'increment'</span>].concat(args))</div><div class=\"line\">\t&#125;</div><div class=\"line\">    add(...args) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.commit.apply(<span class=\"keyword\">this</span>.$store, [<span class=\"string\">'increment'</span>].concat(args))</div><div class=\"line\">\t&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>###插件</p>\n<p>Vuex 的 store 接收 plugins 选项，一个 Vuex 的插件就是一个简单的方法，接收 store 作为唯一参数。插件作用通常是用来监听每次 mutation 的变化，来做一些事情。</p>\n<p>在 store 的构造函数的最后，我们通过如下代码调用插件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> devtoolPlugin <span class=\"keyword\">from</span> <span class=\"string\">'./plugins/devtool'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// apply plugins</span></div><div class=\"line\">plugins.concat(devtoolPlugin).forEach(<span class=\"function\"><span class=\"params\">plugin</span> =&gt;</span> plugin(<span class=\"keyword\">this</span>))</div></pre></td></tr></table></figure>\n<p>我们通常实例化 store 的时候，还会调用 logger 插件，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"><span class=\"keyword\">import</span> createLogger <span class=\"keyword\">from</span> <span class=\"string\">'vuex/dist/logger'</span></div><div class=\"line\"></div><div class=\"line\">Vue.use(Vuex)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> debug = process.env.NODE_ENV !== <span class=\"string\">'production'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  plugins: debug ? [createLogger()] : []</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>在上述 2 个例子中，我们分别调用了 devtoolPlugin 和 createLogger() 2 个插件，它们是 Vuex 内置插件，我们接下来分别看一下他们的实现。</p>\n<h3 id=\"devtoolPlugin\"><a href=\"#devtoolPlugin\" class=\"headerlink\" title=\"devtoolPlugin\"></a>devtoolPlugin</h3><p>devtoolPlugin 主要功能是利用 Vue 的开发者工具和 Vuex 做配合，通过开发者工具的面板展示 Vuex 的状态。它的源码在 src/plugins/devtool.js 中，来看一下这个插件到底做了哪些事情。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> devtoolHook =</div><div class=\"line\">  <span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span> &amp;&amp;</div><div class=\"line\">  <span class=\"built_in\">window</span>.__VUE_DEVTOOLS_GLOBAL_HOOK__</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">devtoolPlugin</span> (<span class=\"params\">store</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!devtoolHook) <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">  store._devtoolHook = devtoolHook</div><div class=\"line\"></div><div class=\"line\">  devtoolHook.emit(<span class=\"string\">'vuex:init'</span>, store)</div><div class=\"line\"></div><div class=\"line\">  devtoolHook.on(<span class=\"string\">'vuex:travel-to-state'</span>, targetState =&gt; &#123;</div><div class=\"line\">    store.replaceState(targetState)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  store.subscribe(<span class=\"function\">(<span class=\"params\">mutation, state</span>) =&gt;</span> &#123;</div><div class=\"line\">    devtoolHook.emit(<span class=\"string\">'vuex:mutation'</span>, mutation, state)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们直接从对外暴露的 devtoolPlugin 函数看起，函数首先判断了devtoolHook 的值，如果我们浏览器装了 Vue 开发者工具，那么在 window 上就会有一个 <strong>VUE_DEVTOOLS_GLOBAL_HOOK</strong> 的引用， 那么这个 devtoolHook 就指向这个引用。</p>\n<p>接下来通过 <code>devtoolHook.emit(&#39;vuex:init&#39;, store)</code> 派发一个 Vuex 初始化的事件，这样开发者工具就能拿到当前这个 store 实例。</p>\n<p>接下来通过 <code>devtoolHook.on(&#39;vuex:travel-to-state&#39;, targetState =&gt; { store.replaceState(targetState) })</code>监听 Vuex 的 traval-to-state 的事件，把当前的状态树替换成目标状态树，这个功能也是利用 Vue 开发者工具替换 Vuex 的状态。</p>\n<p>最后通过 <code>store.subscribe((mutation, state) =&gt; { devtoolHook.emit(&#39;vuex:mutation&#39;, mutation, state) })</code> 方法订阅 store 的 state 的变化，当 store 的 mutation 提交了 state 的变化， 会触发回调函数——通过 devtoolHook 派发一个 Vuex mutation 的事件，mutation 和 rootState 作为参数，这样开发者工具就可以观测到 Vuex state 的实时变化，在面板上展示最新的状态树。</p>\n<h3 id=\"loggerPlugin\"><a href=\"#loggerPlugin\" class=\"headerlink\" title=\"loggerPlugin\"></a>loggerPlugin</h3><p>通常在开发环境中，我们希望实时把 mutation 的动作以及 store 的 state 的变化实时输出，那么我们可以用 loggerPlugin 帮我们做这个事情。它的源码在 src/plugins/logger.js 中，来看一下这个插件到底做了哪些事情。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Credits: borrowed code from fcomb/redux-logger</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; deepCopy &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../util'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createLogger</span> (<span class=\"params\">&#123;</span></span></div><div class=\"line\">  collapsed = true,</div><div class=\"line\">  transformer = state =&gt; state,</div><div class=\"line\">  mutationTransformer = mut =&gt; mut</div><div class=\"line\">&#125; = &#123;&#125;) &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">store</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> prevState = deepCopy(store.state)</div><div class=\"line\"></div><div class=\"line\">    store.subscribe(<span class=\"function\">(<span class=\"params\">mutation, state</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">console</span> === <span class=\"string\">'undefined'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">const</span> nextState = deepCopy(state)</div><div class=\"line\">      <span class=\"keyword\">const</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</div><div class=\"line\">      <span class=\"keyword\">const</span> formattedTime = <span class=\"string\">` @ <span class=\"subst\">$&#123;pad(time.getHours(), <span class=\"number\">2</span>)&#125;</span>:<span class=\"subst\">$&#123;pad(time.getMinutes(), <span class=\"number\">2</span>)&#125;</span>:<span class=\"subst\">$&#123;pad(time.getSeconds(), <span class=\"number\">2</span>)&#125;</span>.<span class=\"subst\">$&#123;pad(time.getMilliseconds(), <span class=\"number\">3</span>)&#125;</span>`</span></div><div class=\"line\">      <span class=\"keyword\">const</span> formattedMutation = mutationTransformer(mutation)</div><div class=\"line\">      <span class=\"keyword\">const</span> message = <span class=\"string\">`mutation <span class=\"subst\">$&#123;mutation.type&#125;</span><span class=\"subst\">$&#123;formattedTime&#125;</span>`</span></div><div class=\"line\">      <span class=\"keyword\">const</span> startMessage = collapsed</div><div class=\"line\">        ? <span class=\"built_in\">console</span>.groupCollapsed</div><div class=\"line\">        : <span class=\"built_in\">console</span>.group</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// render</span></div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        startMessage.call(<span class=\"built_in\">console</span>, message)</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(message)</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'%c prev state'</span>, <span class=\"string\">'color: #9E9E9E; font-weight: bold'</span>, transformer(prevState))</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'%c mutation'</span>, <span class=\"string\">'color: #03A9F4; font-weight: bold'</span>, formattedMutation)</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'%c next state'</span>, <span class=\"string\">'color: #4CAF50; font-weight: bold'</span>, transformer(nextState))</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.groupEnd()</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'—— log end ——'</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      prevState = nextState</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">repeat</span> (<span class=\"params\">str, times</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(times + <span class=\"number\">1</span>)).join(str)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pad</span> (<span class=\"params\">num, maxLength</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> repeat(<span class=\"string\">'0'</span>, maxLength - num.toString().length) + num</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>插件对外暴露的是 createLogger 方法，它实际上接受 3 个参数，它们都有默认值，通常我们用默认值就可以。createLogger 的返回的是一个函数，当我执行 logger 插件的时候，实际上执行的是这个函数，下面来看一下这个函数做了哪些事情。</p>\n<p>函数首先执行了 <code>let prevState = deepCopy(store.state)</code> 深拷贝当前 store 的 rootState。这里为什么要深拷贝，因为如果是单纯的引用，那么 <code>store.state</code> 的任何变化都会影响这个引用，这样就无法记录上一个状态了。我们来了解一下 deepCopy 的实现，在 src/util.js 里定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">find</span> (<span class=\"params\">list, f</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> list.filter(f)[<span class=\"number\">0</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span> (<span class=\"params\">obj, cache = []</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// just return if obj is immutable value</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span> || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// if obj is hit, it is in circular structure</span></div><div class=\"line\">  <span class=\"keyword\">const</span> hit = find(cache, c =&gt; c.original === obj)</div><div class=\"line\">  <span class=\"keyword\">if</span> (hit) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> hit.copy</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">const</span> copy = <span class=\"built_in\">Array</span>.isArray(obj) ? [] : &#123;&#125;</div><div class=\"line\">  <span class=\"comment\">// put the copy into cache at first</span></div><div class=\"line\">  <span class=\"comment\">// because we want to refer it in recursive deepCopy</span></div><div class=\"line\">  cache.push(&#123;</div><div class=\"line\">    <span class=\"attr\">original</span>: obj,</div><div class=\"line\">    copy</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">Object</span>.keys(obj).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</div><div class=\"line\">    copy[key] = deepCopy(obj[key], cache)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> copy</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>deepCopy 并不陌生，很多开源库如 loadash、jQuery 都有类似的实现，原理也不难理解，主要是构造一个新的对象，遍历原对象或者数组，递归调用 deepCopy。不过这里的实现有一个有意思的地方，在每次执行 deepCopy 的时候，会用 cache 数组缓存当前嵌套的对象，以及执行 deepCopy 返回的 copy。如果在 deepCopy 的过程中通过 <code>find(cache, c =&gt; c.original === obj)</code> 发现有循环引用的时候，直接返回 cache 中对应的 copy，这样就避免了无限循环的情况。</p>\n<p>回到 loggerPlugin 函数，通过 deepCopy 拷贝了当前 state 的副本并用 prevState 变量保存，接下来调用 <code>store.subscribe</code> 方法订阅 store 的 state 的变。 在回调函数中，也是先通过 deepCopy 方法拿到当前的 state 的副本，并用 nextState 变量保存。接下来获取当前格式化时间已经格式化的 mutation 变化的字符串，然后利用 console.group 以及 console.log 分组输出 prevState、mutation以及 nextState，这里可以通过我们 createLogger 的参数 collapsed、transformer 以及 mutationTransformer 来控制我们最终 log 的显示效果。在函数的最后，我们把 nextState 赋值给 prevState，便于下一次 mutation。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>Vuex 2.0 的源码分析到这就告一段落了，最后我再分享一下看源码的小心得：对于一个库或者框架源码的研究前，首先了解他们的使用场景、官网文档等；然后一定要用他，至少也要写几个小 demo，达到熟练掌握的程度；最后再从入口、API、使用方法等等多个维度去了解他内部的实现细节。如果这个库过于庞大，那就先按模块和功能拆分，一点点地消化。</p>\n<p>最后还有一个问题，有些同学会问，源码那么枯燥，我们分析学习它的有什么好处呢？首先，学习源码有助于我们更深入掌握和应用这个库或者框架；其次，我们还可以学习到源码中很多编程技巧，可以迁移到我们平时的开发工作中；最后，对于一些高级开发工程师而言，我们可以学习到它的设计思想，对将来有一天我们也去设计一个库或者框架是非常有帮助的，这也是提升自身能力水平的非常好的途径。</p>\n","categories":["vue"],"tags":["vue","vuex"]},{"title":"【转】vue-cli#2.0 webpack 配置分析","url":"http://yoursite.com/2016/12/23/vue-cli2.0 webpack配置分析/","content":"<blockquote>\n<p>原文：<a href=\"https://github.com/DDFE/DDFE-blog/issues/10\" target=\"_blank\" rel=\"external\">https://github.com/DDFE/DDFE-blog/issues/10</a></p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>作为 Vue 的使用者我们对于 vue-cli 都很熟悉，但是对它的 webpack 配置我们可能关注甚少，今天我们为大家带来 vue-cli#2.0 的 webpack 配置分析<br><a id=\"more\"></a><br>vue-cli 的简介、安装我们不在这里赘述，对它还不熟悉的同学可以直接访问 <a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"external\">vue-cli</a> 查看</p>\n<h1 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── README.md</div><div class=\"line\">├── build</div><div class=\"line\">│   ├── build.js</div><div class=\"line\">│   ├── check-versions.js</div><div class=\"line\">│   ├── dev-client.js</div><div class=\"line\">│   ├── dev-server.js</div><div class=\"line\">│   ├── utils.js</div><div class=\"line\">│   ├── webpack.base.conf.js</div><div class=\"line\">│   ├── webpack.dev.conf.js</div><div class=\"line\">│   └── webpack.prod.conf.js</div><div class=\"line\">├── config</div><div class=\"line\">│   ├── dev.env.js</div><div class=\"line\">│   ├── index.js</div><div class=\"line\">│   └── prod.env.js</div><div class=\"line\">├── index.html</div><div class=\"line\">├── package.json</div><div class=\"line\">├── src</div><div class=\"line\">│   ├── App.vue</div><div class=\"line\">│   ├── assets</div><div class=\"line\">│   │   └── logo.png</div><div class=\"line\">│   ├── components</div><div class=\"line\">│   │   └── Hello.vue</div><div class=\"line\">│   └── main.js</div><div class=\"line\">└── static</div></pre></td></tr></table></figure>\n<p>本篇文章的主要关注点在</p>\n<ul>\n<li><p>build - 编译任务的代码</p>\n</li>\n<li><p>config - webpack 的配置文件</p>\n</li>\n<li><p>package.json - 项目的基本信息</p>\n</li>\n</ul>\n<h1 id=\"入口\"><a href=\"#入口\" class=\"headerlink\" title=\"入口\"></a>入口</h1><p>从 package.json 中我们可以看到</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"node build/dev-server.js\"</span>,</div><div class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"node build/build.js\"</span>,</div><div class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"eslint --ext .js,.vue src\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当我们执行 npm run dev / npm run build 时运行的是 node build/dev-server.js 或 node build/build.js</p>\n<h1 id=\"dev-server-js\"><a href=\"#dev-server-js\" class=\"headerlink\" title=\"dev-server.js\"></a>dev-server.js</h1><p>让我们先从 build/dev-server.js 入手</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\">让我们先从 build/dev-server.js 入手</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./check-versions'</span>)() <span class=\"comment\">// 检查 Node 和 npm 版本</span></div><div class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>) <span class=\"comment\">// 获取 config/index.js 的默认配置</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* </span></div><div class=\"line\">** 如果 Node 的环境无法判断当前是 dev / product 环境</div><div class=\"line\">** 使用 config.dev.env.NODE_ENV 作为当前的环境</div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (!process.env.NODE_ENV) process.env.NODE_ENV = <span class=\"built_in\">JSON</span>.parse(config.dev.env.NODE_ENV)</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>) <span class=\"comment\">// 使用 NodeJS 自带的文件路径工具</span></div><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>) <span class=\"comment\">// 使用 express</span></div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>) <span class=\"comment\">// 使用 webpack</span></div><div class=\"line\"><span class=\"keyword\">var</span> opn = <span class=\"built_in\">require</span>(<span class=\"string\">'opn'</span>) <span class=\"comment\">// 一个可以强制打开浏览器并跳转到指定 url 的插件</span></div><div class=\"line\"><span class=\"keyword\">var</span> proxyMiddleware = <span class=\"built_in\">require</span>(<span class=\"string\">'http-proxy-middleware'</span>) <span class=\"comment\">// 使用 proxyTable </span></div><div class=\"line\"><span class=\"keyword\">var</span> webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.dev.conf'</span>) <span class=\"comment\">// 使用 dev 环境的 webpack 配置</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// default port where dev server listens for incoming traffic</span></div><div class=\"line\"><span class=\"comment\">/* 如果没有指定运行端口，使用 config.dev.port 作为运行端口 */</span></div><div class=\"line\"><span class=\"keyword\">var</span> port = process.env.PORT || config.dev.port</div><div class=\"line\"><span class=\"comment\">// Define HTTP proxies to your custom API backend</span></div><div class=\"line\"><span class=\"comment\">// https://github.com/chimurai/http-proxy-middleware</span></div><div class=\"line\"><span class=\"comment\">/* 使用 config.dev.proxyTable 的配置作为 proxyTable 的代理配置 */</span></div><div class=\"line\"><span class=\"keyword\">var</span> proxyTable = config.dev.proxyTable</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 使用 express 启动一个服务 */</span></div><div class=\"line\"><span class=\"keyword\">var</span> app = express()</div><div class=\"line\"><span class=\"keyword\">var</span> compiler = webpack(webpackConfig) <span class=\"comment\">// 启动 webpack 进行编译</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 启动 webpack-dev-middleware，将 编译后的文件暂存到内存中 */</span></div><div class=\"line\"><span class=\"keyword\">var</span> devMiddleware = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-dev-middleware'</span>)(compiler, &#123;</div><div class=\"line\">  <span class=\"attr\">publicPath</span>: webpackConfig.output.publicPath,</div><div class=\"line\">  <span class=\"attr\">stats</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">colors</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">chunks</span>: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 启动 webpack-hot-middleware，也就是我们常说的 Hot-reload */</span></div><div class=\"line\"><span class=\"keyword\">var</span> hotMiddleware = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-hot-middleware'</span>)(compiler)</div><div class=\"line\"><span class=\"comment\">// force page reload when html-webpack-plugin template changes</span></div><div class=\"line\">compiler.plugin(<span class=\"string\">'compilation'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">compilation</span>) </span>&#123;</div><div class=\"line\">  compilation.plugin(<span class=\"string\">'html-webpack-plugin-after-emit'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data, cb</span>) </span>&#123;</div><div class=\"line\">    hotMiddleware.publish(&#123; <span class=\"attr\">action</span>: <span class=\"string\">'reload'</span> &#125;)</div><div class=\"line\">    cb()</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// proxy api requests</span></div><div class=\"line\"><span class=\"comment\">// 将 proxyTable 中的请求配置挂在到启动的 express 服务上</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.keys(proxyTable).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> options = proxyTable[context]</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> options === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">    options = &#123; <span class=\"attr\">target</span>: options &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  app.use(proxyMiddleware(context, options))</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// handle fallback for HTML5 history API</span></div><div class=\"line\"><span class=\"comment\">// 使用 connect-history-api-fallback 匹配资源，如果不匹配就可以重定向到指定地址</span></div><div class=\"line\">app.use(<span class=\"built_in\">require</span>(<span class=\"string\">'connect-history-api-fallback'</span>)())</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// serve webpack bundle output</span></div><div class=\"line\"><span class=\"comment\">// 将暂存到内存中的 webpack 编译后的文件挂在到 express 服务上</span></div><div class=\"line\">app.use(devMiddleware)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// enable hot-reload and state-preserving</span></div><div class=\"line\"><span class=\"comment\">// compilation error display</span></div><div class=\"line\"><span class=\"comment\">// 将 Hot-reload 挂在到 express 服务上</span></div><div class=\"line\">app.use(hotMiddleware)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// serve pure static assets</span></div><div class=\"line\"><span class=\"comment\">// 拼接 static 文件夹的静态资源路径</span></div><div class=\"line\"><span class=\"keyword\">var</span> staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)</div><div class=\"line\"><span class=\"comment\">// 为静态资源提供响应服务</span></div><div class=\"line\">app.use(staticPath, express.static(<span class=\"string\">'./static'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 让我们这个 express 服务监听 port 的请求，并且将此服务作为 dev-server.js 的接口暴露</span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = app.listen(port, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err)</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">var</span> uri = <span class=\"string\">'http://localhost:'</span> + port</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Listening at '</span> + uri + <span class=\"string\">'\\n'</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// when env is testing, don't need open it</span></div><div class=\"line\">  <span class=\"comment\">// 如果不是测试环境，自动打开浏览器并跳到我们的开发地址</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'testing'</span>) &#123;</div><div class=\"line\">    opn(uri)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"webpack-dev-conf-js\"><a href=\"#webpack-dev-conf-js\" class=\"headerlink\" title=\"webpack.dev.conf.js\"></a>webpack.dev.conf.js</h1><p>刚刚我们在 dev-server.js 中用到了 webpack.dev.conf.js 和 index.js，我们先来看一下 webpack.dev.conf.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>) <span class=\"comment\">// 同样的使用了 config/index.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>) <span class=\"comment\">// 使用 webpack</span></div><div class=\"line\"><span class=\"keyword\">var</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>) <span class=\"comment\">// 使用 webpack 配置合并插件</span></div><div class=\"line\"><span class=\"keyword\">var</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./utils'</span>) <span class=\"comment\">// 使用一些小工具</span></div><div class=\"line\"><span class=\"keyword\">var</span> baseWebpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.base.conf'</span>) <span class=\"comment\">// 加载 webpack.base.conf</span></div><div class=\"line\"><span class=\"comment\">/* 使用 html-webpack-plugin 插件，这个插件可以帮我们自动生成 html 并且注入到 .html 文件中 */</span></div><div class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>) </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// add hot-reload related code to entry chunks</span></div><div class=\"line\"><span class=\"comment\">// 将 Hol-reload 相对路径添加到 webpack.base.conf 的 对应 entry 前</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.keys(baseWebpackConfig.entry).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  baseWebpackConfig.entry[name] = [<span class=\"string\">'./build/dev-client'</span>].concat(baseWebpackConfig.entry[name])</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 将我们 webpack.dev.conf.js 的配置和 webpack.base.conf.js 的配置合并 */</span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = merge(baseWebpackConfig, &#123;</div><div class=\"line\">  <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// 使用 styleLoaders</span></div><div class=\"line\">    loaders: utils.styleLoaders(&#123; <span class=\"attr\">sourceMap</span>: config.dev.cssSourceMap &#125;)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// eval-source-map is faster for development</span></div><div class=\"line\">  <span class=\"comment\">// 使用 #eval-source-map 模式作为开发工具，此配置可参考 DDFE 往期文章详细了解</span></div><div class=\"line\">  devtool: <span class=\"string\">'#eval-source-map'</span>,</div><div class=\"line\">  <span class=\"attr\">plugins</span>: [</div><div class=\"line\">    <span class=\"comment\">/* definePlugin 接收字符串插入到代码当中, 所以你需要的话可以写上 JS 的字符串 */</span></div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</div><div class=\"line\">      <span class=\"string\">'process.env'</span>: config.dev.env</div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"comment\">// https://github.com/glenjamin/webpack-hot-middleware#installation--usage</span></div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.OccurenceOrderPlugin(),</div><div class=\"line\">    <span class=\"comment\">/* HotModule 插件在页面进行变更的时候只会重回对应的页面模块，不会重绘整个 html 文件 */</span></div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),</div><div class=\"line\">    <span class=\"comment\">/* 使用了 NoErrorsPlugin 后页面中的报错不会阻塞，但是会在编译结束后报错 */</span></div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.NoErrorsPlugin(),</div><div class=\"line\">    <span class=\"comment\">// https://github.com/ampedandwired/html-webpack-plugin</span></div><div class=\"line\">    <span class=\"comment\">/* 将 index.html 作为入口，注入 html 代码后生成 index.html文件 */</span></div><div class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">      <span class=\"attr\">filename</span>: <span class=\"string\">'index.html'</span>,</div><div class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">'index.html'</span>,</div><div class=\"line\">      <span class=\"attr\">inject</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"webpack-base-conf-js\"><a href=\"#webpack-base-conf-js\" class=\"headerlink\" title=\"webpack.base.conf.js\"></a>webpack.base.conf.js</h1><p>我们看到在 webpack.dev.conf.js 中又引入了 webpack.base.conf.js， 它看起来很重要的样子，所以我们只能在下一章来看看 config/index.js 了 （摊手）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>) <span class=\"comment\">// 使用 NodeJS 自带的文件路径插件</span></div><div class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>) <span class=\"comment\">// 引入 config/index.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./utils'</span>) <span class=\"comment\">// 引入一些小工具</span></div><div class=\"line\"><span class=\"keyword\">var</span> projectRoot = path.resolve(__dirname, <span class=\"string\">'../'</span>) <span class=\"comment\">// 拼接我们的工作区路径为一个绝对路径</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 将 NodeJS 环境作为我们的编译环境 */</span></div><div class=\"line\"><span class=\"keyword\">var</span> env = process.env.NODE_ENV</div><div class=\"line\"><span class=\"comment\">// check env &amp; config/index.js to decide weither to enable CSS Sourcemaps for the</span></div><div class=\"line\"><span class=\"comment\">// various preprocessor loaders added to vue-loader at the end of this file</span></div><div class=\"line\"><span class=\"comment\">/* 是否在 dev 环境下开启 cssSourceMap ，在 config/index.js 中可配置 */</span></div><div class=\"line\"><span class=\"keyword\">var</span> cssSourceMapDev = (env === <span class=\"string\">'development'</span> &amp;&amp; config.dev.cssSourceMap)</div><div class=\"line\"><span class=\"comment\">/* 是否在 production 环境下开启 cssSourceMap ，在 config/index.js 中可配置 */</span></div><div class=\"line\"><span class=\"keyword\">var</span> cssSourceMapProd = (env === <span class=\"string\">'production'</span> &amp;&amp; config.build.productionSourceMap)</div><div class=\"line\"><span class=\"comment\">/* 最终是否使用 cssSourceMap */</span></div><div class=\"line\"><span class=\"keyword\">var</span> useCssSourceMap = cssSourceMapDev || cssSourceMapProd</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"attr\">entry</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">app</span>: <span class=\"string\">'./src/main.js'</span> <span class=\"comment\">// 编译文件入口</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>: config.build.assetsRoot, <span class=\"comment\">// 编译输出的静态资源根路径</span></div><div class=\"line\">    publicPath: process.env.NODE_ENV === <span class=\"string\">'production'</span> ? config.build.assetsPublicPath : config.dev.assetsPublicPath, <span class=\"comment\">// 正式发布环境下编译输出的上线路径的根路径</span></div><div class=\"line\">    filename: <span class=\"string\">'[name].js'</span> <span class=\"comment\">// 编译输出的文件名</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// 自动补全的扩展名</span></div><div class=\"line\">    extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.vue'</span>],</div><div class=\"line\">    <span class=\"comment\">// 不进行自动补全或处理的文件或者文件夹</span></div><div class=\"line\">    fallback: [path.join(__dirname, <span class=\"string\">'../node_modules'</span>)],</div><div class=\"line\">    <span class=\"attr\">alias</span>: &#123;</div><div class=\"line\">\t  <span class=\"comment\">// 默认路径代理，例如 import Vue from 'vue'，会自动到 'vue/dist/vue.common.js'中寻找</span></div><div class=\"line\">      <span class=\"string\">'vue$'</span>: <span class=\"string\">'vue/dist/vue.common.js'</span>,</div><div class=\"line\">      <span class=\"string\">'src'</span>: path.resolve(__dirname, <span class=\"string\">'../src'</span>),</div><div class=\"line\">      <span class=\"string\">'assets'</span>: path.resolve(__dirname, <span class=\"string\">'../src/assets'</span>),</div><div class=\"line\">      <span class=\"string\">'components'</span>: path.resolve(__dirname, <span class=\"string\">'../src/components'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">resolveLoader</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">fallback</span>: [path.join(__dirname, <span class=\"string\">'../node_modules'</span>)]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">preLoaders</span>: [</div><div class=\"line\">      <span class=\"comment\">// 预处理的文件及使用的 loader</span></div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.vue$/</span>,</div><div class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">'eslint'</span>,</div><div class=\"line\">        <span class=\"attr\">include</span>: projectRoot,</div><div class=\"line\">        <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">'eslint'</span>,</div><div class=\"line\">        <span class=\"attr\">include</span>: projectRoot,</div><div class=\"line\">        <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">loaders</span>: [</div><div class=\"line\">      <span class=\"comment\">// 需要处理的文件及使用的 loader</span></div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.vue$/</span>,</div><div class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">'vue'</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">'babel'</span>,</div><div class=\"line\">        <span class=\"attr\">include</span>: projectRoot,</div><div class=\"line\">        <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.json$/</span>,</div><div class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">'json'</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,</div><div class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">'url'</span>,</div><div class=\"line\">        <span class=\"attr\">query</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">limit</span>: <span class=\"number\">10000</span>,</div><div class=\"line\">          <span class=\"attr\">name</span>: utils.assetsPath(<span class=\"string\">'img/[name].[hash:7].[ext]'</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(woff2?|eot|ttf|otf)(\\?.*)?$/</span>,</div><div class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">'url'</span>,</div><div class=\"line\">        <span class=\"attr\">query</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">limit</span>: <span class=\"number\">10000</span>,</div><div class=\"line\">          <span class=\"attr\">name</span>: utils.assetsPath(<span class=\"string\">'fonts/[name].[hash:7].[ext]'</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">eslint</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// eslint 代码检查配置工具</span></div><div class=\"line\">    formatter: <span class=\"built_in\">require</span>(<span class=\"string\">'eslint-friendly-formatter'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">vue</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// .vue 文件配置 loader 及工具 (autoprefixer)</span></div><div class=\"line\">    loaders: utils.cssLoaders(&#123; <span class=\"attr\">sourceMap</span>: useCssSourceMap &#125;),</div><div class=\"line\">    <span class=\"attr\">postcss</span>: [</div><div class=\"line\">      <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)(&#123;</div><div class=\"line\">        <span class=\"attr\">browsers</span>: [<span class=\"string\">'last 2 versions'</span>]</div><div class=\"line\">      &#125;)</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"config-index-js\"><a href=\"#config-index-js\" class=\"headerlink\" title=\"config/index.js\"></a>config/index.js</h1><p>终于分析完了 webpack.base.conf.js，来让我们看一下 config/index.js</p>\n<p>index.js 中有 dev 和 production 两种环境的配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// see http://vuejs-templates.github.io/webpack for documentation.</span></div><div class=\"line\"><span class=\"comment\">// 不再重复介绍了 ...</span></div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"attr\">build</span>: &#123; <span class=\"comment\">// production 环境</span></div><div class=\"line\">    env: <span class=\"built_in\">require</span>(<span class=\"string\">'./prod.env'</span>), <span class=\"comment\">// 使用 config/prod.env.js 中定义的编译环境</span></div><div class=\"line\">    index: path.resolve(__dirname, <span class=\"string\">'../dist/index.html'</span>), <span class=\"comment\">// 编译输入的 index.html 文件</span></div><div class=\"line\">    assetsRoot: path.resolve(__dirname, <span class=\"string\">'../dist'</span>), <span class=\"comment\">// 编译输出的静态资源路径</span></div><div class=\"line\">    assetsSubDirectory: <span class=\"string\">'static'</span>, <span class=\"comment\">// 编译输出的二级目录</span></div><div class=\"line\">    assetsPublicPath: <span class=\"string\">'/'</span>, <span class=\"comment\">// 编译发布的根目录，可配置为资源服务器域名或 CDN 域名</span></div><div class=\"line\">    productionSourceMap: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否开启 cssSourceMap</span></div><div class=\"line\">    <span class=\"comment\">// Gzip off by default as many popular static hosts such as</span></div><div class=\"line\">    <span class=\"comment\">// Surge or Netlify already gzip all static assets for you.</span></div><div class=\"line\">    <span class=\"comment\">// Before setting to `true`, make sure to:</span></div><div class=\"line\">    <span class=\"comment\">// npm install --save-dev compression-webpack-plugin</span></div><div class=\"line\">    productionGzip: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否开启 gzip</span></div><div class=\"line\">    productionGzipExtensions: [<span class=\"string\">'js'</span>, <span class=\"string\">'css'</span>] <span class=\"comment\">// 需要使用 gzip 压缩的文件扩展名</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">dev</span>: &#123; <span class=\"comment\">// dev 环境</span></div><div class=\"line\">    env: <span class=\"built_in\">require</span>(<span class=\"string\">'./dev.env'</span>), <span class=\"comment\">// 使用 config/dev.env.js 中定义的编译环境</span></div><div class=\"line\">    port: <span class=\"number\">8080</span>, <span class=\"comment\">// 运行测试页面的端口</span></div><div class=\"line\">    assetsSubDirectory: <span class=\"string\">'static'</span>, <span class=\"comment\">// 编译输出的二级目录</span></div><div class=\"line\">    assetsPublicPath: <span class=\"string\">'/'</span>, <span class=\"comment\">// 编译发布的根目录，可配置为资源服务器域名或 CDN 域名</span></div><div class=\"line\">    proxyTable: &#123;&#125;, <span class=\"comment\">// 需要 proxyTable 代理的接口（可跨域）</span></div><div class=\"line\">    <span class=\"comment\">// CSS Sourcemaps off by default because relative paths are \"buggy\"</span></div><div class=\"line\">    <span class=\"comment\">// with this option, according to the CSS-Loader README</span></div><div class=\"line\">    <span class=\"comment\">// (https://github.com/webpack/css-loader#sourcemaps)</span></div><div class=\"line\">    <span class=\"comment\">// In our experience, they generally work as expected,</span></div><div class=\"line\">    <span class=\"comment\">// just be aware of this issue when enabling this option.</span></div><div class=\"line\">    cssSourceMap: <span class=\"literal\">false</span> <span class=\"comment\">// 是否开启 cssSourceMap</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此，我们的 npm run dev 命令就讲解完毕，下面让我们来看一看执行 npm run build 命令时发生了什么 ～</p>\n<h1 id=\"build-js\"><a href=\"#build-js\" class=\"headerlink\" title=\"build.js\"></a>build.js</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// https://github.com/shelljs/shelljs</span></div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./check-versions'</span>)() <span class=\"comment\">// 检查 Node 和 npm 版本</span></div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'shelljs/global'</span>) <span class=\"comment\">// 使用了 shelljs 插件，可以让我们在 node 环境的 js 中使用 shell</span></div><div class=\"line\">env.NODE_ENV = <span class=\"string\">'production'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>) <span class=\"comment\">// 不再赘述</span></div><div class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>) <span class=\"comment\">// 加载 config.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> ora = <span class=\"built_in\">require</span>(<span class=\"string\">'ora'</span>) <span class=\"comment\">// 一个很好看的 loading 插件</span></div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>) <span class=\"comment\">// 加载 webpack</span></div><div class=\"line\"><span class=\"keyword\">var</span> webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.prod.conf'</span>) <span class=\"comment\">// 加载 webpack.prod.conf</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"comment\">//  输出提示信息 ～ 提示用户请在 http 服务下查看本页面，否则为空白页</span></div><div class=\"line\">  <span class=\"string\">'  Tip:\\n'</span> +</div><div class=\"line\">  <span class=\"string\">'  Built files are meant to be served over an HTTP server.\\n'</span> +</div><div class=\"line\">  <span class=\"string\">'  Opening index.html over file:// won\\'t work.\\n'</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> spinner = ora(<span class=\"string\">'building for production...'</span>) <span class=\"comment\">// 使用 ora 打印出 loading + log</span></div><div class=\"line\">spinner.start() <span class=\"comment\">// 开始 loading 动画</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 拼接编译输出文件路径 */</span></div><div class=\"line\"><span class=\"keyword\">var</span> assetsPath = path.join(config.build.assetsRoot, config.build.assetsSubDirectory)</div><div class=\"line\"><span class=\"comment\">/* 删除这个文件夹 （递归删除） */</span></div><div class=\"line\">rm(<span class=\"string\">'-rf'</span>, assetsPath)</div><div class=\"line\"><span class=\"comment\">/* 创建此文件夹 */</span> </div><div class=\"line\">mkdir(<span class=\"string\">'-p'</span>, assetsPath)</div><div class=\"line\"><span class=\"comment\">/* 复制 static 文件夹到我们的编译输出目录 */</span></div><div class=\"line\">cp(<span class=\"string\">'-R'</span>, <span class=\"string\">'static/*'</span>, assetsPath)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//  开始 webpack 的编译</span></div><div class=\"line\">webpack(webpackConfig, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, stats</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 编译成功的回调函数</span></div><div class=\"line\">  spinner.stop()</div><div class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err</div><div class=\"line\">  process.stdout.write(stats.toString(&#123;</div><div class=\"line\">    <span class=\"attr\">colors</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">modules</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">children</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">chunks</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">chunkModules</span>: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;) + <span class=\"string\">'\\n'</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\">webpack.prod.conf.js</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>) <span class=\"comment\">// 不再赘述</span></div><div class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>) <span class=\"comment\">// 加载 confi.index.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./utils'</span>) <span class=\"comment\">// 使用一些小工具</span></div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>) <span class=\"comment\">// 加载 webpack</span></div><div class=\"line\"><span class=\"keyword\">var</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>) <span class=\"comment\">// 加载 webpack 配置合并工具</span></div><div class=\"line\"><span class=\"keyword\">var</span> baseWebpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.base.conf'</span>) <span class=\"comment\">// 加载 webpack.base.conf.js</span></div><div class=\"line\"><span class=\"comment\">/* 一个 webpack 扩展，可以提取一些代码并且将它们和文件分离开 */</span> </div><div class=\"line\"><span class=\"comment\">/* 如果我们想将 webpack 打包成一个文件 css js 分离开，那我们需要这个插件 */</span></div><div class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>)</div><div class=\"line\"><span class=\"comment\">/* 一个可以插入 html 并且创建新的 .html 文件的插件 */</span></div><div class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> env = config.build.env</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 合并 webpack.base.conf.js */</span></div><div class=\"line\"><span class=\"keyword\">var</span> webpackConfig = merge(baseWebpackConfig, &#123;</div><div class=\"line\">  <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">/* 使用的 loader */</span></div><div class=\"line\">    loaders: utils.styleLoaders(&#123; <span class=\"attr\">sourceMap</span>: config.build.productionSourceMap, <span class=\"attr\">extract</span>: <span class=\"literal\">true</span> &#125;)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">/* 是否使用 #source-map 开发工具，更多信息可以查看 DDFE 往期文章 */</span></div><div class=\"line\">  devtool: config.build.productionSourceMap ? <span class=\"string\">'#source-map'</span> : <span class=\"literal\">false</span>,</div><div class=\"line\">  <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">/* 编译输出目录 */</span></div><div class=\"line\">    path: config.build.assetsRoot,</div><div class=\"line\">    <span class=\"comment\">/* 编译输出文件名 */</span></div><div class=\"line\">    filename: utils.assetsPath(<span class=\"string\">'js/[name].[chunkhash].js'</span>), <span class=\"comment\">// 我们可以在 hash 后加 :6 决定使用几位 hash 值</span></div><div class=\"line\">    <span class=\"comment\">// 没有指定输出名的文件输出的文件名</span></div><div class=\"line\">    chunkFilename: utils.assetsPath(<span class=\"string\">'js/[id].[chunkhash].js'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">vue</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">/* 编译 .vue 文件时使用的 loader */</span></div><div class=\"line\">    loaders: utils.cssLoaders(&#123;</div><div class=\"line\">      <span class=\"attr\">sourceMap</span>: config.build.productionSourceMap,</div><div class=\"line\">      <span class=\"attr\">extract</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">plugins</span>: [</div><div class=\"line\">    <span class=\"comment\">/* 使用的插件 */</span></div><div class=\"line\">    <span class=\"comment\">// http://vuejs.github.io/vue-loader/en/workflow/production.html</span></div><div class=\"line\">    <span class=\"comment\">/* definePlugin 接收字符串插入到代码当中, 所以你需要的话可以写上 JS 的字符串 */</span></div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</div><div class=\"line\">      <span class=\"string\">'process.env'</span>: env</div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"comment\">/* 压缩 js (同样可以压缩 css) */</span></div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class=\"line\">      <span class=\"attr\">compress</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">warnings</span>: <span class=\"literal\">false</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.OccurrenceOrderPlugin(),</div><div class=\"line\">    <span class=\"comment\">// extract css into its own file</span></div><div class=\"line\">    <span class=\"comment\">/* 将 css 文件分离出来 */</span></div><div class=\"line\">    <span class=\"keyword\">new</span> ExtractTextPlugin(utils.assetsPath(<span class=\"string\">'css/[name].[contenthash].css'</span>)),</div><div class=\"line\">    <span class=\"comment\">// generate dist index.html with correct asset hash for caching.</span></div><div class=\"line\">    <span class=\"comment\">// you can customize output by editing /index.html</span></div><div class=\"line\">    <span class=\"comment\">// see https://github.com/ampedandwired/html-webpack-plugin</span></div><div class=\"line\">    <span class=\"comment\">/* 输入输出的 .html 文件 */</span></div><div class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">      <span class=\"attr\">filename</span>: config.build.index,</div><div class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">'index.html'</span>,</div><div class=\"line\">      <span class=\"attr\">inject</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否注入 html</span></div><div class=\"line\">      minify: &#123; <span class=\"comment\">// 压缩的方式</span></div><div class=\"line\">        removeComments: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">collapseWhitespace</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">removeAttributeQuotes</span>: <span class=\"literal\">true</span></div><div class=\"line\">        <span class=\"comment\">// more options:</span></div><div class=\"line\">        <span class=\"comment\">// https://github.com/kangax/html-minifier#options-quick-reference</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"comment\">// necessary to consistently work with multiple chunks via CommonsChunkPlugin</span></div><div class=\"line\">      chunksSortMode: <span class=\"string\">'dependency'</span></div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"comment\">// split vendor js into its own file</span></div><div class=\"line\">    <span class=\"comment\">/* 没有指定输出文件名的文件输出的静态文件名 */</span></div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">'vendor'</span>,</div><div class=\"line\">      <span class=\"attr\">minChunks</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">module, count</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// any required modules inside node_modules are extracted to vendor</span></div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">          <span class=\"built_in\">module</span>.resource &amp;&amp;</div><div class=\"line\">          <span class=\"regexp\">/\\.js$/</span>.test(<span class=\"built_in\">module</span>.resource) &amp;&amp;</div><div class=\"line\">          <span class=\"built_in\">module</span>.resource.indexOf(</div><div class=\"line\">            path.join(__dirname, <span class=\"string\">'../node_modules'</span>)</div><div class=\"line\">          ) === <span class=\"number\">0</span></div><div class=\"line\">        )</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"comment\">// extract webpack runtime and module manifest to its own file in order to</span></div><div class=\"line\">    <span class=\"comment\">// prevent vendor hash from being updated whenever app bundle is updated</span></div><div class=\"line\">    <span class=\"comment\">/* 没有指定输出文件名的文件输出的静态文件名 */</span></div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">'manifest'</span>,</div><div class=\"line\">      <span class=\"attr\">chunks</span>: [<span class=\"string\">'vendor'</span>]</div><div class=\"line\">    &#125;)</div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 开启 gzip 的情况下使用下方的配置 */</span></div><div class=\"line\"><span class=\"keyword\">if</span> (config.build.productionGzip) &#123;</div><div class=\"line\">  <span class=\"comment\">/* 加载 compression-webpack-plugin 插件 */</span></div><div class=\"line\">  <span class=\"keyword\">var</span> CompressionWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'compression-webpack-plugin'</span>)</div><div class=\"line\">  <span class=\"comment\">/* 向webpackconfig.plugins中加入下方的插件 */</span></div><div class=\"line\">  webpackConfig.plugins.push(</div><div class=\"line\">    <span class=\"comment\">/* 使用 compression-webpack-plugin 插件进行压缩 */</span></div><div class=\"line\">    <span class=\"keyword\">new</span> CompressionWebpackPlugin(&#123;</div><div class=\"line\">      <span class=\"attr\">asset</span>: <span class=\"string\">'[path].gz[query]'</span>,</div><div class=\"line\">      <span class=\"attr\">algorithm</span>: <span class=\"string\">'gzip'</span>,</div><div class=\"line\">      <span class=\"attr\">test</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(</div><div class=\"line\">        <span class=\"string\">'\\\\.('</span> +</div><div class=\"line\">        config.build.productionGzipExtensions.join(<span class=\"string\">'|'</span>) +</div><div class=\"line\">        <span class=\"string\">')$'</span></div><div class=\"line\">      ),</div><div class=\"line\">      <span class=\"attr\">threshold</span>: <span class=\"number\">10240</span>,</div><div class=\"line\">      <span class=\"attr\">minRatio</span>: <span class=\"number\">0.8</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = webpackConfig</div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>至此 ～ 我们的 vue-cli#2.0 webpack 配置分析文件就讲解完毕 ～</p>\n<p>对于一些插件的详细 options 我们没有进行讲解，感兴趣的同学可以去 npm 商店搜索对应插件查看 options ~</p>\n","categories":["vue"],"tags":["vue-cli","vue"]},{"title":"豆瓣Rexxar使用记录","url":"http://yoursite.com/2016/12/22/豆瓣Rexxar使用介绍/","content":"<blockquote>\n<p>Rexxar 是一个针对移动端的混合开发框架。现在支持 Android 和 iOS 平台。rexxar-web 是 Rexxar 的 Web 端实现，提供配合 Rexxar Container 运行的基础工具。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"相关hybrid方案\"><a href=\"#相关hybrid方案\" class=\"headerlink\" title=\"相关hybrid方案\"></a>相关hybrid方案</h2><ul>\n<li>1.在JS 中做一次URL跳转，然后在OC中拦截跳转。（这里分为UIWebView 和 WKWebView两种，去年因为还要兼容iOS 6，所以没办法只能采用UIWebView来做。）</li>\n<li>2.利用WKWebView 的MessageHandler。</li>\n<li>3.利用系统库JavaScriptCore，来做相互调用。（iOS 7推出的）</li>\n<li>4.利用第三方库WebViewJavascriptBridge。JSBridge(Android: JsBridge，iOS：WebViewJavascriptBridge)。</li>\n<li>5.利用第三方cordova库，以前叫PhoneGap。（这是一个库平台的库）</li>\n<li>6.当下盛行的React Native。</li>\n<li>7.阿里推出的weex(使用了vue框架)，现已捐赠Apache。</li>\n</ul>\n<p>以下介绍的Rexxar使用的便是拦截的方案。</p>\n<h2 id=\"Rexxar-简介\"><a href=\"#Rexxar-简介\" class=\"headerlink\" title=\"Rexxar 简介\"></a>Rexxar 简介</h2><p>关于 Rexxar 的整体介绍，可以查看文档：<a href=\"http://lincode.github.io/Rexxar-OpenSource\" target=\"_blank\" rel=\"external\">Rexxar 简介</a>。</p>\n<p>关于 Rexxar iOS，可以访问：<a href=\"https://github.com/douban/rexxar-ios\" target=\"_blank\" rel=\"external\">https://github.com/douban/rexxar-ios</a>。</p>\n<p>关于 Rexxar Android，可以访问：<a href=\"https://github.com/douban/rexxar-android\" target=\"_blank\" rel=\"external\">https://github.com/douban/rexxar-android</a>。</p>\n<h2 id=\"使用感受\"><a href=\"#使用感受\" class=\"headerlink\" title=\"使用感受\"></a>使用感受</h2><p>关于rexxar的使用在博客还有github上都有详细介绍，用户可以先大致了解，这里再补充我在实际项目中使用所遇到的问题。</p>\n<h3 id=\"iOS平台\"><a href=\"#iOS平台\" class=\"headerlink\" title=\"iOS平台\"></a>iOS平台</h3><blockquote>\n<p>采用拦截请求转发的方式，来达到js与native的交互。</p>\n</blockquote>\n<p>1、 rexxar-container api root 设置问题<br>按照demo所设置的 douban://rexxar-container/api 这种写法，会报domain无法访问的错误。所以实际应该设置一个可访问的域名来作为container-api的接口地址。</p>\n<p>2、rexxar的缓存机制<br>rexxar自己设定了一套路由缓存机制，会通过请求回来的路由映射到相应的地址，并且在默认开启缓存模式的时候，是先下载网页再打开页面。<br>这个时候我就遇到了不太满足我自己业务的功能：</p>\n<ul>\n<li>如果网络地址不是一个网页资源，如：www.baidu.com这样的网站，它并不能正确下载，所以这时加载是错误的。</li>\n<li>假如我加载的是.html结尾的地址，能够成功load出网页，但是如果你网站其余资源地址是相对路径的话，网页加载的也是有问题的，因为相对路径出来就是错误的。</li>\n<li>地址路径的一些额外信息，要知道query和hash对于一个网页来说也是很重要的，开启缓存机制的话，这些信息都将会被丢弃。</li>\n</ul>\n<p>我的解决方案：继承RexxarViewController，重写<code>_rxr_htmlURLWithUri</code>方法，使得每次都加载完整的网络地址。并且关闭缓存<code>[RXRConfig setCacheEnable:NO]</code>。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">NSURL</span> *)_rxr_htmlURLWithUri:(<span class=\"built_in\">NSURL</span> *)uri htmlFileURL:(<span class=\"built_in\">NSURL</span> *)htmlFileURL</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 当前网络url</span></div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *currentUrl = <span class=\"literal\">nil</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!htmlFileURL) &#123;</div><div class=\"line\">        <span class=\"comment\">// 没有设置 htmlFileURL，则使用本地 html 文件或者服务器读取 html 文件。</span></div><div class=\"line\">        </div><div class=\"line\">        htmlFileURL = [[RXRRouteManager sharedInstance] remoteHtmlURLForURI:<span class=\"keyword\">self</span>.uri];</div><div class=\"line\">        currentUrl = [htmlFileURL <span class=\"keyword\">copy</span>];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> ([RXRConfig isCacheEnable] &amp;&amp; [htmlFileURL.path containsString: <span class=\"string\">@\".html\"</span>]) &#123;</div><div class=\"line\">            <span class=\"comment\">// 如果缓存启用，尝试读取本地文件。如果没有本地文件（本地文件包括缓存，和资源文件夹），则从服务器读取。</span></div><div class=\"line\">            <span class=\"built_in\">NSURL</span> *localHtmlURL = [[RXRRouteManager sharedInstance] localHtmlURLForURI:<span class=\"keyword\">self</span>.uri];</div><div class=\"line\">            <span class=\"keyword\">if</span> (localHtmlURL) &#123;</div><div class=\"line\">                htmlFileURL = localHtmlURL;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (htmlFileURL.query.length != <span class=\"number\">0</span> &amp;&amp; htmlFileURL.fragment.length != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 为了方便 escape 正确的 uri，做了下面的假设。之后放弃 iOS 7 后可以改用 `queryItem` 来实现。</span></div><div class=\"line\">        <span class=\"comment\">// 做个合理假设：html URL 中不应该有 query string 和 fragment。</span></div><div class=\"line\">        RXRWarnLog(<span class=\"string\">@\"local html 's format is not right! Url has query and fragment.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// `absoluteString` 返回的是已经 escape 过的文本，这里先转换为原始文本。</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *uriText = uri.absoluteString.stringByRemovingPercentEncoding;</div><div class=\"line\">    <span class=\"comment\">// 把 uri 的原始文本所有内容全部 escape。</span></div><div class=\"line\">    <span class=\"built_in\">NSCharacterSet</span> *set = [<span class=\"built_in\">NSCharacterSet</span> characterSetWithCharactersInString:<span class=\"string\">@\"\"</span>];</div><div class=\"line\">    uriText = [uriText stringByAddingPercentEncodingWithAllowedCharacters:set];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *realLoadUrl = <span class=\"literal\">nil</span>;</div><div class=\"line\">    <span class=\"comment\">// 拼接完整url</span></div><div class=\"line\">    <span class=\"keyword\">if</span>([htmlFileURL isFileURL])&#123;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *query = currentUrl.query ? [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"?%@&amp;uri=%@\"</span>,currentUrl.query, uriText] : [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"?uri=%@\"</span>, uriText];</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *fragment = currentUrl.fragment ? [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"#%@\"</span>,currentUrl.fragment] : <span class=\"string\">@\"\"</span>;</div><div class=\"line\">        </div><div class=\"line\">        realLoadUrl = [<span class=\"built_in\">NSURL</span> URLWithString:[<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%@%@%@\"</span>,htmlFileURL.absoluteString, query, fragment]];</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *scheme = htmlFileURL.scheme;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *host = htmlFileURL.host;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *port = htmlFileURL.port ? [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\":%@\"</span>,htmlFileURL.port] : <span class=\"string\">@\"\"</span>;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *path = htmlFileURL.path ? htmlFileURL.path : <span class=\"string\">@\"/\"</span>;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *query = htmlFileURL.query ? [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"?%@&amp;uri=%@\"</span>,htmlFileURL.query, uriText] : [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"?uri=%@\"</span>, uriText];</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *fragment = htmlFileURL.fragment ? [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"#%@\"</span>,htmlFileURL.fragment] : <span class=\"string\">@\"\"</span>;</div><div class=\"line\">        </div><div class=\"line\">        realLoadUrl = [<span class=\"built_in\">NSURL</span> URLWithString:[<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%@://%@%@%@%@%@\"</span>, scheme, host, port, path, query, fragment]];</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span>  realLoadUrl;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3、UIWebView自带缓存问题<br>可通过路由链接加时间戳解决，获取修改rexxar的源码，动态拼接时间戳。</p>\n<h3 id=\"Android平台\"><a href=\"#Android平台\" class=\"headerlink\" title=\"Android平台\"></a>Android平台</h3><blockquote>\n<p>同样是采用请求拦截方式</p>\n</blockquote>\n<p>1、如果不能拦截到请求，可以查看是否将api 请求的域名添加到拦截列表中<br><code>ResourceProxy.getInstance().addProxyHosts(List&lt;&gt;() hosts);</code></p>\n<p>2、添加headers信息<br>为请求添加在headers所需要的状态信息，android出现web自己添加的部分会莫名其妙的不见了，所以headers的信息在android只能由android全部设置，而iOS这里可由web控制一部分header信息。</p>\n<h3 id=\"Web端-rexxar-web\"><a href=\"#Web端-rexxar-web\" class=\"headerlink\" title=\"Web端(rexxar-web)\"></a>Web端(rexxar-web)</h3><p>1、前端项目不限制使用何种技术框架<br>所以你可以使用react、vue、angualr等等。按照常规web项目开发模式即可。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>rexxar封装了路由以及缓存的策略，方便我们开发web与native的交互方式。但还是有以上几个方面考虑的不够，需要继续完善。</p>\n","categories":["hybrid - 原创"],"tags":["rexxar","hybrid"]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"<!-- ---\ntitle: about\ndate: 2016-12-22 22:56:52\ntype: \"about1\"\n---\n\nruan haojian\n> 在写代码时要想象最终维护你的代码的人是个有暴力倾向的精神病患者，而且他知道你住在哪儿。 -->\n","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/categories/index.html","content":"<!-- ---\ntitle: categories\ndate: 2016-12-22 22:51:53\ntype: \"categories\"\n--- -->\n","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tags/index.html","content":"<!-- ---\ntitle: 标签\ndate: 2016-12-22 17:21:57\ntype: \"tags\"\n--- -->\n","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]}]